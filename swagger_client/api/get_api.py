# coding: utf-8

"""
    Secure Email Gateway API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class GetApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def esa_api_v20_config_local_quarantines_quarantine_name_get(self, quarantine_name, **kwargs):  # noqa: E501
        """get pvo quarantine details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_config_local_quarantines_quarantine_name_get(quarantine_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str quarantine_name: (required)
        :param str device_type:
        :return: ConfigLocalQuarantinesGet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_config_local_quarantines_quarantine_name_get_with_http_info(quarantine_name, **kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_config_local_quarantines_quarantine_name_get_with_http_info(quarantine_name, **kwargs)  # noqa: E501
            return data

    def esa_api_v20_config_local_quarantines_quarantine_name_get_with_http_info(self, quarantine_name, **kwargs):  # noqa: E501
        """get pvo quarantine details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_config_local_quarantines_quarantine_name_get_with_http_info(quarantine_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str quarantine_name: (required)
        :param str device_type:
        :return: ConfigLocalQuarantinesGet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['quarantine_name', 'device_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_config_local_quarantines_quarantine_name_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'quarantine_name' is set
        if ('quarantine_name' not in params or
                params['quarantine_name'] is None):
            raise ValueError("Missing the required parameter `quarantine_name` when calling `esa_api_v20_config_local_quarantines_quarantine_name_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'quarantine_name' in params:
            path_params['quarantine_name'] = params['quarantine_name']  # noqa: E501

        query_params = []
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/config/local_quarantines/{quarantine_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigLocalQuarantinesGet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_config_logs_subscriptions_get(self, **kwargs):  # noqa: E501
        """Retrieve the details of all log subscriptions configured in your appliance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_config_logs_subscriptions_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str retrieval_method:
        :return: ConfigLogSubscriptionsGet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_config_logs_subscriptions_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_config_logs_subscriptions_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_config_logs_subscriptions_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the details of all log subscriptions configured in your appliance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_config_logs_subscriptions_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str retrieval_method:
        :return: ConfigLogSubscriptionsGet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['retrieval_method']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_config_logs_subscriptions_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'retrieval_method' in params:
            query_params.append(('retrievalMethod', params['retrieval_method']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/config/logs/subscriptions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigLogSubscriptionsGet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_config_quarantine_filters_quarantine_name_get(self, quarantine_name, **kwargs):  # noqa: E501
        """get quarantine users  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_config_quarantine_filters_quarantine_name_get(quarantine_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str quarantine_name: (required)
        :param str device_type:
        :return: ConfigLocalQuarantinesFilters
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_config_quarantine_filters_quarantine_name_get_with_http_info(quarantine_name, **kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_config_quarantine_filters_quarantine_name_get_with_http_info(quarantine_name, **kwargs)  # noqa: E501
            return data

    def esa_api_v20_config_quarantine_filters_quarantine_name_get_with_http_info(self, quarantine_name, **kwargs):  # noqa: E501
        """get quarantine users  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_config_quarantine_filters_quarantine_name_get_with_http_info(quarantine_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str quarantine_name: (required)
        :param str device_type:
        :return: ConfigLocalQuarantinesFilters
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['quarantine_name', 'device_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_config_quarantine_filters_quarantine_name_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'quarantine_name' is set
        if ('quarantine_name' not in params or
                params['quarantine_name'] is None):
            raise ValueError("Missing the required parameter `quarantine_name` when calling `esa_api_v20_config_quarantine_filters_quarantine_name_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'quarantine_name' in params:
            path_params['quarantine_name'] = params['quarantine_name']  # noqa: E501

        query_params = []
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/config/quarantine_filters/{quarantine_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigLocalQuarantinesFilters',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_config_quarantine_users_get(self, **kwargs):  # noqa: E501
        """get quarantine users  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_config_quarantine_users_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_type:
        :return: ConfigLocalQuarantinesUsers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_config_quarantine_users_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_config_quarantine_users_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_config_quarantine_users_get_with_http_info(self, **kwargs):  # noqa: E501
        """get quarantine users  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_config_quarantine_users_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_type:
        :return: ConfigLocalQuarantinesUsers
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_config_quarantine_users_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/config/quarantine_users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigLocalQuarantinesUsers',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_config_sdr_categories_get(self, **kwargs):  # noqa: E501
        """get sdr categories  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_config_sdr_categories_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_type:
        :return: ConfigSdrCategories
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_config_sdr_categories_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_config_sdr_categories_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_config_sdr_categories_get_with_http_info(self, **kwargs):  # noqa: E501
        """get sdr categories  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_config_sdr_categories_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_type:
        :return: ConfigSdrCategories
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_config_sdr_categories_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/config/sdr_categories', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigSdrCategories',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_config_sdr_threat_levels_get(self, **kwargs):  # noqa: E501
        """get sdr threat levels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_config_sdr_threat_levels_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_type:
        :return: ConfigSdrThreatLevels
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_config_sdr_threat_levels_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_config_sdr_threat_levels_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_config_sdr_threat_levels_get_with_http_info(self, **kwargs):  # noqa: E501
        """get sdr threat levels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_config_sdr_threat_levels_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_type:
        :return: ConfigSdrThreatLevels
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_config_sdr_threat_levels_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/config/sdr_threat_levels', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigSdrThreatLevels',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_logs_subscription_name_get(self, subscription_name, **kwargs):  # noqa: E501
        """Retrieve the details of all log files for a specific log subscription  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_logs_subscription_name_get(subscription_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str subscription_name: The name of the log subscription. (required)
        :param str start_date: The start date must be in ISO8601 format.
        :param str end_date: The end date must be in ISO8601 format.
        :param str compute_hash: To indicate whether to include the file SHA-256 value of the log file in the response.
        :return: ConfigLogSubscriptionDetailGet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_logs_subscription_name_get_with_http_info(subscription_name, **kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_logs_subscription_name_get_with_http_info(subscription_name, **kwargs)  # noqa: E501
            return data

    def esa_api_v20_logs_subscription_name_get_with_http_info(self, subscription_name, **kwargs):  # noqa: E501
        """Retrieve the details of all log files for a specific log subscription  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_logs_subscription_name_get_with_http_info(subscription_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str subscription_name: The name of the log subscription. (required)
        :param str start_date: The start date must be in ISO8601 format.
        :param str end_date: The end date must be in ISO8601 format.
        :param str compute_hash: To indicate whether to include the file SHA-256 value of the log file in the response.
        :return: ConfigLogSubscriptionDetailGet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subscription_name', 'start_date', 'end_date', 'compute_hash']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_logs_subscription_name_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subscription_name' is set
        if ('subscription_name' not in params or
                params['subscription_name'] is None):
            raise ValueError("Missing the required parameter `subscription_name` when calling `esa_api_v20_logs_subscription_name_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'subscription_name' in params:
            path_params['subscription_name'] = params['subscription_name']  # noqa: E501

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'compute_hash' in params:
            query_params.append(('computeHash', params['compute_hash']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/logs/{subscription_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigLogSubscriptionDetailGet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_logs_subscription_name_log_file_name_get(self, subscription_name, log_file_name, **kwargs):  # noqa: E501
        """Retrieve the actual log file using the downloadUrl attribute of the response obtained from the API signature of the previous API  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_logs_subscription_name_log_file_name_get(subscription_name, log_file_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str subscription_name: The name of the log subscription (required)
        :param str log_file_name: The name of the log file to be downloaded. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_logs_subscription_name_log_file_name_get_with_http_info(subscription_name, log_file_name, **kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_logs_subscription_name_log_file_name_get_with_http_info(subscription_name, log_file_name, **kwargs)  # noqa: E501
            return data

    def esa_api_v20_logs_subscription_name_log_file_name_get_with_http_info(self, subscription_name, log_file_name, **kwargs):  # noqa: E501
        """Retrieve the actual log file using the downloadUrl attribute of the response obtained from the API signature of the previous API  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_logs_subscription_name_log_file_name_get_with_http_info(subscription_name, log_file_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str subscription_name: The name of the log subscription (required)
        :param str log_file_name: The name of the log file to be downloaded. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subscription_name', 'log_file_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_logs_subscription_name_log_file_name_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subscription_name' is set
        if ('subscription_name' not in params or
                params['subscription_name'] is None):
            raise ValueError("Missing the required parameter `subscription_name` when calling `esa_api_v20_logs_subscription_name_log_file_name_get`")  # noqa: E501
        # verify the required parameter 'log_file_name' is set
        if ('log_file_name' not in params or
                params['log_file_name'] is None):
            raise ValueError("Missing the required parameter `log_file_name` when calling `esa_api_v20_logs_subscription_name_log_file_name_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'subscription_name' in params:
            path_params['subscription_name'] = params['subscription_name']  # noqa: E501
        if 'log_file_name' in params:
            path_params['log_file_name'] = params['log_file_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/logs/{subscription_name}/{log_file_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_quarantine_blocklist_get(self, **kwargs):  # noqa: E501
        """Retrieve Blocklist entries  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_quarantine_blocklist_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str action:
        :param str view_by:
        :param str search:
        :param str quarantine_type:
        :param str order_dir:
        :param str order_by:
        :param str offset:
        :param str limit:
        :return: QuarantineSafelist
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_quarantine_blocklist_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_quarantine_blocklist_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_quarantine_blocklist_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve Blocklist entries  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_quarantine_blocklist_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str action:
        :param str view_by:
        :param str search:
        :param str quarantine_type:
        :param str order_dir:
        :param str order_by:
        :param str offset:
        :param str limit:
        :return: QuarantineSafelist
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['action', 'view_by', 'search', 'quarantine_type', 'order_dir', 'order_by', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_quarantine_blocklist_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'action' in params:
            query_params.append(('action', params['action']))  # noqa: E501
        if 'view_by' in params:
            query_params.append(('viewBy', params['view_by']))  # noqa: E501
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501
        if 'quarantine_type' in params:
            query_params.append(('quarantineType', params['quarantine_type']))  # noqa: E501
        if 'order_dir' in params:
            query_params.append(('orderDir', params['order_dir']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/quarantine/blocklist', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QuarantineSafelist',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_quarantine_messages_attachment_get(self, **kwargs):  # noqa: E501
        """Download an attachment accompanying a message in a quarantine  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_quarantine_messages_attachment_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mid:
        :param str attachment_id:
        :param str quarantine_type:
        :return: QuarantineMessagesPvoAttachment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_quarantine_messages_attachment_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_quarantine_messages_attachment_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_quarantine_messages_attachment_get_with_http_info(self, **kwargs):  # noqa: E501
        """Download an attachment accompanying a message in a quarantine  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_quarantine_messages_attachment_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mid:
        :param str attachment_id:
        :param str quarantine_type:
        :return: QuarantineMessagesPvoAttachment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mid', 'attachment_id', 'quarantine_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_quarantine_messages_attachment_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'mid' in params:
            query_params.append(('mid', params['mid']))  # noqa: E501
        if 'attachment_id' in params:
            query_params.append(('attachmentId', params['attachment_id']))  # noqa: E501
        if 'quarantine_type' in params:
            query_params.append(('quarantineType', params['quarantine_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/quarantine/messages/attachment', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QuarantineMessagesPvoAttachment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_quarantine_messages_details_get(self, **kwargs):  # noqa: E501
        """Retrieve details of a message that match multiple attributes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_quarantine_messages_details_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mid:
        :param str quarantine_type:
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_quarantine_messages_details_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_quarantine_messages_details_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_quarantine_messages_details_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve details of a message that match multiple attributes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_quarantine_messages_details_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mid:
        :param str quarantine_type:
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mid', 'quarantine_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_quarantine_messages_details_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'mid' in params:
            query_params.append(('mid', params['mid']))  # noqa: E501
        if 'quarantine_type' in params:
            query_params.append(('quarantineType', params['quarantine_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/quarantine/messages/details', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_quarantine_messages_get(self, **kwargs):  # noqa: E501
        """Search for messages in the spam quarantine that match multiple attributes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_quarantine_messages_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str quarantine_type:
        :param str quarantines:
        :param str originating_esa_ip:
        :param str subject_filter_by:
        :param str subject_filter_value:
        :param str attachment_name:
        :param str attachment_size_filter_by:
        :param str attachment_size_from_value:
        :param str attachment_size_to_value:
        :param str envelope_recipient_filter_by:
        :param str envelope_recipient_filter_value:
        :param str envelope_sender_filter_by:
        :param str envelope_sender_filter_value:
        :param str order_dir:
        :param str order_by:
        :param str offset:
        :param str limit:
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_quarantine_messages_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_quarantine_messages_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_quarantine_messages_get_with_http_info(self, **kwargs):  # noqa: E501
        """Search for messages in the spam quarantine that match multiple attributes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_quarantine_messages_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str quarantine_type:
        :param str quarantines:
        :param str originating_esa_ip:
        :param str subject_filter_by:
        :param str subject_filter_value:
        :param str attachment_name:
        :param str attachment_size_filter_by:
        :param str attachment_size_from_value:
        :param str attachment_size_to_value:
        :param str envelope_recipient_filter_by:
        :param str envelope_recipient_filter_value:
        :param str envelope_sender_filter_by:
        :param str envelope_sender_filter_value:
        :param str order_dir:
        :param str order_by:
        :param str offset:
        :param str limit:
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'quarantine_type', 'quarantines', 'originating_esa_ip', 'subject_filter_by', 'subject_filter_value', 'attachment_name', 'attachment_size_filter_by', 'attachment_size_from_value', 'attachment_size_to_value', 'envelope_recipient_filter_by', 'envelope_recipient_filter_value', 'envelope_sender_filter_by', 'envelope_sender_filter_value', 'order_dir', 'order_by', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_quarantine_messages_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'quarantine_type' in params:
            query_params.append(('quarantineType', params['quarantine_type']))  # noqa: E501
        if 'quarantines' in params:
            query_params.append(('quarantines', params['quarantines']))  # noqa: E501
        if 'originating_esa_ip' in params:
            query_params.append(('originatingEsaIp', params['originating_esa_ip']))  # noqa: E501
        if 'subject_filter_by' in params:
            query_params.append(('subjectFilterBy', params['subject_filter_by']))  # noqa: E501
        if 'subject_filter_value' in params:
            query_params.append(('subjectFilterValue', params['subject_filter_value']))  # noqa: E501
        if 'attachment_name' in params:
            query_params.append(('attachmentName', params['attachment_name']))  # noqa: E501
        if 'attachment_size_filter_by' in params:
            query_params.append(('attachmentSizeFilterBy', params['attachment_size_filter_by']))  # noqa: E501
        if 'attachment_size_from_value' in params:
            query_params.append(('attachmentSizeFromValue', params['attachment_size_from_value']))  # noqa: E501
        if 'attachment_size_to_value' in params:
            query_params.append(('attachmentSizeToValue', params['attachment_size_to_value']))  # noqa: E501
        if 'envelope_recipient_filter_by' in params:
            query_params.append(('envelopeRecipientFilterBy', params['envelope_recipient_filter_by']))  # noqa: E501
        if 'envelope_recipient_filter_value' in params:
            query_params.append(('envelopeRecipientFilterValue', params['envelope_recipient_filter_value']))  # noqa: E501
        if 'envelope_sender_filter_by' in params:
            query_params.append(('envelopeSenderFilterBy', params['envelope_sender_filter_by']))  # noqa: E501
        if 'envelope_sender_filter_value' in params:
            query_params.append(('envelopeSenderFilterValue', params['envelope_sender_filter_value']))  # noqa: E501
        if 'order_dir' in params:
            query_params.append(('orderDir', params['order_dir']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/quarantine/messages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_quarantine_messages_rules_get(self, **kwargs):  # noqa: E501
        """Retrieve the rule summary  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_quarantine_messages_rules_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str quarantine_type:
        :return: QuarantinePvoRules
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_quarantine_messages_rules_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_quarantine_messages_rules_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_quarantine_messages_rules_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the rule summary  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_quarantine_messages_rules_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str quarantine_type:
        :return: QuarantinePvoRules
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['quarantine_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_quarantine_messages_rules_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'quarantine_type' in params:
            query_params.append(('quarantineType', params['quarantine_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/quarantine/messages/rules', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QuarantinePvoRules',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_quarantine_rules_search_get(self, **kwargs):  # noqa: E501
        """Search for messages in quarantine that match a specific rule ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_quarantine_rules_search_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str quarantine_type:
        :param str rule_id:
        :param str order_by:
        :param str order_dir:
        :param str offset:
        :param str limit:
        :return: QuarantineMessagesPvoRulesSearch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_quarantine_rules_search_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_quarantine_rules_search_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_quarantine_rules_search_get_with_http_info(self, **kwargs):  # noqa: E501
        """Search for messages in quarantine that match a specific rule ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_quarantine_rules_search_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str quarantine_type:
        :param str rule_id:
        :param str order_by:
        :param str order_dir:
        :param str offset:
        :param str limit:
        :return: QuarantineMessagesPvoRulesSearch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['quarantine_type', 'rule_id', 'order_by', 'order_dir', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_quarantine_rules_search_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'quarantine_type' in params:
            query_params.append(('quarantineType', params['quarantine_type']))  # noqa: E501
        if 'rule_id' in params:
            query_params.append(('ruleId', params['rule_id']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'order_dir' in params:
            query_params.append(('orderDir', params['order_dir']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/quarantine/rules_search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QuarantineMessagesPvoRulesSearch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_quarantine_safelist_get(self, **kwargs):  # noqa: E501
        """Retrieve Safelist entries  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_quarantine_safelist_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str action:
        :param str view_by:
        :param str search:
        :param str quarantine_type:
        :param str order_dir:
        :param str order_by:
        :param str offset:
        :param str limit:
        :return: QuarantineSafelist
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_quarantine_safelist_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_quarantine_safelist_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_quarantine_safelist_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve Safelist entries  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_quarantine_safelist_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str action:
        :param str view_by:
        :param str search:
        :param str quarantine_type:
        :param str order_dir:
        :param str order_by:
        :param str offset:
        :param str limit:
        :return: QuarantineSafelist
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['action', 'view_by', 'search', 'quarantine_type', 'order_dir', 'order_by', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_quarantine_safelist_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'action' in params:
            query_params.append(('action', params['action']))  # noqa: E501
        if 'view_by' in params:
            query_params.append(('viewBy', params['view_by']))  # noqa: E501
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501
        if 'quarantine_type' in params:
            query_params.append(('quarantineType', params['quarantine_type']))  # noqa: E501
        if 'order_dir' in params:
            query_params.append(('orderDir', params['order_dir']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/quarantine/safelist', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QuarantineSafelist',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_advanced_phishing_protection_summary_get(self, **kwargs):  # noqa: E501
        """advanced phishing protection summary  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_advanced_phishing_protection_summary_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailAdvancedPhishingProtectionSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_advanced_phishing_protection_summary_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_advanced_phishing_protection_summary_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_advanced_phishing_protection_summary_get_with_http_info(self, **kwargs):  # noqa: E501
        """advanced phishing protection summary  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_advanced_phishing_protection_summary_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailAdvancedPhishingProtectionSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_advanced_phishing_protection_summary_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/advanced_phishing_protection_summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailAdvancedPhishingProtectionSummary',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_amp_file_analysis_by_filename_completed_timestamp_get(self, **kwargs):  # noqa: E501
        """mail amp file analysis by filename completed timestamp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_amp_file_analysis_by_filename_completed_timestamp_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAmpFileAnalysisByFilenameCompletedTimestamp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_amp_file_analysis_by_filename_completed_timestamp_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_amp_file_analysis_by_filename_completed_timestamp_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_amp_file_analysis_by_filename_completed_timestamp_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail amp file analysis by filename completed timestamp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_amp_file_analysis_by_filename_completed_timestamp_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAmpFileAnalysisByFilenameCompletedTimestamp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_amp_file_analysis_by_filename_completed_timestamp_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_amp_file_analysis_by_filename/completed_timestamp', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailAmpFileAnalysisByFilenameCompletedTimestamp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_amp_file_analysis_by_filename_console_url_get(self, **kwargs):  # noqa: E501
        """mail amp file analysis by filename console url  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_amp_file_analysis_by_filename_console_url_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAmpFileAnalysisByFilenameConsoleUrl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_amp_file_analysis_by_filename_console_url_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_amp_file_analysis_by_filename_console_url_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_amp_file_analysis_by_filename_console_url_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail amp file analysis by filename console url  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_amp_file_analysis_by_filename_console_url_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAmpFileAnalysisByFilenameConsoleUrl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_amp_file_analysis_by_filename_console_url_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_amp_file_analysis_by_filename/console_url', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailAmpFileAnalysisByFilenameConsoleUrl',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_amp_file_analysis_by_filename_get(self, **kwargs):  # noqa: E501
        """mail amp file analysis by filename completed timestamp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_amp_file_analysis_by_filename_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAmpFileAnalysisByFilenameCompletedTimestamp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_amp_file_analysis_by_filename_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_amp_file_analysis_by_filename_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_amp_file_analysis_by_filename_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail amp file analysis by filename completed timestamp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_amp_file_analysis_by_filename_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAmpFileAnalysisByFilenameCompletedTimestamp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_amp_file_analysis_by_filename_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_amp_file_analysis_by_filename', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailAmpFileAnalysisByFilenameCompletedTimestamp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_amp_file_analysis_by_filename_interim_verdict_get(self, **kwargs):  # noqa: E501
        """mail amp file analysis by filename interim verdict  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_amp_file_analysis_by_filename_interim_verdict_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAmpFileAnalysisByFilenameInterimVerdict
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_amp_file_analysis_by_filename_interim_verdict_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_amp_file_analysis_by_filename_interim_verdict_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_amp_file_analysis_by_filename_interim_verdict_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail amp file analysis by filename interim verdict  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_amp_file_analysis_by_filename_interim_verdict_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAmpFileAnalysisByFilenameInterimVerdict
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_amp_file_analysis_by_filename_interim_verdict_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_amp_file_analysis_by_filename/interim_verdict', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailAmpFileAnalysisByFilenameInterimVerdict',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_amp_file_analysis_by_filename_msg_direction_get(self, **kwargs):  # noqa: E501
        """mail amp file analysis by filename msg direction  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_amp_file_analysis_by_filename_msg_direction_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAmpFileAnalysisByFilenameMsgDirection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_amp_file_analysis_by_filename_msg_direction_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_amp_file_analysis_by_filename_msg_direction_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_amp_file_analysis_by_filename_msg_direction_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail amp file analysis by filename msg direction  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_amp_file_analysis_by_filename_msg_direction_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAmpFileAnalysisByFilenameMsgDirection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_amp_file_analysis_by_filename_msg_direction_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_amp_file_analysis_by_filename/msg_direction', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailAmpFileAnalysisByFilenameMsgDirection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_amp_file_analysis_by_filename_run_id_get(self, **kwargs):  # noqa: E501
        """mail amp file analysis by filename run id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_amp_file_analysis_by_filename_run_id_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAmpFileAnalysisByFilenameRunId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_amp_file_analysis_by_filename_run_id_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_amp_file_analysis_by_filename_run_id_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_amp_file_analysis_by_filename_run_id_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail amp file analysis by filename run id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_amp_file_analysis_by_filename_run_id_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAmpFileAnalysisByFilenameRunId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_amp_file_analysis_by_filename_run_id_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_amp_file_analysis_by_filename/run_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailAmpFileAnalysisByFilenameRunId',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_amp_file_analysis_by_filename_score_get(self, **kwargs):  # noqa: E501
        """mail amp file analysis by filename score  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_amp_file_analysis_by_filename_score_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAmpFileAnalysisByFilenameScore
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_amp_file_analysis_by_filename_score_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_amp_file_analysis_by_filename_score_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_amp_file_analysis_by_filename_score_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail amp file analysis by filename score  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_amp_file_analysis_by_filename_score_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAmpFileAnalysisByFilenameScore
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_amp_file_analysis_by_filename_score_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_amp_file_analysis_by_filename/score', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailAmpFileAnalysisByFilenameScore',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_amp_file_analysis_by_filename_status_get(self, **kwargs):  # noqa: E501
        """mail amp file analysis by filename status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_amp_file_analysis_by_filename_status_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAmpFileAnalysisByFilenameStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_amp_file_analysis_by_filename_status_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_amp_file_analysis_by_filename_status_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_amp_file_analysis_by_filename_status_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail amp file analysis by filename status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_amp_file_analysis_by_filename_status_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAmpFileAnalysisByFilenameStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_amp_file_analysis_by_filename_status_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_amp_file_analysis_by_filename/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailAmpFileAnalysisByFilenameStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_amp_file_analysis_by_filename_submit_timestamp_get(self, **kwargs):  # noqa: E501
        """mail amp file analysis by filename submit timestamp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_amp_file_analysis_by_filename_submit_timestamp_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAmpFileAnalysisByFilenameSubmitTimestamp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_amp_file_analysis_by_filename_submit_timestamp_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_amp_file_analysis_by_filename_submit_timestamp_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_amp_file_analysis_by_filename_submit_timestamp_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail amp file analysis by filename submit timestamp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_amp_file_analysis_by_filename_submit_timestamp_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAmpFileAnalysisByFilenameSubmitTimestamp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_amp_file_analysis_by_filename_submit_timestamp_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_amp_file_analysis_by_filename/submit_timestamp', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailAmpFileAnalysisByFilenameSubmitTimestamp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_amp_file_analysis_by_filename_url_get(self, **kwargs):  # noqa: E501
        """mail amp file analysis by filename url  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_amp_file_analysis_by_filename_url_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAmpFileAnalysisByFilenameUrl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_amp_file_analysis_by_filename_url_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_amp_file_analysis_by_filename_url_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_amp_file_analysis_by_filename_url_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail amp file analysis by filename url  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_amp_file_analysis_by_filename_url_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAmpFileAnalysisByFilenameUrl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_amp_file_analysis_by_filename_url_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_amp_file_analysis_by_filename/url', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailAmpFileAnalysisByFilenameUrl',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_amp_reputation_update_console_url_get(self, **kwargs):  # noqa: E501
        """mail amp reputation update console url  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_amp_reputation_update_console_url_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAmpReputationUpdateConsoleUrl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_amp_reputation_update_console_url_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_amp_reputation_update_console_url_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_amp_reputation_update_console_url_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail amp reputation update console url  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_amp_reputation_update_console_url_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAmpReputationUpdateConsoleUrl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_amp_reputation_update_console_url_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_amp_reputation_update/console_url', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailAmpReputationUpdateConsoleUrl',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_amp_reputation_update_filenames_get(self, **kwargs):  # noqa: E501
        """mail amp reputation update filenames  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_amp_reputation_update_filenames_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAmpReputationUpdateFilenames
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_amp_reputation_update_filenames_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_amp_reputation_update_filenames_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_amp_reputation_update_filenames_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail amp reputation update filenames  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_amp_reputation_update_filenames_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAmpReputationUpdateFilenames
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_amp_reputation_update_filenames_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_amp_reputation_update/filenames', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailAmpReputationUpdateFilenames',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_amp_reputation_update_get(self, **kwargs):  # noqa: E501
        """mail amp reputation update timestamped tuple  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_amp_reputation_update_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAmpReputationUpdateTimestampedTuple
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_amp_reputation_update_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_amp_reputation_update_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_amp_reputation_update_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail amp reputation update timestamped tuple  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_amp_reputation_update_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAmpReputationUpdateTimestampedTuple
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_amp_reputation_update_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_amp_reputation_update', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailAmpReputationUpdateTimestampedTuple',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_amp_reputation_update_msg_direction_get(self, **kwargs):  # noqa: E501
        """mail amp reputation update msg direction  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_amp_reputation_update_msg_direction_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAmpReputationUpdateMsgDirection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_amp_reputation_update_msg_direction_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_amp_reputation_update_msg_direction_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_amp_reputation_update_msg_direction_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail amp reputation update msg direction  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_amp_reputation_update_msg_direction_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAmpReputationUpdateMsgDirection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_amp_reputation_update_msg_direction_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_amp_reputation_update/msg_direction', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailAmpReputationUpdateMsgDirection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_amp_reputation_update_old_disposition_get(self, **kwargs):  # noqa: E501
        """mail amp reputation update old disposition  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_amp_reputation_update_old_disposition_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAmpReputationUpdateOldDisposition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_amp_reputation_update_old_disposition_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_amp_reputation_update_old_disposition_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_amp_reputation_update_old_disposition_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail amp reputation update old disposition  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_amp_reputation_update_old_disposition_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAmpReputationUpdateOldDisposition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_amp_reputation_update_old_disposition_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_amp_reputation_update/old_disposition', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailAmpReputationUpdateOldDisposition',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_amp_reputation_update_timestamped_tuple_get(self, **kwargs):  # noqa: E501
        """mail amp reputation update timestamped tuple  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_amp_reputation_update_timestamped_tuple_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAmpReputationUpdateTimestampedTuple
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_amp_reputation_update_timestamped_tuple_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_amp_reputation_update_timestamped_tuple_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_amp_reputation_update_timestamped_tuple_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail amp reputation update timestamped tuple  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_amp_reputation_update_timestamped_tuple_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAmpReputationUpdateTimestampedTuple
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_amp_reputation_update_timestamped_tuple_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_amp_reputation_update/timestamped_tuple', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailAmpReputationUpdateTimestampedTuple',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_amp_threat_summary_get(self, **kwargs):  # noqa: E501
        """amp threat summary details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_amp_threat_summary_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAmpThreatSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_amp_threat_summary_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_amp_threat_summary_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_amp_threat_summary_get_with_http_info(self, **kwargs):  # noqa: E501
        """amp threat summary details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_amp_threat_summary_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAmpThreatSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_amp_threat_summary_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_amp_threat_summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailAmpThreatSummary',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_authentication_incoming_domain_auth_disallow_get(self, **kwargs):  # noqa: E501
        """mail authentication incoming domain auth disallow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_incoming_domain_auth_disallow_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationIncomingDomainAuthDisallow
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_authentication_incoming_domain_auth_disallow_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_authentication_incoming_domain_auth_disallow_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_authentication_incoming_domain_auth_disallow_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail authentication incoming domain auth disallow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_incoming_domain_auth_disallow_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationIncomingDomainAuthDisallow
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_authentication_incoming_domain_auth_disallow_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_authentication_incoming_domain/auth_disallow', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailAuthenticationIncomingDomainAuthDisallow',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_authentication_incoming_domain_auth_fail_get(self, **kwargs):  # noqa: E501
        """mail authentication incoming domain auth fail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_incoming_domain_auth_fail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationIncomingDomainAuthFail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_authentication_incoming_domain_auth_fail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_authentication_incoming_domain_auth_fail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_authentication_incoming_domain_auth_fail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail authentication incoming domain auth fail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_incoming_domain_auth_fail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationIncomingDomainAuthFail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_authentication_incoming_domain_auth_fail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_authentication_incoming_domain/auth_fail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailAuthenticationIncomingDomainAuthFail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_authentication_incoming_domain_auth_success_get(self, **kwargs):  # noqa: E501
        """mail authentication incoming domain auth success  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_incoming_domain_auth_success_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationIncomingDomainAuthSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_authentication_incoming_domain_auth_success_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_authentication_incoming_domain_auth_success_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_authentication_incoming_domain_auth_success_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail authentication incoming domain auth success  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_incoming_domain_auth_success_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationIncomingDomainAuthSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_authentication_incoming_domain_auth_success_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_authentication_incoming_domain/auth_success', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailAuthenticationIncomingDomainAuthSuccess',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_authentication_incoming_domain_cert_fail_get(self, **kwargs):  # noqa: E501
        """mail authentication incoming domain cert fail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_incoming_domain_cert_fail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationIncomingDomainCertFail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_authentication_incoming_domain_cert_fail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_authentication_incoming_domain_cert_fail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_authentication_incoming_domain_cert_fail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail authentication incoming domain cert fail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_incoming_domain_cert_fail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationIncomingDomainCertFail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_authentication_incoming_domain_cert_fail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_authentication_incoming_domain/cert_fail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailAuthenticationIncomingDomainCertFail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_authentication_incoming_domain_cert_fallback_fail_get(self, **kwargs):  # noqa: E501
        """mail authentication incoming domain cert fallback fail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_incoming_domain_cert_fallback_fail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationIncomingDomainCertFallbackFail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_authentication_incoming_domain_cert_fallback_fail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_authentication_incoming_domain_cert_fallback_fail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_authentication_incoming_domain_cert_fallback_fail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail authentication incoming domain cert fallback fail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_incoming_domain_cert_fallback_fail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationIncomingDomainCertFallbackFail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_authentication_incoming_domain_cert_fallback_fail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_authentication_incoming_domain/cert_fallback_fail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailAuthenticationIncomingDomainCertFallbackFail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_authentication_incoming_domain_cert_fallback_success_get(self, **kwargs):  # noqa: E501
        """mail authentication incoming domain cert fallback success  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_incoming_domain_cert_fallback_success_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationIncomingDomainCertFallbackSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_authentication_incoming_domain_cert_fallback_success_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_authentication_incoming_domain_cert_fallback_success_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_authentication_incoming_domain_cert_fallback_success_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail authentication incoming domain cert fallback success  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_incoming_domain_cert_fallback_success_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationIncomingDomainCertFallbackSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_authentication_incoming_domain_cert_fallback_success_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_authentication_incoming_domain/cert_fallback_success', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailAuthenticationIncomingDomainCertFallbackSuccess',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_authentication_incoming_domain_cert_success_get(self, **kwargs):  # noqa: E501
        """mail authentication incoming domain cert success  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_incoming_domain_cert_success_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationIncomingDomainCertSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_authentication_incoming_domain_cert_success_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_authentication_incoming_domain_cert_success_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_authentication_incoming_domain_cert_success_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail authentication incoming domain cert success  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_incoming_domain_cert_success_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationIncomingDomainCertSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_authentication_incoming_domain_cert_success_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_authentication_incoming_domain/cert_success', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailAuthenticationIncomingDomainCertSuccess',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_authentication_incoming_domain_get(self, **kwargs):  # noqa: E501
        """mail authentication incoming domain noauth  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_incoming_domain_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationIncomingDomainNoauth
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_authentication_incoming_domain_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_authentication_incoming_domain_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_authentication_incoming_domain_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail authentication incoming domain noauth  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_incoming_domain_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationIncomingDomainNoauth
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_authentication_incoming_domain_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_authentication_incoming_domain', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailAuthenticationIncomingDomainNoauth',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_authentication_incoming_domain_ip_get(self, **kwargs):  # noqa: E501
        """mail authentication incoming domain ip last auth fail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_incoming_domain_ip_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationIncomingDomainIpLastAuthFail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_authentication_incoming_domain_ip_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_authentication_incoming_domain_ip_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_authentication_incoming_domain_ip_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail authentication incoming domain ip last auth fail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_incoming_domain_ip_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationIncomingDomainIpLastAuthFail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_authentication_incoming_domain_ip_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_authentication_incoming_domain_ip', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailAuthenticationIncomingDomainIpLastAuthFail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_authentication_incoming_domain_ip_last_auth_disallow_get(self, **kwargs):  # noqa: E501
        """mail authentication incoming domain ip last auth disallow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_incoming_domain_ip_last_auth_disallow_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationIncomingDomainIpLastAuthDisallow
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_authentication_incoming_domain_ip_last_auth_disallow_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_authentication_incoming_domain_ip_last_auth_disallow_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_authentication_incoming_domain_ip_last_auth_disallow_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail authentication incoming domain ip last auth disallow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_incoming_domain_ip_last_auth_disallow_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationIncomingDomainIpLastAuthDisallow
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_authentication_incoming_domain_ip_last_auth_disallow_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_authentication_incoming_domain_ip/last_auth_disallow', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailAuthenticationIncomingDomainIpLastAuthDisallow',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_authentication_incoming_domain_ip_last_auth_fail_get(self, **kwargs):  # noqa: E501
        """mail authentication incoming domain ip last auth fail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_incoming_domain_ip_last_auth_fail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationIncomingDomainIpLastAuthFail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_authentication_incoming_domain_ip_last_auth_fail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_authentication_incoming_domain_ip_last_auth_fail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_authentication_incoming_domain_ip_last_auth_fail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail authentication incoming domain ip last auth fail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_incoming_domain_ip_last_auth_fail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationIncomingDomainIpLastAuthFail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_authentication_incoming_domain_ip_last_auth_fail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_authentication_incoming_domain_ip/last_auth_fail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailAuthenticationIncomingDomainIpLastAuthFail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_authentication_incoming_domain_ip_last_auth_success_get(self, **kwargs):  # noqa: E501
        """mail authentication incoming domain ip last auth success  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_incoming_domain_ip_last_auth_success_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationIncomingDomainIpLastAuthSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_authentication_incoming_domain_ip_last_auth_success_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_authentication_incoming_domain_ip_last_auth_success_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_authentication_incoming_domain_ip_last_auth_success_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail authentication incoming domain ip last auth success  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_incoming_domain_ip_last_auth_success_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationIncomingDomainIpLastAuthSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_authentication_incoming_domain_ip_last_auth_success_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_authentication_incoming_domain_ip/last_auth_success', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailAuthenticationIncomingDomainIpLastAuthSuccess',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_authentication_incoming_domain_ip_last_cert_fail_get(self, **kwargs):  # noqa: E501
        """mail authentication incoming domain ip last cert fail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_incoming_domain_ip_last_cert_fail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationIncomingDomainIpLastCertFail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_authentication_incoming_domain_ip_last_cert_fail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_authentication_incoming_domain_ip_last_cert_fail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_authentication_incoming_domain_ip_last_cert_fail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail authentication incoming domain ip last cert fail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_incoming_domain_ip_last_cert_fail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationIncomingDomainIpLastCertFail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_authentication_incoming_domain_ip_last_cert_fail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_authentication_incoming_domain_ip/last_cert_fail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailAuthenticationIncomingDomainIpLastCertFail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_authentication_incoming_domain_ip_last_cert_fallback_get(self, **kwargs):  # noqa: E501
        """mail authentication incoming domain ip last cert fallback  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_incoming_domain_ip_last_cert_fallback_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationIncomingDomainIpLastCertFallback
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_authentication_incoming_domain_ip_last_cert_fallback_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_authentication_incoming_domain_ip_last_cert_fallback_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_authentication_incoming_domain_ip_last_cert_fallback_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail authentication incoming domain ip last cert fallback  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_incoming_domain_ip_last_cert_fallback_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationIncomingDomainIpLastCertFallback
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_authentication_incoming_domain_ip_last_cert_fallback_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_authentication_incoming_domain_ip/last_cert_fallback', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailAuthenticationIncomingDomainIpLastCertFallback',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_authentication_incoming_domain_ip_last_cert_success_get(self, **kwargs):  # noqa: E501
        """mail authentication incoming domain ip last cert success  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_incoming_domain_ip_last_cert_success_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationIncomingDomainIpLastCertSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_authentication_incoming_domain_ip_last_cert_success_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_authentication_incoming_domain_ip_last_cert_success_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_authentication_incoming_domain_ip_last_cert_success_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail authentication incoming domain ip last cert success  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_incoming_domain_ip_last_cert_success_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationIncomingDomainIpLastCertSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_authentication_incoming_domain_ip_last_cert_success_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_authentication_incoming_domain_ip/last_cert_success', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailAuthenticationIncomingDomainIpLastCertSuccess',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_authentication_incoming_domain_noauth_get(self, **kwargs):  # noqa: E501
        """mail authentication incoming domain noauth  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_incoming_domain_noauth_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationIncomingDomainNoauth
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_authentication_incoming_domain_noauth_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_authentication_incoming_domain_noauth_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_authentication_incoming_domain_noauth_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail authentication incoming domain noauth  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_incoming_domain_noauth_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationIncomingDomainNoauth
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_authentication_incoming_domain_noauth_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_authentication_incoming_domain/noauth', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailAuthenticationIncomingDomainNoauth',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_authentication_incoming_domain_total_get(self, **kwargs):  # noqa: E501
        """mail authentication incoming domain total  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_incoming_domain_total_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationIncomingDomainTotal
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_authentication_incoming_domain_total_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_authentication_incoming_domain_total_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_authentication_incoming_domain_total_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail authentication incoming domain total  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_incoming_domain_total_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationIncomingDomainTotal
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_authentication_incoming_domain_total_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_authentication_incoming_domain/total', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailAuthenticationIncomingDomainTotal',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_authentication_summary_get(self, **kwargs):  # noqa: E501
        """mail authentication summary received conn cert fail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_summary_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationSummaryReceivedConnCertFail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_authentication_summary_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_authentication_summary_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_authentication_summary_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail authentication summary received conn cert fail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_summary_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationSummaryReceivedConnCertFail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_authentication_summary_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_authentication_summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailAuthenticationSummaryReceivedConnCertFail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_authentication_summary_received_auth_get(self, **kwargs):  # noqa: E501
        """mail authentication summary received auth  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_summary_received_auth_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationSummaryReceivedAuth
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_authentication_summary_received_auth_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_authentication_summary_received_auth_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_authentication_summary_received_auth_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail authentication summary received auth  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_summary_received_auth_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationSummaryReceivedAuth
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_authentication_summary_received_auth_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_authentication_summary/received_auth', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailAuthenticationSummaryReceivedAuth',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_authentication_summary_received_conn_auth_fail_get(self, **kwargs):  # noqa: E501
        """mail authentication summary received conn auth fail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_summary_received_conn_auth_fail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationSummaryReceivedConnAuthFail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_authentication_summary_received_conn_auth_fail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_authentication_summary_received_conn_auth_fail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_authentication_summary_received_conn_auth_fail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail authentication summary received conn auth fail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_summary_received_conn_auth_fail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationSummaryReceivedConnAuthFail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_authentication_summary_received_conn_auth_fail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_authentication_summary/received_conn_auth_fail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailAuthenticationSummaryReceivedConnAuthFail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_authentication_summary_received_conn_auth_success_get(self, **kwargs):  # noqa: E501
        """mail authentication summary received conn auth success  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_summary_received_conn_auth_success_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationSummaryReceivedConnAuthSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_authentication_summary_received_conn_auth_success_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_authentication_summary_received_conn_auth_success_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_authentication_summary_received_conn_auth_success_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail authentication summary received conn auth success  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_summary_received_conn_auth_success_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationSummaryReceivedConnAuthSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_authentication_summary_received_conn_auth_success_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_authentication_summary/received_conn_auth_success', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailAuthenticationSummaryReceivedConnAuthSuccess',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_authentication_summary_received_conn_cert_fail_get(self, **kwargs):  # noqa: E501
        """mail authentication summary received conn cert fail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_summary_received_conn_cert_fail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationSummaryReceivedConnCertFail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_authentication_summary_received_conn_cert_fail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_authentication_summary_received_conn_cert_fail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_authentication_summary_received_conn_cert_fail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail authentication summary received conn cert fail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_summary_received_conn_cert_fail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationSummaryReceivedConnCertFail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_authentication_summary_received_conn_cert_fail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_authentication_summary/received_conn_cert_fail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailAuthenticationSummaryReceivedConnCertFail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_authentication_summary_received_conn_cert_success_get(self, **kwargs):  # noqa: E501
        """mail authentication summary received conn cert success  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_summary_received_conn_cert_success_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationSummaryReceivedConnCertSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_authentication_summary_received_conn_cert_success_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_authentication_summary_received_conn_cert_success_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_authentication_summary_received_conn_cert_success_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail authentication summary received conn cert success  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_summary_received_conn_cert_success_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationSummaryReceivedConnCertSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_authentication_summary_received_conn_cert_success_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_authentication_summary/received_conn_cert_success', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailAuthenticationSummaryReceivedConnCertSuccess',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_authentication_summary_received_conn_noauth_get(self, **kwargs):  # noqa: E501
        """mail authentication summary received conn noauth  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_summary_received_conn_noauth_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationSummaryReceivedConnNoauth
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_authentication_summary_received_conn_noauth_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_authentication_summary_received_conn_noauth_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_authentication_summary_received_conn_noauth_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail authentication summary received conn noauth  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_summary_received_conn_noauth_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationSummaryReceivedConnNoauth
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_authentication_summary_received_conn_noauth_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_authentication_summary/received_conn_noauth', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailAuthenticationSummaryReceivedConnNoauth',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_authentication_summary_received_conn_total_get(self, **kwargs):  # noqa: E501
        """mail authentication summary received conn total  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_summary_received_conn_total_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationSummaryReceivedConnTotal
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_authentication_summary_received_conn_total_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_authentication_summary_received_conn_total_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_authentication_summary_received_conn_total_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail authentication summary received conn total  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_summary_received_conn_total_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationSummaryReceivedConnTotal
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_authentication_summary_received_conn_total_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_authentication_summary/received_conn_total', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailAuthenticationSummaryReceivedConnTotal',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_authentication_summary_received_noauth_get(self, **kwargs):  # noqa: E501
        """mail authentication summary received noauth  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_summary_received_noauth_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationSummaryReceivedNoauth
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_authentication_summary_received_noauth_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_authentication_summary_received_noauth_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_authentication_summary_received_noauth_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail authentication summary received noauth  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_summary_received_noauth_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationSummaryReceivedNoauth
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_authentication_summary_received_noauth_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_authentication_summary/received_noauth', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailAuthenticationSummaryReceivedNoauth',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_authentication_summary_received_total_get(self, **kwargs):  # noqa: E501
        """mail authentication summary received total  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_summary_received_total_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationSummaryReceivedTotal
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_authentication_summary_received_total_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_authentication_summary_received_total_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_authentication_summary_received_total_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail authentication summary received total  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_authentication_summary_received_total_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailAuthenticationSummaryReceivedTotal
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_authentication_summary_received_total_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_authentication_summary/received_total', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailAuthenticationSummaryReceivedTotal',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_content_filter_incoming_get(self, **kwargs):  # noqa: E501
        """mail content filter incoming recipients matched  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_content_filter_incoming_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailContentFilterIncomingRecipientsMatched
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_content_filter_incoming_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_content_filter_incoming_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_content_filter_incoming_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail content filter incoming recipients matched  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_content_filter_incoming_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailContentFilterIncomingRecipientsMatched
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_content_filter_incoming_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_content_filter_incoming', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailContentFilterIncomingRecipientsMatched',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_content_filter_incoming_recipients_matched_get(self, **kwargs):  # noqa: E501
        """mail content filter incoming recipients matched  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_content_filter_incoming_recipients_matched_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailContentFilterIncomingRecipientsMatched
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_content_filter_incoming_recipients_matched_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_content_filter_incoming_recipients_matched_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_content_filter_incoming_recipients_matched_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail content filter incoming recipients matched  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_content_filter_incoming_recipients_matched_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailContentFilterIncomingRecipientsMatched
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_content_filter_incoming_recipients_matched_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_content_filter_incoming/recipients_matched', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailContentFilterIncomingRecipientsMatched',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_content_filter_outgoing_get(self, **kwargs):  # noqa: E501
        """mail content filter outgoing recipients matched  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_content_filter_outgoing_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailContentFilterOutgoingRecipientsMatched
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_content_filter_outgoing_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_content_filter_outgoing_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_content_filter_outgoing_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail content filter outgoing recipients matched  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_content_filter_outgoing_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailContentFilterOutgoingRecipientsMatched
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_content_filter_outgoing_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_content_filter_outgoing', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailContentFilterOutgoingRecipientsMatched',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_content_filter_outgoing_recipients_matched_get(self, **kwargs):  # noqa: E501
        """mail content filter outgoing recipients matched  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_content_filter_outgoing_recipients_matched_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailContentFilterOutgoingRecipientsMatched
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_content_filter_outgoing_recipients_matched_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_content_filter_outgoing_recipients_matched_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_content_filter_outgoing_recipients_matched_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail content filter outgoing recipients matched  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_content_filter_outgoing_recipients_matched_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailContentFilterOutgoingRecipientsMatched
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_content_filter_outgoing_recipients_matched_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_content_filter_outgoing/recipients_matched', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailContentFilterOutgoingRecipientsMatched',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_content_filter_users_get(self, **kwargs):  # noqa: E501
        """mail content filter users recipients matched  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_content_filter_users_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailContentFilterUsersRecipientsMatched
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_content_filter_users_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_content_filter_users_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_content_filter_users_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail content filter users recipients matched  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_content_filter_users_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailContentFilterUsersRecipientsMatched
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_content_filter_users_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_content_filter_users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailContentFilterUsersRecipientsMatched',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_content_filter_users_recipients_matched_get(self, **kwargs):  # noqa: E501
        """mail content filter users recipients matched  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_content_filter_users_recipients_matched_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailContentFilterUsersRecipientsMatched
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_content_filter_users_recipients_matched_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_content_filter_users_recipients_matched_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_content_filter_users_recipients_matched_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail content filter users recipients matched  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_content_filter_users_recipients_matched_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailContentFilterUsersRecipientsMatched
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_content_filter_users_recipients_matched_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_content_filter_users/recipients_matched', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailContentFilterUsersRecipientsMatched',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_destination_domain_detail_conn_dane_fail_get(self, **kwargs):  # noqa: E501
        """mail destination domain detail conn dane fail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_destination_domain_detail_conn_dane_fail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDestinationDomainDetailConnDaneFail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_destination_domain_detail_conn_dane_fail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_destination_domain_detail_conn_dane_fail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_destination_domain_detail_conn_dane_fail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail destination domain detail conn dane fail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_destination_domain_detail_conn_dane_fail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDestinationDomainDetailConnDaneFail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_destination_domain_detail_conn_dane_fail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_destination_domain_detail/conn_dane_fail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDestinationDomainDetailConnDaneFail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_destination_domain_detail_conn_dane_success_get(self, **kwargs):  # noqa: E501
        """mail destination domain detail conn dane success  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_destination_domain_detail_conn_dane_success_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDestinationDomainDetailConnDaneSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_destination_domain_detail_conn_dane_success_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_destination_domain_detail_conn_dane_success_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_destination_domain_detail_conn_dane_success_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail destination domain detail conn dane success  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_destination_domain_detail_conn_dane_success_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDestinationDomainDetailConnDaneSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_destination_domain_detail_conn_dane_success_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_destination_domain_detail/conn_dane_success', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDestinationDomainDetailConnDaneSuccess',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_destination_domain_detail_conn_last_tls_status_get(self, **kwargs):  # noqa: E501
        """mail destination domain detail conn last tls status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_destination_domain_detail_conn_last_tls_status_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDestinationDomainDetailConnLastTlsStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_destination_domain_detail_conn_last_tls_status_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_destination_domain_detail_conn_last_tls_status_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_destination_domain_detail_conn_last_tls_status_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail destination domain detail conn last tls status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_destination_domain_detail_conn_last_tls_status_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDestinationDomainDetailConnLastTlsStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_destination_domain_detail_conn_last_tls_status_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_destination_domain_detail/conn_last_tls_status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDestinationDomainDetailConnLastTlsStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_destination_domain_detail_conn_plain_get(self, **kwargs):  # noqa: E501
        """mail destination domain detail conn plain  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_destination_domain_detail_conn_plain_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDestinationDomainDetailConnPlain
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_destination_domain_detail_conn_plain_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_destination_domain_detail_conn_plain_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_destination_domain_detail_conn_plain_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail destination domain detail conn plain  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_destination_domain_detail_conn_plain_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDestinationDomainDetailConnPlain
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_destination_domain_detail_conn_plain_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_destination_domain_detail/conn_plain', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDestinationDomainDetailConnPlain',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_destination_domain_detail_conn_tls_fail_get(self, **kwargs):  # noqa: E501
        """mail destination domain detail conn tls fail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_destination_domain_detail_conn_tls_fail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDestinationDomainDetailConnTlsFail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_destination_domain_detail_conn_tls_fail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_destination_domain_detail_conn_tls_fail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_destination_domain_detail_conn_tls_fail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail destination domain detail conn tls fail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_destination_domain_detail_conn_tls_fail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDestinationDomainDetailConnTlsFail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_destination_domain_detail_conn_tls_fail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_destination_domain_detail/conn_tls_fail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDestinationDomainDetailConnTlsFail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_destination_domain_detail_conn_tls_opt_fail_get(self, **kwargs):  # noqa: E501
        """mail destination domain detail conn tls opt fail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_destination_domain_detail_conn_tls_opt_fail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDestinationDomainDetailConnTlsOptFail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_destination_domain_detail_conn_tls_opt_fail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_destination_domain_detail_conn_tls_opt_fail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_destination_domain_detail_conn_tls_opt_fail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail destination domain detail conn tls opt fail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_destination_domain_detail_conn_tls_opt_fail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDestinationDomainDetailConnTlsOptFail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_destination_domain_detail_conn_tls_opt_fail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_destination_domain_detail/conn_tls_opt_fail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDestinationDomainDetailConnTlsOptFail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_destination_domain_detail_conn_tls_opt_success_get(self, **kwargs):  # noqa: E501
        """mail destination domain detail conn tls opt success  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_destination_domain_detail_conn_tls_opt_success_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDestinationDomainDetailConnTlsOptSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_destination_domain_detail_conn_tls_opt_success_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_destination_domain_detail_conn_tls_opt_success_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_destination_domain_detail_conn_tls_opt_success_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail destination domain detail conn tls opt success  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_destination_domain_detail_conn_tls_opt_success_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDestinationDomainDetailConnTlsOptSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_destination_domain_detail_conn_tls_opt_success_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_destination_domain_detail/conn_tls_opt_success', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDestinationDomainDetailConnTlsOptSuccess',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_destination_domain_detail_conn_tls_success_get(self, **kwargs):  # noqa: E501
        """mail destination domain detail conn tls success  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_destination_domain_detail_conn_tls_success_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDestinationDomainDetailConnTlsSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_destination_domain_detail_conn_tls_success_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_destination_domain_detail_conn_tls_success_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_destination_domain_detail_conn_tls_success_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail destination domain detail conn tls success  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_destination_domain_detail_conn_tls_success_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDestinationDomainDetailConnTlsSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_destination_domain_detail_conn_tls_success_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_destination_domain_detail/conn_tls_success', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDestinationDomainDetailConnTlsSuccess',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_destination_domain_detail_conn_tls_total_get(self, **kwargs):  # noqa: E501
        """mail destination domain detail conn tls total  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_destination_domain_detail_conn_tls_total_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDestinationDomainDetailConnTlsTotal
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_destination_domain_detail_conn_tls_total_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_destination_domain_detail_conn_tls_total_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_destination_domain_detail_conn_tls_total_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail destination domain detail conn tls total  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_destination_domain_detail_conn_tls_total_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDestinationDomainDetailConnTlsTotal
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_destination_domain_detail_conn_tls_total_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_destination_domain_detail/conn_tls_total', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDestinationDomainDetailConnTlsTotal',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_destination_domain_detail_delivered_get(self, **kwargs):  # noqa: E501
        """mail destination domain detail delivered  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_destination_domain_detail_delivered_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDestinationDomainDetailDelivered
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_destination_domain_detail_delivered_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_destination_domain_detail_delivered_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_destination_domain_detail_delivered_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail destination domain detail delivered  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_destination_domain_detail_delivered_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDestinationDomainDetailDelivered
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_destination_domain_detail_delivered_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_destination_domain_detail/delivered', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDestinationDomainDetailDelivered',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_destination_domain_detail_detected_amp_get(self, **kwargs):  # noqa: E501
        """mail destination domain detail detected amp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_destination_domain_detail_detected_amp_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDestinationDomainDetailDetectedAmp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_destination_domain_detail_detected_amp_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_destination_domain_detail_detected_amp_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_destination_domain_detail_detected_amp_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail destination domain detail detected amp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_destination_domain_detail_detected_amp_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDestinationDomainDetailDetectedAmp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_destination_domain_detail_detected_amp_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_destination_domain_detail/detected_amp', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDestinationDomainDetailDetectedAmp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_destination_domain_detail_detected_spam_get(self, **kwargs):  # noqa: E501
        """mail destination domain detail detected spam  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_destination_domain_detail_detected_spam_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDestinationDomainDetailDetectedSpam
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_destination_domain_detail_detected_spam_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_destination_domain_detail_detected_spam_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_destination_domain_detail_detected_spam_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail destination domain detail detected spam  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_destination_domain_detail_detected_spam_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDestinationDomainDetailDetectedSpam
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_destination_domain_detail_detected_spam_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_destination_domain_detail/detected_spam', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDestinationDomainDetailDetectedSpam',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_destination_domain_detail_detected_virus_get(self, **kwargs):  # noqa: E501
        """mail destination domain detail detected virus  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_destination_domain_detail_detected_virus_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDestinationDomainDetailDetectedVirus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_destination_domain_detail_detected_virus_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_destination_domain_detail_detected_virus_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_destination_domain_detail_detected_virus_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail destination domain detail detected virus  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_destination_domain_detail_detected_virus_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDestinationDomainDetailDetectedVirus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_destination_domain_detail_detected_virus_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_destination_domain_detail/detected_virus', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDestinationDomainDetailDetectedVirus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_destination_domain_detail_encrypted_tls_get(self, **kwargs):  # noqa: E501
        """mail destination domain detail encrypted tls  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_destination_domain_detail_encrypted_tls_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDestinationDomainDetailEncryptedTls
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_destination_domain_detail_encrypted_tls_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_destination_domain_detail_encrypted_tls_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_destination_domain_detail_encrypted_tls_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail destination domain detail encrypted tls  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_destination_domain_detail_encrypted_tls_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDestinationDomainDetailEncryptedTls
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_destination_domain_detail_encrypted_tls_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_destination_domain_detail/encrypted_tls', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDestinationDomainDetailEncryptedTls',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_destination_domain_detail_get(self, **kwargs):  # noqa: E501
        """mail destination domain detail total threat recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_destination_domain_detail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDestinationDomainDetailTotalThreatRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_destination_domain_detail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_destination_domain_detail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_destination_domain_detail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail destination domain detail total threat recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_destination_domain_detail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDestinationDomainDetailTotalThreatRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_destination_domain_detail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_destination_domain_detail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDestinationDomainDetailTotalThreatRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_destination_domain_detail_hard_bounces_get(self, **kwargs):  # noqa: E501
        """mail destination domain detail hard bounces  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_destination_domain_detail_hard_bounces_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDestinationDomainDetailHardBounces
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_destination_domain_detail_hard_bounces_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_destination_domain_detail_hard_bounces_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_destination_domain_detail_hard_bounces_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail destination domain detail hard bounces  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_destination_domain_detail_hard_bounces_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDestinationDomainDetailHardBounces
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_destination_domain_detail_hard_bounces_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_destination_domain_detail/hard_bounces', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDestinationDomainDetailHardBounces',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_destination_domain_detail_threat_content_filter_get(self, **kwargs):  # noqa: E501
        """mail destination domain detail threat content filter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_destination_domain_detail_threat_content_filter_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDestinationDomainDetailThreatContentFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_destination_domain_detail_threat_content_filter_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_destination_domain_detail_threat_content_filter_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_destination_domain_detail_threat_content_filter_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail destination domain detail threat content filter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_destination_domain_detail_threat_content_filter_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDestinationDomainDetailThreatContentFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_destination_domain_detail_threat_content_filter_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_destination_domain_detail/threat_content_filter', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDestinationDomainDetailThreatContentFilter',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_destination_domain_detail_total_clean_recipients_get(self, **kwargs):  # noqa: E501
        """mail destination domain detail total clean recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_destination_domain_detail_total_clean_recipients_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDestinationDomainDetailTotalCleanRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_destination_domain_detail_total_clean_recipients_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_destination_domain_detail_total_clean_recipients_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_destination_domain_detail_total_clean_recipients_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail destination domain detail total clean recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_destination_domain_detail_total_clean_recipients_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDestinationDomainDetailTotalCleanRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_destination_domain_detail_total_clean_recipients_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_destination_domain_detail/total_clean_recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDestinationDomainDetailTotalCleanRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_destination_domain_detail_total_recipients_get(self, **kwargs):  # noqa: E501
        """mail destination domain detail total recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_destination_domain_detail_total_recipients_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDestinationDomainDetailTotalRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_destination_domain_detail_total_recipients_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_destination_domain_detail_total_recipients_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_destination_domain_detail_total_recipients_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail destination domain detail total recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_destination_domain_detail_total_recipients_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDestinationDomainDetailTotalRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_destination_domain_detail_total_recipients_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_destination_domain_detail/total_recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDestinationDomainDetailTotalRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_destination_domain_detail_total_recipients_processed_get(self, **kwargs):  # noqa: E501
        """mail destination domain detail total recipients processed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_destination_domain_detail_total_recipients_processed_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDestinationDomainDetailTotalRecipientsProcessed
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_destination_domain_detail_total_recipients_processed_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_destination_domain_detail_total_recipients_processed_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_destination_domain_detail_total_recipients_processed_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail destination domain detail total recipients processed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_destination_domain_detail_total_recipients_processed_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDestinationDomainDetailTotalRecipientsProcessed
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_destination_domain_detail_total_recipients_processed_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_destination_domain_detail/total_recipients_processed', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDestinationDomainDetailTotalRecipientsProcessed',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_destination_domain_detail_total_threat_recipients_get(self, **kwargs):  # noqa: E501
        """mail destination domain detail total threat recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_destination_domain_detail_total_threat_recipients_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDestinationDomainDetailTotalThreatRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_destination_domain_detail_total_threat_recipients_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_destination_domain_detail_total_threat_recipients_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_destination_domain_detail_total_threat_recipients_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail destination domain detail total threat recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_destination_domain_detail_total_threat_recipients_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDestinationDomainDetailTotalThreatRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_destination_domain_detail_total_threat_recipients_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_destination_domain_detail/total_threat_recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDestinationDomainDetailTotalThreatRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_action_delivered_get(self, **kwargs):  # noqa: E501
        """mail dlp outgoing policy detail dlp action delivered  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_action_delivered_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpOutgoingPolicyDetailDlpActionDelivered
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_action_delivered_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_action_delivered_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_action_delivered_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail dlp outgoing policy detail dlp action delivered  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_action_delivered_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpOutgoingPolicyDetailDlpActionDelivered
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_action_delivered_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_dlp_outgoing_policy_detail/dlp_action_delivered', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDlpOutgoingPolicyDetailDlpActionDelivered',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_action_dropped_get(self, **kwargs):  # noqa: E501
        """mail dlp outgoing policy detail dlp action dropped  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_action_dropped_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpOutgoingPolicyDetailDlpActionDropped
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_action_dropped_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_action_dropped_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_action_dropped_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail dlp outgoing policy detail dlp action dropped  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_action_dropped_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpOutgoingPolicyDetailDlpActionDropped
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_action_dropped_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_dlp_outgoing_policy_detail/dlp_action_dropped', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDlpOutgoingPolicyDetailDlpActionDropped',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_action_encrypted_get(self, **kwargs):  # noqa: E501
        """mail dlp outgoing policy detail dlp action encrypted  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_action_encrypted_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpOutgoingPolicyDetailDlpActionEncrypted
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_action_encrypted_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_action_encrypted_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_action_encrypted_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail dlp outgoing policy detail dlp action encrypted  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_action_encrypted_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpOutgoingPolicyDetailDlpActionEncrypted
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_action_encrypted_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_dlp_outgoing_policy_detail/dlp_action_encrypted', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDlpOutgoingPolicyDetailDlpActionEncrypted',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_incidents_critical_get(self, **kwargs):  # noqa: E501
        """mail dlp outgoing policy detail dlp incidents critical  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_incidents_critical_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpOutgoingPolicyDetailDlpIncidentsCritical
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_incidents_critical_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_incidents_critical_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_incidents_critical_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail dlp outgoing policy detail dlp incidents critical  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_incidents_critical_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpOutgoingPolicyDetailDlpIncidentsCritical
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_incidents_critical_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_dlp_outgoing_policy_detail/dlp_incidents_critical', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDlpOutgoingPolicyDetailDlpIncidentsCritical',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_incidents_high_get(self, **kwargs):  # noqa: E501
        """mail dlp outgoing policy detail dlp incidents high  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_incidents_high_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpOutgoingPolicyDetailDlpIncidentsHigh
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_incidents_high_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_incidents_high_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_incidents_high_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail dlp outgoing policy detail dlp incidents high  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_incidents_high_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpOutgoingPolicyDetailDlpIncidentsHigh
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_incidents_high_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_dlp_outgoing_policy_detail/dlp_incidents_high', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDlpOutgoingPolicyDetailDlpIncidentsHigh',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_incidents_low_get(self, **kwargs):  # noqa: E501
        """mail dlp outgoing policy detail dlp incidents low  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_incidents_low_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpOutgoingPolicyDetailDlpIncidentsLow
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_incidents_low_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_incidents_low_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_incidents_low_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail dlp outgoing policy detail dlp incidents low  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_incidents_low_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpOutgoingPolicyDetailDlpIncidentsLow
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_incidents_low_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_dlp_outgoing_policy_detail/dlp_incidents_low', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDlpOutgoingPolicyDetailDlpIncidentsLow',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_incidents_medium_get(self, **kwargs):  # noqa: E501
        """mail dlp outgoing policy detail dlp incidents medium  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_incidents_medium_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpOutgoingPolicyDetailDlpIncidentsMedium
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_incidents_medium_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_incidents_medium_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_incidents_medium_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail dlp outgoing policy detail dlp incidents medium  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_incidents_medium_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpOutgoingPolicyDetailDlpIncidentsMedium
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_dlp_incidents_medium_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_dlp_outgoing_policy_detail/dlp_incidents_medium', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDlpOutgoingPolicyDetailDlpIncidentsMedium',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_get(self, **kwargs):  # noqa: E501
        """mail dlp outgoing policy detail dlp incidents low  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpOutgoingPolicyDetailDlpIncidentsLow
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail dlp outgoing policy detail dlp incidents low  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpOutgoingPolicyDetailDlpIncidentsLow
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_dlp_outgoing_policy_detail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDlpOutgoingPolicyDetailDlpIncidentsLow',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_total_dlp_incidents_get(self, **kwargs):  # noqa: E501
        """mail dlp outgoing policy detail total dlp incidents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_total_dlp_incidents_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpOutgoingPolicyDetailTotalDlpIncidents
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_total_dlp_incidents_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_total_dlp_incidents_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_total_dlp_incidents_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail dlp outgoing policy detail total dlp incidents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_total_dlp_incidents_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpOutgoingPolicyDetailTotalDlpIncidents
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_dlp_outgoing_policy_detail_total_dlp_incidents_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_dlp_outgoing_policy_detail/total_dlp_incidents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDlpOutgoingPolicyDetailTotalDlpIncidents',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_dlp_outgoing_traffic_summary_dlp_incidents_critical_get(self, **kwargs):  # noqa: E501
        """mail dlp outgoing traffic summary dlp incidents critical  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_outgoing_traffic_summary_dlp_incidents_critical_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpOutgoingTrafficSummaryDlpIncidentsCritical
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_dlp_outgoing_traffic_summary_dlp_incidents_critical_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_dlp_outgoing_traffic_summary_dlp_incidents_critical_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_dlp_outgoing_traffic_summary_dlp_incidents_critical_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail dlp outgoing traffic summary dlp incidents critical  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_outgoing_traffic_summary_dlp_incidents_critical_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpOutgoingTrafficSummaryDlpIncidentsCritical
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_dlp_outgoing_traffic_summary_dlp_incidents_critical_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_dlp_outgoing_traffic_summary/dlp_incidents_critical', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDlpOutgoingTrafficSummaryDlpIncidentsCritical',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_dlp_outgoing_traffic_summary_dlp_incidents_high_get(self, **kwargs):  # noqa: E501
        """mail dlp outgoing traffic summary dlp incidents high  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_outgoing_traffic_summary_dlp_incidents_high_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpOutgoingTrafficSummaryDlpIncidentsHigh
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_dlp_outgoing_traffic_summary_dlp_incidents_high_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_dlp_outgoing_traffic_summary_dlp_incidents_high_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_dlp_outgoing_traffic_summary_dlp_incidents_high_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail dlp outgoing traffic summary dlp incidents high  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_outgoing_traffic_summary_dlp_incidents_high_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpOutgoingTrafficSummaryDlpIncidentsHigh
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_dlp_outgoing_traffic_summary_dlp_incidents_high_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_dlp_outgoing_traffic_summary/dlp_incidents_high', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDlpOutgoingTrafficSummaryDlpIncidentsHigh',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_dlp_outgoing_traffic_summary_dlp_incidents_low_get(self, **kwargs):  # noqa: E501
        """mail dlp outgoing traffic summary dlp incidents low  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_outgoing_traffic_summary_dlp_incidents_low_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpOutgoingTrafficSummaryDlpIncidentsLow
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_dlp_outgoing_traffic_summary_dlp_incidents_low_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_dlp_outgoing_traffic_summary_dlp_incidents_low_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_dlp_outgoing_traffic_summary_dlp_incidents_low_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail dlp outgoing traffic summary dlp incidents low  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_outgoing_traffic_summary_dlp_incidents_low_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpOutgoingTrafficSummaryDlpIncidentsLow
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_dlp_outgoing_traffic_summary_dlp_incidents_low_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_dlp_outgoing_traffic_summary/dlp_incidents_low', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDlpOutgoingTrafficSummaryDlpIncidentsLow',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_dlp_outgoing_traffic_summary_dlp_incidents_medium_get(self, **kwargs):  # noqa: E501
        """mail dlp outgoing traffic summary dlp incidents medium  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_outgoing_traffic_summary_dlp_incidents_medium_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpOutgoingTrafficSummaryDlpIncidentsMedium
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_dlp_outgoing_traffic_summary_dlp_incidents_medium_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_dlp_outgoing_traffic_summary_dlp_incidents_medium_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_dlp_outgoing_traffic_summary_dlp_incidents_medium_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail dlp outgoing traffic summary dlp incidents medium  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_outgoing_traffic_summary_dlp_incidents_medium_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpOutgoingTrafficSummaryDlpIncidentsMedium
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_dlp_outgoing_traffic_summary_dlp_incidents_medium_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_dlp_outgoing_traffic_summary/dlp_incidents_medium', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDlpOutgoingTrafficSummaryDlpIncidentsMedium',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_dlp_outgoing_traffic_summary_get(self, **kwargs):  # noqa: E501
        """mail dlp outgoing traffic summary dlp incidents low  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_outgoing_traffic_summary_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpOutgoingTrafficSummaryDlpIncidentsLow
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_dlp_outgoing_traffic_summary_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_dlp_outgoing_traffic_summary_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_dlp_outgoing_traffic_summary_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail dlp outgoing traffic summary dlp incidents low  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_outgoing_traffic_summary_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpOutgoingTrafficSummaryDlpIncidentsLow
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_dlp_outgoing_traffic_summary_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_dlp_outgoing_traffic_summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDlpOutgoingTrafficSummaryDlpIncidentsLow',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_dlp_outgoing_traffic_summary_total_dlp_incidents_get(self, **kwargs):  # noqa: E501
        """mail dlp outgoing traffic summary total dlp incidents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_outgoing_traffic_summary_total_dlp_incidents_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpOutgoingTrafficSummaryTotalDlpIncidents
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_dlp_outgoing_traffic_summary_total_dlp_incidents_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_dlp_outgoing_traffic_summary_total_dlp_incidents_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_dlp_outgoing_traffic_summary_total_dlp_incidents_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail dlp outgoing traffic summary total dlp incidents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_outgoing_traffic_summary_total_dlp_incidents_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpOutgoingTrafficSummaryTotalDlpIncidents
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_dlp_outgoing_traffic_summary_total_dlp_incidents_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_dlp_outgoing_traffic_summary/total_dlp_incidents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDlpOutgoingTrafficSummaryTotalDlpIncidents',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_dlp_users_policy_detail_get(self, **kwargs):  # noqa: E501
        """mail dlp users policy detail outgoing dlp incidents critical  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_users_policy_detail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpUsersPolicyDetailOutgoingDlpIncidentsCritical
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_dlp_users_policy_detail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_dlp_users_policy_detail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_dlp_users_policy_detail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail dlp users policy detail outgoing dlp incidents critical  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_users_policy_detail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpUsersPolicyDetailOutgoingDlpIncidentsCritical
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_dlp_users_policy_detail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_dlp_users_policy_detail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDlpUsersPolicyDetailOutgoingDlpIncidentsCritical',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_action_delivered_get(self, **kwargs):  # noqa: E501
        """mail dlp users policy detail outgoing dlp action delivered  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_action_delivered_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpUsersPolicyDetailOutgoingDlpActionDelivered
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_action_delivered_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_action_delivered_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_action_delivered_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail dlp users policy detail outgoing dlp action delivered  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_action_delivered_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpUsersPolicyDetailOutgoingDlpActionDelivered
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_action_delivered_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_dlp_users_policy_detail/outgoing_dlp_action_delivered', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDlpUsersPolicyDetailOutgoingDlpActionDelivered',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_action_dropped_get(self, **kwargs):  # noqa: E501
        """mail dlp users policy detail outgoing dlp action dropped  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_action_dropped_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpUsersPolicyDetailOutgoingDlpActionDropped
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_action_dropped_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_action_dropped_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_action_dropped_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail dlp users policy detail outgoing dlp action dropped  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_action_dropped_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpUsersPolicyDetailOutgoingDlpActionDropped
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_action_dropped_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_dlp_users_policy_detail/outgoing_dlp_action_dropped', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDlpUsersPolicyDetailOutgoingDlpActionDropped',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_action_encrypted_get(self, **kwargs):  # noqa: E501
        """mail dlp users policy detail outgoing dlp action encrypted  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_action_encrypted_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpUsersPolicyDetailOutgoingDlpActionEncrypted
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_action_encrypted_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_action_encrypted_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_action_encrypted_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail dlp users policy detail outgoing dlp action encrypted  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_action_encrypted_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpUsersPolicyDetailOutgoingDlpActionEncrypted
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_action_encrypted_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_dlp_users_policy_detail/outgoing_dlp_action_encrypted', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDlpUsersPolicyDetailOutgoingDlpActionEncrypted',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_action_quarantined_get(self, **kwargs):  # noqa: E501
        """mail dlp users policy detail outgoing dlp action quarantined  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_action_quarantined_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpUsersPolicyDetailOutgoingDlpActionQuarantined
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_action_quarantined_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_action_quarantined_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_action_quarantined_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail dlp users policy detail outgoing dlp action quarantined  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_action_quarantined_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpUsersPolicyDetailOutgoingDlpActionQuarantined
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_action_quarantined_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_dlp_users_policy_detail/outgoing_dlp_action_quarantined', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDlpUsersPolicyDetailOutgoingDlpActionQuarantined',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_incidents_critical_get(self, **kwargs):  # noqa: E501
        """mail dlp users policy detail outgoing dlp incidents critical  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_incidents_critical_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpUsersPolicyDetailOutgoingDlpIncidentsCritical
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_incidents_critical_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_incidents_critical_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_incidents_critical_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail dlp users policy detail outgoing dlp incidents critical  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_incidents_critical_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpUsersPolicyDetailOutgoingDlpIncidentsCritical
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_incidents_critical_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_dlp_users_policy_detail/outgoing_dlp_incidents_critical', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDlpUsersPolicyDetailOutgoingDlpIncidentsCritical',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_incidents_high_get(self, **kwargs):  # noqa: E501
        """mail dlp users policy detail outgoing dlp incidents high  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_incidents_high_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpUsersPolicyDetailOutgoingDlpIncidentsHigh
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_incidents_high_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_incidents_high_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_incidents_high_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail dlp users policy detail outgoing dlp incidents high  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_incidents_high_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpUsersPolicyDetailOutgoingDlpIncidentsHigh
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_incidents_high_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_dlp_users_policy_detail/outgoing_dlp_incidents_high', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDlpUsersPolicyDetailOutgoingDlpIncidentsHigh',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_incidents_low_get(self, **kwargs):  # noqa: E501
        """mail dlp users policy detail outgoing dlp incidents low  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_incidents_low_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpUsersPolicyDetailOutgoingDlpIncidentsLow
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_incidents_low_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_incidents_low_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_incidents_low_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail dlp users policy detail outgoing dlp incidents low  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_incidents_low_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpUsersPolicyDetailOutgoingDlpIncidentsLow
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_incidents_low_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_dlp_users_policy_detail/outgoing_dlp_incidents_low', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDlpUsersPolicyDetailOutgoingDlpIncidentsLow',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_incidents_medium_get(self, **kwargs):  # noqa: E501
        """mail dlp users policy detail outgoing dlp incidents medium  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_incidents_medium_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpUsersPolicyDetailOutgoingDlpIncidentsMedium
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_incidents_medium_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_incidents_medium_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_incidents_medium_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail dlp users policy detail outgoing dlp incidents medium  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_incidents_medium_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpUsersPolicyDetailOutgoingDlpIncidentsMedium
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_dlp_users_policy_detail_outgoing_dlp_incidents_medium_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_dlp_users_policy_detail/outgoing_dlp_incidents_medium', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDlpUsersPolicyDetailOutgoingDlpIncidentsMedium',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_dlp_users_policy_detail_total_dlp_incidents_get(self, **kwargs):  # noqa: E501
        """mail dlp users policy detail total dlp incidents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_users_policy_detail_total_dlp_incidents_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpUsersPolicyDetailTotalDlpIncidents
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_dlp_users_policy_detail_total_dlp_incidents_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_dlp_users_policy_detail_total_dlp_incidents_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_dlp_users_policy_detail_total_dlp_incidents_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail dlp users policy detail total dlp incidents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dlp_users_policy_detail_total_dlp_incidents_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDlpUsersPolicyDetailTotalDlpIncidents
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_dlp_users_policy_detail_total_dlp_incidents_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_dlp_users_policy_detail/total_dlp_incidents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDlpUsersPolicyDetailTotalDlpIncidents',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_dmarc_failed_none_get(self, **kwargs):  # noqa: E501
        """mail dmarc incoming traffic summary dmarc failed none  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_dmarc_failed_none_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDmarcIncomingTrafficSummaryDmarcFailedNone
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_dmarc_failed_none_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_dmarc_failed_none_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_dmarc_failed_none_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail dmarc incoming traffic summary dmarc failed none  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_dmarc_failed_none_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDmarcIncomingTrafficSummaryDmarcFailedNone
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_dmarc_failed_none_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_dmarc_incoming_traffic_summary/dmarc_failed_none', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDmarcIncomingTrafficSummaryDmarcFailedNone',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_dmarc_failed_quarantined_get(self, **kwargs):  # noqa: E501
        """mail dmarc incoming traffic summary dmarc failed quarantined  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_dmarc_failed_quarantined_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDmarcIncomingTrafficSummaryDmarcFailedQuarantined
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_dmarc_failed_quarantined_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_dmarc_failed_quarantined_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_dmarc_failed_quarantined_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail dmarc incoming traffic summary dmarc failed quarantined  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_dmarc_failed_quarantined_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDmarcIncomingTrafficSummaryDmarcFailedQuarantined
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_dmarc_failed_quarantined_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_dmarc_incoming_traffic_summary/dmarc_failed_quarantined', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDmarcIncomingTrafficSummaryDmarcFailedQuarantined',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_dmarc_failed_rejected_get(self, **kwargs):  # noqa: E501
        """mail dmarc incoming traffic summary dmarc failed rejected  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_dmarc_failed_rejected_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDmarcIncomingTrafficSummaryDmarcFailedRejected
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_dmarc_failed_rejected_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_dmarc_failed_rejected_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_dmarc_failed_rejected_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail dmarc incoming traffic summary dmarc failed rejected  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_dmarc_failed_rejected_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDmarcIncomingTrafficSummaryDmarcFailedRejected
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_dmarc_failed_rejected_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_dmarc_incoming_traffic_summary/dmarc_failed_rejected', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDmarcIncomingTrafficSummaryDmarcFailedRejected',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_dmarc_failed_total_get(self, **kwargs):  # noqa: E501
        """mail dmarc incoming traffic summary dmarc failed total  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_dmarc_failed_total_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDmarcIncomingTrafficSummaryDmarcFailedTotal
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_dmarc_failed_total_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_dmarc_failed_total_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_dmarc_failed_total_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail dmarc incoming traffic summary dmarc failed total  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_dmarc_failed_total_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDmarcIncomingTrafficSummaryDmarcFailedTotal
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_dmarc_failed_total_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_dmarc_incoming_traffic_summary/dmarc_failed_total', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDmarcIncomingTrafficSummaryDmarcFailedTotal',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_dmarc_passed_get(self, **kwargs):  # noqa: E501
        """mail dmarc incoming traffic summary dmarc passed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_dmarc_passed_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDmarcIncomingTrafficSummaryDmarcPassed
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_dmarc_passed_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_dmarc_passed_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_dmarc_passed_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail dmarc incoming traffic summary dmarc passed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_dmarc_passed_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDmarcIncomingTrafficSummaryDmarcPassed
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_dmarc_passed_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_dmarc_incoming_traffic_summary/dmarc_passed', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDmarcIncomingTrafficSummaryDmarcPassed',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_dmarc_total_attempted_get(self, **kwargs):  # noqa: E501
        """mail dmarc incoming traffic summary dmarc total attempted  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_dmarc_total_attempted_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDmarcIncomingTrafficSummaryDmarcTotalAttempted
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_dmarc_total_attempted_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_dmarc_total_attempted_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_dmarc_total_attempted_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail dmarc incoming traffic summary dmarc total attempted  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_dmarc_total_attempted_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDmarcIncomingTrafficSummaryDmarcTotalAttempted
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_dmarc_total_attempted_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_dmarc_incoming_traffic_summary/dmarc_total_attempted', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDmarcIncomingTrafficSummaryDmarcTotalAttempted',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_get(self, **kwargs):  # noqa: E501
        """mail dmarc incoming traffic summary dmarc passed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDmarcIncomingTrafficSummaryDmarcPassed
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail dmarc incoming traffic summary dmarc passed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailDmarcIncomingTrafficSummaryDmarcPassed
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_dmarc_incoming_traffic_summary_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_dmarc_incoming_traffic_summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailDmarcIncomingTrafficSummaryDmarcPassed',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_env_sender_rate_limit_env_sender_incidents_get(self, **kwargs):  # noqa: E501
        """mail env sender rate limit env sender incidents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_env_sender_rate_limit_env_sender_incidents_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailEnvSenderRateLimitEnvSenderIncidents
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_env_sender_rate_limit_env_sender_incidents_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_env_sender_rate_limit_env_sender_incidents_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_env_sender_rate_limit_env_sender_incidents_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail env sender rate limit env sender incidents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_env_sender_rate_limit_env_sender_incidents_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailEnvSenderRateLimitEnvSenderIncidents
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_env_sender_rate_limit_env_sender_incidents_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_env_sender_rate_limit/env_sender_incidents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailEnvSenderRateLimitEnvSenderIncidents',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_env_sender_rate_limit_env_sender_rejected_rcpts_get(self, **kwargs):  # noqa: E501
        """mail env sender rate limit env sender rejected rcpts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_env_sender_rate_limit_env_sender_rejected_rcpts_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailEnvSenderRateLimitEnvSenderRejectedRcpts
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_env_sender_rate_limit_env_sender_rejected_rcpts_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_env_sender_rate_limit_env_sender_rejected_rcpts_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_env_sender_rate_limit_env_sender_rejected_rcpts_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail env sender rate limit env sender rejected rcpts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_env_sender_rate_limit_env_sender_rejected_rcpts_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailEnvSenderRateLimitEnvSenderRejectedRcpts
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_env_sender_rate_limit_env_sender_rejected_rcpts_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_env_sender_rate_limit/env_sender_rejected_rcpts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailEnvSenderRateLimitEnvSenderRejectedRcpts',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_env_sender_rate_limit_get(self, **kwargs):  # noqa: E501
        """mail env sender rate limit env sender rejected rcpts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_env_sender_rate_limit_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailEnvSenderRateLimitEnvSenderRejectedRcpts
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_env_sender_rate_limit_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_env_sender_rate_limit_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_env_sender_rate_limit_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail env sender rate limit env sender rejected rcpts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_env_sender_rate_limit_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailEnvSenderRateLimitEnvSenderRejectedRcpts
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_env_sender_rate_limit_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_env_sender_rate_limit', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailEnvSenderRateLimitEnvSenderRejectedRcpts',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_env_sender_stats_get(self, **kwargs):  # noqa: E501
        """mail env sender stats num msgs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_env_sender_stats_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailEnvSenderStatsNumMsgs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_env_sender_stats_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_env_sender_stats_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_env_sender_stats_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail env sender stats num msgs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_env_sender_stats_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailEnvSenderStatsNumMsgs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_env_sender_stats_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_env_sender_stats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailEnvSenderStatsNumMsgs',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_env_sender_stats_num_msgs_get(self, **kwargs):  # noqa: E501
        """mail env sender stats num msgs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_env_sender_stats_num_msgs_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailEnvSenderStatsNumMsgs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_env_sender_stats_num_msgs_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_env_sender_stats_num_msgs_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_env_sender_stats_num_msgs_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail env sender stats num msgs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_env_sender_stats_num_msgs_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailEnvSenderStatsNumMsgs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_env_sender_stats_num_msgs_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_env_sender_stats/num_msgs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailEnvSenderStatsNumMsgs',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_fed_content_filter_incoming_get(self, **kwargs):  # noqa: E501
        """mail fed content filter incoming recipients matched  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_fed_content_filter_incoming_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailFedContentFilterIncomingRecipientsMatched
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_fed_content_filter_incoming_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_fed_content_filter_incoming_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_fed_content_filter_incoming_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail fed content filter incoming recipients matched  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_fed_content_filter_incoming_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailFedContentFilterIncomingRecipientsMatched
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_fed_content_filter_incoming_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_fed_content_filter_incoming', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailFedContentFilterIncomingRecipientsMatched',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_fed_content_filter_incoming_recipients_matched_get(self, **kwargs):  # noqa: E501
        """mail fed content filter incoming recipients matched  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_fed_content_filter_incoming_recipients_matched_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailFedContentFilterIncomingRecipientsMatched
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_fed_content_filter_incoming_recipients_matched_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_fed_content_filter_incoming_recipients_matched_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_fed_content_filter_incoming_recipients_matched_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail fed content filter incoming recipients matched  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_fed_content_filter_incoming_recipients_matched_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailFedContentFilterIncomingRecipientsMatched
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_fed_content_filter_incoming_recipients_matched_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_fed_content_filter_incoming/recipients_matched', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailFedContentFilterIncomingRecipientsMatched',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_hvm_msg_filter_stats_get(self, **kwargs):  # noqa: E501
        """mail hvm msg filter stats num matches  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_hvm_msg_filter_stats_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailHvmMsgFilterStatsNumMatches
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_hvm_msg_filter_stats_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_hvm_msg_filter_stats_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_hvm_msg_filter_stats_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail hvm msg filter stats num matches  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_hvm_msg_filter_stats_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailHvmMsgFilterStatsNumMatches
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_hvm_msg_filter_stats_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_hvm_msg_filter_stats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailHvmMsgFilterStatsNumMatches',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_hvm_msg_filter_stats_num_matches_get(self, **kwargs):  # noqa: E501
        """mail hvm msg filter stats num matches  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_hvm_msg_filter_stats_num_matches_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailHvmMsgFilterStatsNumMatches
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_hvm_msg_filter_stats_num_matches_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_hvm_msg_filter_stats_num_matches_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_hvm_msg_filter_stats_num_matches_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail hvm msg filter stats num matches  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_hvm_msg_filter_stats_num_matches_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailHvmMsgFilterStatsNumMatches
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_hvm_msg_filter_stats_num_matches_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_hvm_msg_filter_stats/num_matches', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailHvmMsgFilterStatsNumMatches',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_amp_summary_blockedlist_get(self, **kwargs):  # noqa: E501
        """mail incoming amp summary blocked list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_amp_summary_blockedlist_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingAmpSummaryBlockedlist
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_amp_summary_blockedlist_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_amp_summary_blockedlist_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_amp_summary_blockedlist_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming amp summary blocked list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_amp_summary_blockedlist_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingAmpSummaryBlockedlist
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_amp_summary_blockedlist_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_amp_summary/blockedlist', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingAmpSummaryBlockedlist',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_amp_summary_clamav_lowrisk_get(self, **kwargs):  # noqa: E501
        """mail incoming amp summary clamav lowrisk  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_amp_summary_clamav_lowrisk_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingAmpSummaryClamavLowrisk
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_amp_summary_clamav_lowrisk_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_amp_summary_clamav_lowrisk_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_amp_summary_clamav_lowrisk_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming amp summary clamav lowrisk  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_amp_summary_clamav_lowrisk_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingAmpSummaryClamavLowrisk
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_amp_summary_clamav_lowrisk_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_amp_summary/clamav_lowrisk', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingAmpSummaryClamavLowrisk',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_amp_summary_clean_get(self, **kwargs):  # noqa: E501
        """mail incoming amp summary clean  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_amp_summary_clean_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingAmpSummaryClean
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_amp_summary_clean_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_amp_summary_clean_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_amp_summary_clean_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming amp summary clean  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_amp_summary_clean_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingAmpSummaryClean
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_amp_summary_clean_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_amp_summary/clean', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingAmpSummaryClean',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_amp_summary_custom_threshold_get(self, **kwargs):  # noqa: E501
        """mail incoming amp summary custom threshold  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_amp_summary_custom_threshold_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingAmpSummaryCustomThreshold
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_amp_summary_custom_threshold_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_amp_summary_custom_threshold_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_amp_summary_custom_threshold_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming amp summary custom threshold  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_amp_summary_custom_threshold_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingAmpSummaryCustomThreshold
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_amp_summary_custom_threshold_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_amp_summary/custom_threshold', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingAmpSummaryCustomThreshold',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_amp_summary_get(self, **kwargs):  # noqa: E501
        """mail incoming amp summary unscannable  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_amp_summary_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingAmpSummaryUnscannable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_amp_summary_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_amp_summary_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_amp_summary_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming amp summary unscannable  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_amp_summary_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingAmpSummaryUnscannable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_amp_summary_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_amp_summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingAmpSummaryUnscannable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_amp_summary_lowrisk_get(self, **kwargs):  # noqa: E501
        """mail incoming amp summary lowrisk  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_amp_summary_lowrisk_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingAmpSummaryLowrisk
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_amp_summary_lowrisk_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_amp_summary_lowrisk_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_amp_summary_lowrisk_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming amp summary lowrisk  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_amp_summary_lowrisk_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingAmpSummaryLowrisk
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_amp_summary_lowrisk_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_amp_summary/lowrisk', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingAmpSummaryLowrisk',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_amp_summary_malware_get(self, **kwargs):  # noqa: E501
        """mail incoming amp summary malware  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_amp_summary_malware_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingAmpSummaryMalware
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_amp_summary_malware_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_amp_summary_malware_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_amp_summary_malware_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming amp summary malware  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_amp_summary_malware_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingAmpSummaryMalware
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_amp_summary_malware_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_amp_summary/malware', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingAmpSummaryMalware',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_amp_summary_unknown_get(self, **kwargs):  # noqa: E501
        """mail incoming amp summary unknown  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_amp_summary_unknown_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingAmpSummaryUnknown
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_amp_summary_unknown_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_amp_summary_unknown_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_amp_summary_unknown_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming amp summary unknown  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_amp_summary_unknown_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingAmpSummaryUnknown
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_amp_summary_unknown_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_amp_summary/unknown', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingAmpSummaryUnknown',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_amp_summary_unscannable_get(self, **kwargs):  # noqa: E501
        """mail incoming amp summary unscannable  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_amp_summary_unscannable_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingAmpSummaryUnscannable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_amp_summary_unscannable_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_amp_summary_unscannable_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_amp_summary_unscannable_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming amp summary unscannable  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_amp_summary_unscannable_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingAmpSummaryUnscannable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_amp_summary_unscannable_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_amp_summary/unscannable', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingAmpSummaryUnscannable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_domain_detail_blocked_dmarc_get(self, **kwargs):  # noqa: E501
        """mail incoming domain detail blocked dmarc  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_blocked_dmarc_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailBlockedDmarc
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_domain_detail_blocked_dmarc_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_domain_detail_blocked_dmarc_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_domain_detail_blocked_dmarc_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming domain detail blocked dmarc  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_blocked_dmarc_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailBlockedDmarc
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_domain_detail_blocked_dmarc_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_domain_detail/blocked_dmarc', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingDomainDetailBlockedDmarc',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_domain_detail_blocked_invalid_recipient_get(self, **kwargs):  # noqa: E501
        """mail incoming domain detail blocked invalid recipient  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_blocked_invalid_recipient_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailBlockedInvalidRecipient
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_domain_detail_blocked_invalid_recipient_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_domain_detail_blocked_invalid_recipient_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_domain_detail_blocked_invalid_recipient_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming domain detail blocked invalid recipient  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_blocked_invalid_recipient_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailBlockedInvalidRecipient
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_domain_detail_blocked_invalid_recipient_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_domain_detail/blocked_invalid_recipient', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingDomainDetailBlockedInvalidRecipient',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_domain_detail_blocked_reputation_get(self, **kwargs):  # noqa: E501
        """mail incoming domain detail blocked reputation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_blocked_reputation_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailBlockedReputation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_domain_detail_blocked_reputation_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_domain_detail_blocked_reputation_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_domain_detail_blocked_reputation_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming domain detail blocked reputation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_blocked_reputation_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailBlockedReputation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_domain_detail_blocked_reputation_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_domain_detail/blocked_reputation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingDomainDetailBlockedReputation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_domain_detail_blocked_sdr_get(self, **kwargs):  # noqa: E501
        """mail incoming domain detail blocked sdr  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_blocked_sdr_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailBlockedSdr
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_domain_detail_blocked_sdr_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_domain_detail_blocked_sdr_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_domain_detail_blocked_sdr_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming domain detail blocked sdr  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_blocked_sdr_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailBlockedSdr
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_domain_detail_blocked_sdr_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_domain_detail/blocked_sdr', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingDomainDetailBlockedSdr',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_domain_detail_bulk_mail_get(self, **kwargs):  # noqa: E501
        """mail incoming domain detail bulk mail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_bulk_mail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailBulkMail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_domain_detail_bulk_mail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_domain_detail_bulk_mail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_domain_detail_bulk_mail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming domain detail bulk mail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_bulk_mail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailBulkMail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_domain_detail_bulk_mail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_domain_detail/bulk_mail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingDomainDetailBulkMail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_domain_detail_conn_plain_get(self, **kwargs):  # noqa: E501
        """mail incoming domain detail conn plain  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_conn_plain_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailConnPlain
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_domain_detail_conn_plain_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_domain_detail_conn_plain_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_domain_detail_conn_plain_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming domain detail conn plain  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_conn_plain_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailConnPlain
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_domain_detail_conn_plain_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_domain_detail/conn_plain', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingDomainDetailConnPlain',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_domain_detail_conn_tls_fail_get(self, **kwargs):  # noqa: E501
        """mail incoming domain detail conn tls fail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_conn_tls_fail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailConnTlsFail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_domain_detail_conn_tls_fail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_domain_detail_conn_tls_fail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_domain_detail_conn_tls_fail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming domain detail conn tls fail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_conn_tls_fail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailConnTlsFail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_domain_detail_conn_tls_fail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_domain_detail/conn_tls_fail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingDomainDetailConnTlsFail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_domain_detail_conn_tls_opt_fail_get(self, **kwargs):  # noqa: E501
        """mail incoming domain detail conn tls opt fail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_conn_tls_opt_fail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailConnTlsOptFail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_domain_detail_conn_tls_opt_fail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_domain_detail_conn_tls_opt_fail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_domain_detail_conn_tls_opt_fail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming domain detail conn tls opt fail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_conn_tls_opt_fail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailConnTlsOptFail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_domain_detail_conn_tls_opt_fail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_domain_detail/conn_tls_opt_fail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingDomainDetailConnTlsOptFail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_domain_detail_conn_tls_opt_success_get(self, **kwargs):  # noqa: E501
        """mail incoming domain detail conn tls opt success  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_conn_tls_opt_success_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailConnTlsOptSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_domain_detail_conn_tls_opt_success_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_domain_detail_conn_tls_opt_success_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_domain_detail_conn_tls_opt_success_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming domain detail conn tls opt success  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_conn_tls_opt_success_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailConnTlsOptSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_domain_detail_conn_tls_opt_success_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_domain_detail/conn_tls_opt_success', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingDomainDetailConnTlsOptSuccess',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_domain_detail_conn_tls_success_get(self, **kwargs):  # noqa: E501
        """mail incoming domain detail conn tls success  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_conn_tls_success_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailConnTlsSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_domain_detail_conn_tls_success_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_domain_detail_conn_tls_success_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_domain_detail_conn_tls_success_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming domain detail conn tls success  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_conn_tls_success_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailConnTlsSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_domain_detail_conn_tls_success_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_domain_detail/conn_tls_success', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingDomainDetailConnTlsSuccess',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_domain_detail_conn_tls_total_get(self, **kwargs):  # noqa: E501
        """mail incoming domain detail conn tls total  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_conn_tls_total_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailConnTlsTotal
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_domain_detail_conn_tls_total_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_domain_detail_conn_tls_total_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_domain_detail_conn_tls_total_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming domain detail conn tls total  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_conn_tls_total_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailConnTlsTotal
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_domain_detail_conn_tls_total_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_domain_detail/conn_tls_total', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingDomainDetailConnTlsTotal',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_domain_detail_detected_amp_get(self, **kwargs):  # noqa: E501
        """mail incoming domain detail detected amp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_detected_amp_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailDetectedAmp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_domain_detail_detected_amp_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_domain_detail_detected_amp_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_domain_detail_detected_amp_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming domain detail detected amp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_detected_amp_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailDetectedAmp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_domain_detail_detected_amp_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_domain_detail/detected_amp', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingDomainDetailDetectedAmp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_domain_detail_detected_spam_get(self, **kwargs):  # noqa: E501
        """mail incoming domain detail detected spam  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_detected_spam_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailDetectedSpam
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_domain_detail_detected_spam_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_domain_detail_detected_spam_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_domain_detail_detected_spam_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming domain detail detected spam  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_detected_spam_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailDetectedSpam
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_domain_detail_detected_spam_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_domain_detail/detected_spam', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingDomainDetailDetectedSpam',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_domain_detail_detected_virus_get(self, **kwargs):  # noqa: E501
        """mail incoming domain detail detected virus  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_detected_virus_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailDetectedVirus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_domain_detail_detected_virus_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_domain_detail_detected_virus_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_domain_detail_detected_virus_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming domain detail detected virus  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_detected_virus_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailDetectedVirus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_domain_detail_detected_virus_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_domain_detail/detected_virus', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingDomainDetailDetectedVirus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_domain_detail_encrypted_tls_get(self, **kwargs):  # noqa: E501
        """mail incoming domain detail encrypted tls  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_encrypted_tls_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailEncryptedTls
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_domain_detail_encrypted_tls_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_domain_detail_encrypted_tls_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_domain_detail_encrypted_tls_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming domain detail encrypted tls  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_encrypted_tls_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailEncryptedTls
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_domain_detail_encrypted_tls_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_domain_detail/encrypted_tls', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingDomainDetailEncryptedTls',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_domain_detail_get(self, **kwargs):  # noqa: E501
        """mail incoming domain detail blocked reputation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailBlockedReputation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_domain_detail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_domain_detail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_domain_detail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming domain detail blocked reputation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailBlockedReputation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_domain_detail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_domain_detail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingDomainDetailBlockedReputation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_domain_detail_last_sender_group_get(self, **kwargs):  # noqa: E501
        """mail incoming domain detail last sender group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_last_sender_group_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailLastSenderGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_domain_detail_last_sender_group_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_domain_detail_last_sender_group_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_domain_detail_last_sender_group_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming domain detail last sender group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_last_sender_group_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailLastSenderGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_domain_detail_last_sender_group_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_domain_detail/last_sender_group', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingDomainDetailLastSenderGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_domain_detail_last_sender_group_name_get(self, **kwargs):  # noqa: E501
        """mail incoming domain detail last sender group name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_last_sender_group_name_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailLastSenderGroupName
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_domain_detail_last_sender_group_name_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_domain_detail_last_sender_group_name_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_domain_detail_last_sender_group_name_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming domain detail last sender group name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_last_sender_group_name_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailLastSenderGroupName
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_domain_detail_last_sender_group_name_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_domain_detail/last_sender_group_name', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingDomainDetailLastSenderGroupName',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_domain_detail_marketing_mail_get(self, **kwargs):  # noqa: E501
        """mail incoming domain detail marketing mail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_marketing_mail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailMarketingMail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_domain_detail_marketing_mail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_domain_detail_marketing_mail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_domain_detail_marketing_mail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming domain detail marketing mail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_marketing_mail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailMarketingMail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_domain_detail_marketing_mail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_domain_detail/marketing_mail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingDomainDetailMarketingMail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_domain_detail_social_mail_get(self, **kwargs):  # noqa: E501
        """mail incoming domain detail social mail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_social_mail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailSocialMail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_domain_detail_social_mail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_domain_detail_social_mail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_domain_detail_social_mail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming domain detail social mail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_social_mail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailSocialMail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_domain_detail_social_mail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_domain_detail/social_mail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingDomainDetailSocialMail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_domain_detail_threat_content_filter_get(self, **kwargs):  # noqa: E501
        """mail incoming domain detail threat content filter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_threat_content_filter_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailThreatContentFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_domain_detail_threat_content_filter_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_domain_detail_threat_content_filter_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_domain_detail_threat_content_filter_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming domain detail threat content filter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_threat_content_filter_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailThreatContentFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_domain_detail_threat_content_filter_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_domain_detail/threat_content_filter', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingDomainDetailThreatContentFilter',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_domain_detail_total_accepted_connections_get(self, **kwargs):  # noqa: E501
        """mail incoming domain detail total accepted connections  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_total_accepted_connections_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailTotalAcceptedConnections
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_domain_detail_total_accepted_connections_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_domain_detail_total_accepted_connections_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_domain_detail_total_accepted_connections_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming domain detail total accepted connections  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_total_accepted_connections_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailTotalAcceptedConnections
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_domain_detail_total_accepted_connections_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_domain_detail/total_accepted_connections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingDomainDetailTotalAcceptedConnections',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_domain_detail_total_clean_recipients_get(self, **kwargs):  # noqa: E501
        """mail incoming domain detail total clean recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_total_clean_recipients_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailTotalCleanRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_domain_detail_total_clean_recipients_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_domain_detail_total_clean_recipients_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_domain_detail_total_clean_recipients_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming domain detail total clean recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_total_clean_recipients_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailTotalCleanRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_domain_detail_total_clean_recipients_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_domain_detail/total_clean_recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingDomainDetailTotalCleanRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_domain_detail_total_graymail_recipients_get(self, **kwargs):  # noqa: E501
        """mail incoming domain detail total graymail recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_total_graymail_recipients_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailTotalGraymailRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_domain_detail_total_graymail_recipients_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_domain_detail_total_graymail_recipients_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_domain_detail_total_graymail_recipients_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming domain detail total graymail recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_total_graymail_recipients_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailTotalGraymailRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_domain_detail_total_graymail_recipients_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_domain_detail/total_graymail_recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingDomainDetailTotalGraymailRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_domain_detail_total_recipients_get(self, **kwargs):  # noqa: E501
        """mail incoming domain detail total recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_total_recipients_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailTotalRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_domain_detail_total_recipients_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_domain_detail_total_recipients_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_domain_detail_total_recipients_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming domain detail total recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_total_recipients_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailTotalRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_domain_detail_total_recipients_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_domain_detail/total_recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingDomainDetailTotalRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_domain_detail_total_rejected_connections_get(self, **kwargs):  # noqa: E501
        """mail incoming domain detail total rejected connections  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_total_rejected_connections_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailTotalRejectedConnections
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_domain_detail_total_rejected_connections_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_domain_detail_total_rejected_connections_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_domain_detail_total_rejected_connections_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming domain detail total rejected connections  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_total_rejected_connections_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailTotalRejectedConnections
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_domain_detail_total_rejected_connections_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_domain_detail/total_rejected_connections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingDomainDetailTotalRejectedConnections',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_domain_detail_total_threat_recipients_get(self, **kwargs):  # noqa: E501
        """mail incoming domain detail total threat recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_total_threat_recipients_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailTotalThreatRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_domain_detail_total_threat_recipients_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_domain_detail_total_threat_recipients_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_domain_detail_total_threat_recipients_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming domain detail total threat recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_total_threat_recipients_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailTotalThreatRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_domain_detail_total_threat_recipients_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_domain_detail/total_threat_recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingDomainDetailTotalThreatRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_domain_detail_total_throttled_recipients_get(self, **kwargs):  # noqa: E501
        """mail incoming domain detail total throttled recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_total_throttled_recipients_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailTotalThrottledRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_domain_detail_total_throttled_recipients_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_domain_detail_total_throttled_recipients_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_domain_detail_total_throttled_recipients_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming domain detail total throttled recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_detail_total_throttled_recipients_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainDetailTotalThrottledRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_domain_detail_total_throttled_recipients_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_domain_detail/total_throttled_recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingDomainDetailTotalThrottledRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_domain_ip_detail_blocked_dmarc_get(self, **kwargs):  # noqa: E501
        """mail incoming domain ip detail blocked dmarc  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_ip_detail_blocked_dmarc_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainIpDetailBlockedDmarc
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_domain_ip_detail_blocked_dmarc_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_domain_ip_detail_blocked_dmarc_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_domain_ip_detail_blocked_dmarc_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming domain ip detail blocked dmarc  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_ip_detail_blocked_dmarc_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainIpDetailBlockedDmarc
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_domain_ip_detail_blocked_dmarc_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_domain_ip_detail/blocked_dmarc', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingDomainIpDetailBlockedDmarc',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_domain_ip_detail_blocked_invalid_recipient_get(self, **kwargs):  # noqa: E501
        """mail incoming domain ip detail blocked invalid recipient  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_ip_detail_blocked_invalid_recipient_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainIpDetailBlockedInvalidRecipient
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_domain_ip_detail_blocked_invalid_recipient_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_domain_ip_detail_blocked_invalid_recipient_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_domain_ip_detail_blocked_invalid_recipient_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming domain ip detail blocked invalid recipient  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_ip_detail_blocked_invalid_recipient_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainIpDetailBlockedInvalidRecipient
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_domain_ip_detail_blocked_invalid_recipient_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_domain_ip_detail/blocked_invalid_recipient', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingDomainIpDetailBlockedInvalidRecipient',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_domain_ip_detail_blocked_reputation_get(self, **kwargs):  # noqa: E501
        """mail incoming domain ip detail blocked reputation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_ip_detail_blocked_reputation_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainIpDetailBlockedReputation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_domain_ip_detail_blocked_reputation_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_domain_ip_detail_blocked_reputation_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_domain_ip_detail_blocked_reputation_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming domain ip detail blocked reputation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_ip_detail_blocked_reputation_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainIpDetailBlockedReputation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_domain_ip_detail_blocked_reputation_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_domain_ip_detail/blocked_reputation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingDomainIpDetailBlockedReputation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_domain_ip_detail_blocked_sdr_get(self, **kwargs):  # noqa: E501
        """mail incoming domain ip detail blocked reputation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_ip_detail_blocked_sdr_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainIpDetailBlockedSdr
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_domain_ip_detail_blocked_sdr_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_domain_ip_detail_blocked_sdr_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_domain_ip_detail_blocked_sdr_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming domain ip detail blocked reputation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_ip_detail_blocked_sdr_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainIpDetailBlockedSdr
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_domain_ip_detail_blocked_sdr_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_domain_ip_detail/blocked_sdr', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingDomainIpDetailBlockedSdr',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_domain_ip_detail_bulk_mail_get(self, **kwargs):  # noqa: E501
        """mail incoming domain ip detail bulk mail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_ip_detail_bulk_mail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainIpDetailBulkMail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_domain_ip_detail_bulk_mail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_domain_ip_detail_bulk_mail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_domain_ip_detail_bulk_mail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming domain ip detail bulk mail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_ip_detail_bulk_mail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainIpDetailBulkMail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_domain_ip_detail_bulk_mail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_domain_ip_detail/bulk_mail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingDomainIpDetailBulkMail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_domain_ip_detail_detected_amp_get(self, **kwargs):  # noqa: E501
        """mail incoming domain ip detail detected amp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_ip_detail_detected_amp_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainIpDetailDetectedAmp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_domain_ip_detail_detected_amp_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_domain_ip_detail_detected_amp_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_domain_ip_detail_detected_amp_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming domain ip detail detected amp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_ip_detail_detected_amp_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainIpDetailDetectedAmp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_domain_ip_detail_detected_amp_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_domain_ip_detail/detected_amp', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingDomainIpDetailDetectedAmp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_domain_ip_detail_detected_spam_get(self, **kwargs):  # noqa: E501
        """mail incoming domain ip detail detected spam  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_ip_detail_detected_spam_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainIpDetailDetectedSpam
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_domain_ip_detail_detected_spam_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_domain_ip_detail_detected_spam_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_domain_ip_detail_detected_spam_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming domain ip detail detected spam  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_ip_detail_detected_spam_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainIpDetailDetectedSpam
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_domain_ip_detail_detected_spam_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_domain_ip_detail/detected_spam', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingDomainIpDetailDetectedSpam',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_domain_ip_detail_detected_virus_get(self, **kwargs):  # noqa: E501
        """mail incoming domain ip detail detected virus  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_ip_detail_detected_virus_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainIpDetailDetectedVirus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_domain_ip_detail_detected_virus_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_domain_ip_detail_detected_virus_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_domain_ip_detail_detected_virus_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming domain ip detail detected virus  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_ip_detail_detected_virus_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainIpDetailDetectedVirus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_domain_ip_detail_detected_virus_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_domain_ip_detail/detected_virus', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingDomainIpDetailDetectedVirus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_domain_ip_detail_dns_verified_get(self, **kwargs):  # noqa: E501
        """mail incoming domain ip detail dns verified  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_ip_detail_dns_verified_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainIpDetailDnsVerified
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_domain_ip_detail_dns_verified_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_domain_ip_detail_dns_verified_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_domain_ip_detail_dns_verified_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming domain ip detail dns verified  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_ip_detail_dns_verified_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainIpDetailDnsVerified
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_domain_ip_detail_dns_verified_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_domain_ip_detail/dns_verified', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingDomainIpDetailDnsVerified',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_domain_ip_detail_get(self, **kwargs):  # noqa: E501
        """mail incoming domain ip detail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_ip_detail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainIpDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_domain_ip_detail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_domain_ip_detail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_domain_ip_detail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming domain ip detail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_ip_detail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainIpDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_domain_ip_detail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_domain_ip_detail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingDomainIpDetail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_domain_ip_detail_last_sender_group_get(self, **kwargs):  # noqa: E501
        """mail incoming domain ip detail last sender group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_ip_detail_last_sender_group_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainIpDetailLastSenderGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_domain_ip_detail_last_sender_group_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_domain_ip_detail_last_sender_group_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_domain_ip_detail_last_sender_group_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming domain ip detail last sender group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_ip_detail_last_sender_group_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainIpDetailLastSenderGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_domain_ip_detail_last_sender_group_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_domain_ip_detail/last_sender_group', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingDomainIpDetailLastSenderGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_domain_ip_detail_last_sender_group_name_get(self, **kwargs):  # noqa: E501
        """mail incoming domain ip detail last sender group name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_ip_detail_last_sender_group_name_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainIpDetailLastSenderGroupName
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_domain_ip_detail_last_sender_group_name_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_domain_ip_detail_last_sender_group_name_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_domain_ip_detail_last_sender_group_name_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming domain ip detail last sender group name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_ip_detail_last_sender_group_name_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainIpDetailLastSenderGroupName
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_domain_ip_detail_last_sender_group_name_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_domain_ip_detail/last_sender_group_name', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingDomainIpDetailLastSenderGroupName',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_domain_ip_detail_marketing_mail_get(self, **kwargs):  # noqa: E501
        """mail incoming domain ip detail marketing mail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_ip_detail_marketing_mail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainIpDetailMarketingMail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_domain_ip_detail_marketing_mail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_domain_ip_detail_marketing_mail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_domain_ip_detail_marketing_mail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming domain ip detail marketing mail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_ip_detail_marketing_mail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainIpDetailMarketingMail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_domain_ip_detail_marketing_mail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_domain_ip_detail/marketing_mail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingDomainIpDetailMarketingMail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_domain_ip_detail_sbrs_score_get(self, **kwargs):  # noqa: E501
        """mail incoming domain ip detail sbrs score  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_ip_detail_sbrs_score_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainIpDetailSbrsScore
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_domain_ip_detail_sbrs_score_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_domain_ip_detail_sbrs_score_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_domain_ip_detail_sbrs_score_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming domain ip detail sbrs score  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_ip_detail_sbrs_score_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainIpDetailSbrsScore
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_domain_ip_detail_sbrs_score_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_domain_ip_detail/sbrs_score', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingDomainIpDetailSbrsScore',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_domain_ip_detail_social_mail_get(self, **kwargs):  # noqa: E501
        """mail incoming domain ip detail socail mail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_ip_detail_social_mail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainIpDetailSocialMail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_domain_ip_detail_social_mail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_domain_ip_detail_social_mail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_domain_ip_detail_social_mail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming domain ip detail socail mail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_ip_detail_social_mail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainIpDetailSocialMail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_domain_ip_detail_social_mail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_domain_ip_detail/social_mail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingDomainIpDetailSocialMail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_domain_ip_detail_threat_content_filter_get(self, **kwargs):  # noqa: E501
        """mail incoming domain ip detail threat content filter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_ip_detail_threat_content_filter_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainIpDetailThreatContentFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_domain_ip_detail_threat_content_filter_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_domain_ip_detail_threat_content_filter_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_domain_ip_detail_threat_content_filter_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming domain ip detail threat content filter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_ip_detail_threat_content_filter_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainIpDetailThreatContentFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_domain_ip_detail_threat_content_filter_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_domain_ip_detail/threat_content_filter', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingDomainIpDetailThreatContentFilter',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_domain_ip_detail_total_clean_recipients_get(self, **kwargs):  # noqa: E501
        """mail incoming domain ip detail total clean recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_ip_detail_total_clean_recipients_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainIpDetailTotalCleanRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_domain_ip_detail_total_clean_recipients_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_domain_ip_detail_total_clean_recipients_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_domain_ip_detail_total_clean_recipients_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming domain ip detail total clean recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_ip_detail_total_clean_recipients_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainIpDetailTotalCleanRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_domain_ip_detail_total_clean_recipients_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_domain_ip_detail/total_clean_recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingDomainIpDetailTotalCleanRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_domain_ip_detail_total_graymail_recipients_get(self, **kwargs):  # noqa: E501
        """mail incoming domain ip detail total graymail recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_ip_detail_total_graymail_recipients_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainIpDetailTotalGraymailRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_domain_ip_detail_total_graymail_recipients_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_domain_ip_detail_total_graymail_recipients_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_domain_ip_detail_total_graymail_recipients_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming domain ip detail total graymail recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_ip_detail_total_graymail_recipients_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainIpDetailTotalGraymailRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_domain_ip_detail_total_graymail_recipients_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_domain_ip_detail/total_graymail_recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingDomainIpDetailTotalGraymailRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_domain_ip_detail_total_recipients_get(self, **kwargs):  # noqa: E501
        """mail incoming domain ip detail total recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_ip_detail_total_recipients_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainIpDetailTotalRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_domain_ip_detail_total_recipients_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_domain_ip_detail_total_recipients_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_domain_ip_detail_total_recipients_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming domain ip detail total recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_ip_detail_total_recipients_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainIpDetailTotalRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_domain_ip_detail_total_recipients_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_domain_ip_detail/total_recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingDomainIpDetailTotalRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_domain_ip_detail_total_threat_recipients_get(self, **kwargs):  # noqa: E501
        """mail incoming domain ip detail total threat recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_ip_detail_total_threat_recipients_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainIpDetailTotalThreatRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_domain_ip_detail_total_threat_recipients_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_domain_ip_detail_total_threat_recipients_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_domain_ip_detail_total_threat_recipients_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming domain ip detail total threat recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_domain_ip_detail_total_threat_recipients_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingDomainIpDetailTotalThreatRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_domain_ip_detail_total_threat_recipients_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_domain_ip_detail/total_threat_recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingDomainIpDetailTotalThreatRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_hat_connections_get(self, **kwargs):  # noqa: E501
        """mail incoming hat connections total hat connections  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_hat_connections_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingHatConnectionsTotalHatConnections
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_hat_connections_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_hat_connections_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_hat_connections_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming hat connections total hat connections  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_hat_connections_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingHatConnectionsTotalHatConnections
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_hat_connections_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_hat_connections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingHatConnectionsTotalHatConnections',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_hat_connections_total_hat_connections_get(self, **kwargs):  # noqa: E501
        """mail incoming hat connections total hat connections  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_hat_connections_total_hat_connections_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingHatConnectionsTotalHatConnections
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_hat_connections_total_hat_connections_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_hat_connections_total_hat_connections_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_hat_connections_total_hat_connections_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming hat connections total hat connections  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_hat_connections_total_hat_connections_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingHatConnectionsTotalHatConnections
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_hat_connections_total_hat_connections_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_hat_connections/total_hat_connections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingHatConnectionsTotalHatConnections',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_hat_connections_total_hat_messages_get(self, **kwargs):  # noqa: E501
        """mail incoming hat connections total hat messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_hat_connections_total_hat_messages_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingHatConnectionsTotalHatMessages
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_hat_connections_total_hat_messages_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_hat_connections_total_hat_messages_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_hat_connections_total_hat_messages_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming hat connections total hat messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_hat_connections_total_hat_messages_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingHatConnectionsTotalHatMessages
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_hat_connections_total_hat_messages_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_hat_connections/total_hat_messages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingHatConnectionsTotalHatMessages',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_ip_hostname_detail_blocked_dmarc_get(self, **kwargs):  # noqa: E501
        """mail incoming ip hostname detail blocked dmarc  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_blocked_dmarc_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingIpHostnameDetailBlockedDmarc
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_blocked_dmarc_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_blocked_dmarc_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_ip_hostname_detail_blocked_dmarc_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming ip hostname detail blocked dmarc  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_blocked_dmarc_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingIpHostnameDetailBlockedDmarc
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_ip_hostname_detail_blocked_dmarc_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_ip_hostname_detail/blocked_dmarc', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingIpHostnameDetailBlockedDmarc',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_ip_hostname_detail_blocked_invalid_recipient_get(self, **kwargs):  # noqa: E501
        """mail incoming ip hostname detail blocked invalid recipient  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_blocked_invalid_recipient_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingIpHostnameDetailBlockedInvalidRecipient
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_blocked_invalid_recipient_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_blocked_invalid_recipient_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_ip_hostname_detail_blocked_invalid_recipient_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming ip hostname detail blocked invalid recipient  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_blocked_invalid_recipient_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingIpHostnameDetailBlockedInvalidRecipient
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_ip_hostname_detail_blocked_invalid_recipient_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_ip_hostname_detail/blocked_invalid_recipient', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingIpHostnameDetailBlockedInvalidRecipient',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_ip_hostname_detail_blocked_reputation_get(self, **kwargs):  # noqa: E501
        """mail incoming ip hostname detail blocked reputation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_blocked_reputation_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingIpHostnameDetailBlockedReputation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_blocked_reputation_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_blocked_reputation_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_ip_hostname_detail_blocked_reputation_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming ip hostname detail blocked reputation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_blocked_reputation_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingIpHostnameDetailBlockedReputation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_ip_hostname_detail_blocked_reputation_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_ip_hostname_detail/blocked_reputation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingIpHostnameDetailBlockedReputation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_ip_hostname_detail_blocked_sdr_get(self, **kwargs):  # noqa: E501
        """mail incoming ip hostname detail blocked sdr  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_blocked_sdr_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingIpHostnameDetailBlockedSdr
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_blocked_sdr_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_blocked_sdr_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_ip_hostname_detail_blocked_sdr_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming ip hostname detail blocked sdr  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_blocked_sdr_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingIpHostnameDetailBlockedSdr
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_ip_hostname_detail_blocked_sdr_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_ip_hostname_detail/blocked_sdr', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingIpHostnameDetailBlockedSdr',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_ip_hostname_detail_bulk_mail_get(self, **kwargs):  # noqa: E501
        """mail incoming ip hostname detail bulk mail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_bulk_mail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingIpHostnameDetailBulkMail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_bulk_mail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_bulk_mail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_ip_hostname_detail_bulk_mail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming ip hostname detail bulk mail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_bulk_mail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingIpHostnameDetailBulkMail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_ip_hostname_detail_bulk_mail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_ip_hostname_detail/bulk_mail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingIpHostnameDetailBulkMail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_ip_hostname_detail_detected_amp_get(self, **kwargs):  # noqa: E501
        """mail incoming ip hostname detail detected amp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_detected_amp_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingIpHostnameDetailDetectedAmp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_detected_amp_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_detected_amp_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_ip_hostname_detail_detected_amp_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming ip hostname detail detected amp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_detected_amp_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingIpHostnameDetailDetectedAmp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_ip_hostname_detail_detected_amp_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_ip_hostname_detail/detected_amp', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingIpHostnameDetailDetectedAmp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_ip_hostname_detail_detected_spam_get(self, **kwargs):  # noqa: E501
        """mail incoming ip hostname detail detected spam  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_detected_spam_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingIpHostnameDetailDetectedSpam
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_detected_spam_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_detected_spam_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_ip_hostname_detail_detected_spam_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming ip hostname detail detected spam  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_detected_spam_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingIpHostnameDetailDetectedSpam
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_ip_hostname_detail_detected_spam_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_ip_hostname_detail/detected_spam', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingIpHostnameDetailDetectedSpam',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_ip_hostname_detail_detected_virus_get(self, **kwargs):  # noqa: E501
        """mail incoming ip hostname detail detected virus  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_detected_virus_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingIpHostnameDetailDetectedVirus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_detected_virus_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_detected_virus_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_ip_hostname_detail_detected_virus_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming ip hostname detail detected virus  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_detected_virus_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingIpHostnameDetailDetectedVirus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_ip_hostname_detail_detected_virus_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_ip_hostname_detail/detected_virus', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingIpHostnameDetailDetectedVirus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_ip_hostname_detail_dns_verified_get(self, **kwargs):  # noqa: E501
        """mail incoming ip hostname detail dns verified  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_dns_verified_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingIpHostnameDetailDnsVerified
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_dns_verified_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_dns_verified_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_ip_hostname_detail_dns_verified_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming ip hostname detail dns verified  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_dns_verified_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingIpHostnameDetailDnsVerified
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_ip_hostname_detail_dns_verified_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_ip_hostname_detail/dns_verified', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingIpHostnameDetailDnsVerified',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_ip_hostname_detail_get(self, **kwargs):  # noqa: E501
        """mail incoming ip hostname detail blocked reputation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingIpHostnameDetailBlockedReputation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_ip_hostname_detail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming ip hostname detail blocked reputation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingIpHostnameDetailBlockedReputation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_ip_hostname_detail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_ip_hostname_detail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingIpHostnameDetailBlockedReputation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_ip_hostname_detail_last_sender_group_get(self, **kwargs):  # noqa: E501
        """mail incoming ip hostname detail last sender group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_last_sender_group_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingIpHostnameDetailLastSenderGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_last_sender_group_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_last_sender_group_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_ip_hostname_detail_last_sender_group_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming ip hostname detail last sender group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_last_sender_group_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingIpHostnameDetailLastSenderGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_ip_hostname_detail_last_sender_group_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_ip_hostname_detail/last_sender_group', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingIpHostnameDetailLastSenderGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_ip_hostname_detail_last_sender_group_name_get(self, **kwargs):  # noqa: E501
        """mail incoming ip hostname detail last sender group name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_last_sender_group_name_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingIpHostnameDetailLastSenderGroupName
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_last_sender_group_name_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_last_sender_group_name_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_ip_hostname_detail_last_sender_group_name_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming ip hostname detail last sender group name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_last_sender_group_name_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingIpHostnameDetailLastSenderGroupName
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_ip_hostname_detail_last_sender_group_name_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_ip_hostname_detail/last_sender_group_name', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingIpHostnameDetailLastSenderGroupName',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_ip_hostname_detail_marketing_mail_get(self, **kwargs):  # noqa: E501
        """mail incoming ip hostname detail marketing mail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_marketing_mail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingIpHostnameDetailMarketingMail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_marketing_mail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_marketing_mail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_ip_hostname_detail_marketing_mail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming ip hostname detail marketing mail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_marketing_mail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingIpHostnameDetailMarketingMail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_ip_hostname_detail_marketing_mail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_ip_hostname_detail/marketing_mail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingIpHostnameDetailMarketingMail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_ip_hostname_detail_sbrs_score_get(self, **kwargs):  # noqa: E501
        """mail incoming ip hostname detail sbrs score  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_sbrs_score_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingIpHostnameDetailSbrsScore
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_sbrs_score_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_sbrs_score_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_ip_hostname_detail_sbrs_score_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming ip hostname detail sbrs score  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_sbrs_score_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingIpHostnameDetailSbrsScore
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_ip_hostname_detail_sbrs_score_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_ip_hostname_detail/sbrs_score', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingIpHostnameDetailSbrsScore',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_ip_hostname_detail_social_mail_get(self, **kwargs):  # noqa: E501
        """mail incoming ip hostname detail social mail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_social_mail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingIpHostnameDetailSocialMail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_social_mail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_social_mail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_ip_hostname_detail_social_mail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming ip hostname detail social mail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_social_mail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingIpHostnameDetailSocialMail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_ip_hostname_detail_social_mail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_ip_hostname_detail/social_mail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingIpHostnameDetailSocialMail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_ip_hostname_detail_threat_content_filter_get(self, **kwargs):  # noqa: E501
        """mail incoming ip hostname detail threat content filter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_threat_content_filter_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingIpHostnameDetailThreatContentFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_threat_content_filter_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_threat_content_filter_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_ip_hostname_detail_threat_content_filter_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming ip hostname detail threat content filter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_threat_content_filter_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingIpHostnameDetailThreatContentFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_ip_hostname_detail_threat_content_filter_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_ip_hostname_detail/threat_content_filter', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingIpHostnameDetailThreatContentFilter',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_ip_hostname_detail_total_clean_recipients_get(self, **kwargs):  # noqa: E501
        """mail incoming ip hostname detail total clean recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_total_clean_recipients_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingIpHostnameDetailTotalCleanRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_total_clean_recipients_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_total_clean_recipients_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_ip_hostname_detail_total_clean_recipients_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming ip hostname detail total clean recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_total_clean_recipients_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingIpHostnameDetailTotalCleanRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_ip_hostname_detail_total_clean_recipients_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_ip_hostname_detail/total_clean_recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingIpHostnameDetailTotalCleanRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_ip_hostname_detail_total_graymail_recipients_get(self, **kwargs):  # noqa: E501
        """mail incoming ip hostname detail total graymail recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_total_graymail_recipients_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingIpHostnameDetailTotalGraymailRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_total_graymail_recipients_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_total_graymail_recipients_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_ip_hostname_detail_total_graymail_recipients_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming ip hostname detail total graymail recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_total_graymail_recipients_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingIpHostnameDetailTotalGraymailRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_ip_hostname_detail_total_graymail_recipients_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_ip_hostname_detail/total_graymail_recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingIpHostnameDetailTotalGraymailRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_ip_hostname_detail_total_recipients_get(self, **kwargs):  # noqa: E501
        """mail incoming ip hostname detail total recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_total_recipients_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingIpHostnameDetailTotalRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_total_recipients_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_total_recipients_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_ip_hostname_detail_total_recipients_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming ip hostname detail total recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_total_recipients_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingIpHostnameDetailTotalRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_ip_hostname_detail_total_recipients_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_ip_hostname_detail/total_recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingIpHostnameDetailTotalRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_ip_hostname_detail_total_threat_recipients_get(self, **kwargs):  # noqa: E501
        """mail incoming ip hostname detail total threat recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_total_threat_recipients_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingIpHostnameDetailTotalThreatRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_total_threat_recipients_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_total_threat_recipients_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_ip_hostname_detail_total_threat_recipients_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming ip hostname detail total threat recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_ip_hostname_detail_total_threat_recipients_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingIpHostnameDetailTotalThreatRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_ip_hostname_detail_total_threat_recipients_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_ip_hostname_detail/total_threat_recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingIpHostnameDetailTotalThreatRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_amp_verdict_time_get(self, **kwargs):  # noqa: E501
        """mail incoming malware threat file detail by filename amp verdict time  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_amp_verdict_time_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingMalwareThreatFileDetailByFilenameAmpVerdictTime
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_amp_verdict_time_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_amp_verdict_time_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_amp_verdict_time_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming malware threat file detail by filename amp verdict time  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_amp_verdict_time_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingMalwareThreatFileDetailByFilenameAmpVerdictTime
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_amp_verdict_time_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_malware_threat_file_detail_by_filename/amp_verdict_time', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingMalwareThreatFileDetailByFilenameAmpVerdictTime',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_console_url_get(self, **kwargs):  # noqa: E501
        """mail incoming malware threat file detail by filename console url  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_console_url_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingMalwareThreatFileDetailByFilenameConsoleUrl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_console_url_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_console_url_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_console_url_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming malware threat file detail by filename console url  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_console_url_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingMalwareThreatFileDetailByFilenameConsoleUrl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_console_url_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_malware_threat_file_detail_by_filename/console_url', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingMalwareThreatFileDetailByFilenameConsoleUrl',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_detected_amp_get(self, **kwargs):  # noqa: E501
        """mail incoming malware threat file detail by filename detected amp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_detected_amp_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingMalwareThreatFileDetailByFilenameDetectedAmp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_detected_amp_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_detected_amp_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_detected_amp_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming malware threat file detail by filename detected amp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_detected_amp_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingMalwareThreatFileDetailByFilenameDetectedAmp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_detected_amp_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_malware_threat_file_detail_by_filename/detected_amp', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingMalwareThreatFileDetailByFilenameDetectedAmp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_get(self, **kwargs):  # noqa: E501
        """mail incoming malware threat file detail by filename detected amp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingMalwareThreatFileDetailByFilenameDetectedAmp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming malware threat file detail by filename detected amp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingMalwareThreatFileDetailByFilenameDetectedAmp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_malware_threat_file_detail_by_filename', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingMalwareThreatFileDetailByFilenameDetectedAmp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_score_get(self, **kwargs):  # noqa: E501
        """mail incoming malware threat file detail by filename score  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_score_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingMalwareThreatFileDetailByFilenameScore
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_score_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_score_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_score_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming malware threat file detail by filename score  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_score_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingMalwareThreatFileDetailByFilenameScore
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_score_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_malware_threat_file_detail_by_filename/score', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingMalwareThreatFileDetailByFilenameScore',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_threat_name_get(self, **kwargs):  # noqa: E501
        """mail incoming malware threat file detail by filename threat name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_threat_name_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingMalwareThreatFileDetailByFilenameThreatName
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_threat_name_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_threat_name_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_threat_name_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming malware threat file detail by filename threat name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_threat_name_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingMalwareThreatFileDetailByFilenameThreatName
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_threat_name_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_malware_threat_file_detail_by_filename/threat_name', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingMalwareThreatFileDetailByFilenameThreatName',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_threat_type_get(self, **kwargs):  # noqa: E501
        """mail incoming malware threat file detail by filename threat type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_threat_type_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingMalwareThreatFileDetailByFilenameThreatType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_threat_type_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_threat_type_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_threat_type_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming malware threat file detail by filename threat type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_threat_type_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingMalwareThreatFileDetailByFilenameThreatType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_threat_type_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_malware_threat_file_detail_by_filename/threat_type', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingMalwareThreatFileDetailByFilenameThreatType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_upload_flag_get(self, **kwargs):  # noqa: E501
        """mail incoming malware threat file detail by filename upload flag  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_upload_flag_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingMalwareThreatFileDetailByFilenameUploadFlag
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_upload_flag_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_upload_flag_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_upload_flag_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming malware threat file detail by filename upload flag  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_upload_flag_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingMalwareThreatFileDetailByFilenameUploadFlag
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_by_filename_upload_flag_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_malware_threat_file_detail_by_filename/upload_flag', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingMalwareThreatFileDetailByFilenameUploadFlag',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_detected_amp_get(self, **kwargs):  # noqa: E501
        """mail incoming malware threat file detail detected amp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_detected_amp_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingMalwareThreatFileDetailDetectedAmp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_detected_amp_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_detected_amp_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_detected_amp_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming malware threat file detail detected amp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_detected_amp_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingMalwareThreatFileDetailDetectedAmp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_detected_amp_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_malware_threat_file_detail/detected_amp', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingMalwareThreatFileDetailDetectedAmp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_get(self, **kwargs):  # noqa: E501
        """mail incoming malware threat file detail detected amp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingMalwareThreatFileDetailDetectedAmp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming malware threat file detail detected amp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingMalwareThreatFileDetailDetectedAmp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_malware_threat_file_detail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingMalwareThreatFileDetailDetectedAmp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_summary_detected_amp_files_get(self, **kwargs):  # noqa: E501
        """mail incoming malware threat file detail summary detected amp files  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_summary_detected_amp_files_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingMalwareThreatFileDetailSummaryDetectedAmpFiles
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_summary_detected_amp_files_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_summary_detected_amp_files_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_summary_detected_amp_files_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming malware threat file detail summary detected amp files  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_summary_detected_amp_files_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingMalwareThreatFileDetailSummaryDetectedAmpFiles
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_summary_detected_amp_files_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_malware_threat_file_detail_summary/detected_amp_files', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingMalwareThreatFileDetailSummaryDetectedAmpFiles',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_summary_detected_amp_get(self, **kwargs):  # noqa: E501
        """mail incoming malware threat file detail summary detected amp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_summary_detected_amp_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingMalwareThreatFileDetailSummaryDetectedAmp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_summary_detected_amp_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_summary_detected_amp_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_summary_detected_amp_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming malware threat file detail summary detected amp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_summary_detected_amp_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingMalwareThreatFileDetailSummaryDetectedAmp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_summary_detected_amp_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_malware_threat_file_detail_summary/detected_amp', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingMalwareThreatFileDetailSummaryDetectedAmp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_summary_get(self, **kwargs):  # noqa: E501
        """mail incoming malware threat file detail summary detected amp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_summary_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingMalwareThreatFileDetailSummaryDetectedAmp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_summary_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_summary_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_summary_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming malware threat file detail summary detected amp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_summary_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingMalwareThreatFileDetailSummaryDetectedAmp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_malware_threat_file_detail_summary_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_malware_threat_file_detail_summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingMalwareThreatFileDetailSummaryDetectedAmp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_network_detail_blocked_dmarc_get(self, **kwargs):  # noqa: E501
        """mail incoming network detail blocked dmarc  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_detail_blocked_dmarc_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDetailBlockedDmarc
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_network_detail_blocked_dmarc_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_network_detail_blocked_dmarc_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_network_detail_blocked_dmarc_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming network detail blocked dmarc  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_detail_blocked_dmarc_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDetailBlockedDmarc
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_network_detail_blocked_dmarc_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_network_detail/blocked_dmarc', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingNetworkDetailBlockedDmarc',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_network_detail_blocked_invalid_recipient_get(self, **kwargs):  # noqa: E501
        """mail incoming network detail blocked invalid recipient  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_detail_blocked_invalid_recipient_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDetailBlockedInvalidRecipient
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_network_detail_blocked_invalid_recipient_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_network_detail_blocked_invalid_recipient_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_network_detail_blocked_invalid_recipient_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming network detail blocked invalid recipient  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_detail_blocked_invalid_recipient_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDetailBlockedInvalidRecipient
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_network_detail_blocked_invalid_recipient_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_network_detail/blocked_invalid_recipient', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingNetworkDetailBlockedInvalidRecipient',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_network_detail_blocked_reputation_get(self, **kwargs):  # noqa: E501
        """mail incoming network detail blocked reputation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_detail_blocked_reputation_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDetailBlockedReputation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_network_detail_blocked_reputation_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_network_detail_blocked_reputation_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_network_detail_blocked_reputation_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming network detail blocked reputation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_detail_blocked_reputation_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDetailBlockedReputation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_network_detail_blocked_reputation_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_network_detail/blocked_reputation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingNetworkDetailBlockedReputation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_network_detail_blocked_sdr_get(self, **kwargs):  # noqa: E501
        """mail incoming network detail blocked sdr  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_detail_blocked_sdr_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDetailBlockedSdr
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_network_detail_blocked_sdr_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_network_detail_blocked_sdr_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_network_detail_blocked_sdr_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming network detail blocked sdr  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_detail_blocked_sdr_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDetailBlockedSdr
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_network_detail_blocked_sdr_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_network_detail/blocked_sdr', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingNetworkDetailBlockedSdr',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_network_detail_bulk_mail_get(self, **kwargs):  # noqa: E501
        """mail incoming network detail bulk mail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_detail_bulk_mail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDetailBulkMail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_network_detail_bulk_mail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_network_detail_bulk_mail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_network_detail_bulk_mail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming network detail bulk mail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_detail_bulk_mail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDetailBulkMail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_network_detail_bulk_mail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_network_detail/bulk_mail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingNetworkDetailBulkMail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_network_detail_detected_amp_get(self, **kwargs):  # noqa: E501
        """mail incoming network detail detected amp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_detail_detected_amp_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDetailDetectedAmp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_network_detail_detected_amp_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_network_detail_detected_amp_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_network_detail_detected_amp_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming network detail detected amp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_detail_detected_amp_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDetailDetectedAmp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_network_detail_detected_amp_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_network_detail/detected_amp', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingNetworkDetailDetectedAmp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_network_detail_detected_spam_get(self, **kwargs):  # noqa: E501
        """mail incoming network detail detected spam  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_detail_detected_spam_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDetailDetectedSpam
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_network_detail_detected_spam_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_network_detail_detected_spam_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_network_detail_detected_spam_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming network detail detected spam  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_detail_detected_spam_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDetailDetectedSpam
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_network_detail_detected_spam_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_network_detail/detected_spam', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingNetworkDetailDetectedSpam',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_network_detail_detected_virus_get(self, **kwargs):  # noqa: E501
        """mail incoming network detail detected virus  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_detail_detected_virus_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDetailDetectedVirus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_network_detail_detected_virus_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_network_detail_detected_virus_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_network_detail_detected_virus_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming network detail detected virus  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_detail_detected_virus_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDetailDetectedVirus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_network_detail_detected_virus_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_network_detail/detected_virus', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingNetworkDetailDetectedVirus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_network_detail_get(self, **kwargs):  # noqa: E501
        """mail incoming network detail last sender group name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_detail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDetailLastSenderGroupName
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_network_detail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_network_detail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_network_detail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming network detail last sender group name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_detail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDetailLastSenderGroupName
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_network_detail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_network_detail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingNetworkDetailLastSenderGroupName',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_network_detail_last_sender_group_get(self, **kwargs):  # noqa: E501
        """mail incoming network detail last sender group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_detail_last_sender_group_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDetailLastSenderGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_network_detail_last_sender_group_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_network_detail_last_sender_group_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_network_detail_last_sender_group_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming network detail last sender group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_detail_last_sender_group_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDetailLastSenderGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_network_detail_last_sender_group_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_network_detail/last_sender_group', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingNetworkDetailLastSenderGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_network_detail_last_sender_group_name_get(self, **kwargs):  # noqa: E501
        """mail incoming network detail last sender group name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_detail_last_sender_group_name_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDetailLastSenderGroupName
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_network_detail_last_sender_group_name_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_network_detail_last_sender_group_name_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_network_detail_last_sender_group_name_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming network detail last sender group name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_detail_last_sender_group_name_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDetailLastSenderGroupName
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_network_detail_last_sender_group_name_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_network_detail/last_sender_group_name', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingNetworkDetailLastSenderGroupName',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_network_detail_marketing_mail_get(self, **kwargs):  # noqa: E501
        """mail incoming network detail marketing mail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_detail_marketing_mail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDetailMarketingMail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_network_detail_marketing_mail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_network_detail_marketing_mail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_network_detail_marketing_mail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming network detail marketing mail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_detail_marketing_mail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDetailMarketingMail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_network_detail_marketing_mail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_network_detail/marketing_mail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingNetworkDetailMarketingMail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_network_detail_social_mail_get(self, **kwargs):  # noqa: E501
        """mail incoming network detail social mail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_detail_social_mail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDetailSocialMail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_network_detail_social_mail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_network_detail_social_mail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_network_detail_social_mail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming network detail social mail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_detail_social_mail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDetailSocialMail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_network_detail_social_mail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_network_detail/social_mail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingNetworkDetailSocialMail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_network_detail_threat_content_filter_get(self, **kwargs):  # noqa: E501
        """mail incoming network detail threat content filter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_detail_threat_content_filter_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDetailThreatContentFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_network_detail_threat_content_filter_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_network_detail_threat_content_filter_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_network_detail_threat_content_filter_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming network detail threat content filter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_detail_threat_content_filter_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDetailThreatContentFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_network_detail_threat_content_filter_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_network_detail/threat_content_filter', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingNetworkDetailThreatContentFilter',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_network_detail_total_accepted_connections_get(self, **kwargs):  # noqa: E501
        """mail incoming network detail total accepted connections  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_detail_total_accepted_connections_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDetailTotalAcceptedConnections
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_network_detail_total_accepted_connections_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_network_detail_total_accepted_connections_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_network_detail_total_accepted_connections_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming network detail total accepted connections  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_detail_total_accepted_connections_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDetailTotalAcceptedConnections
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_network_detail_total_accepted_connections_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_network_detail/total_accepted_connections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingNetworkDetailTotalAcceptedConnections',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_network_detail_total_clean_recipients_get(self, **kwargs):  # noqa: E501
        """mail incoming network detail total clean recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_detail_total_clean_recipients_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDetailTotalCleanRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_network_detail_total_clean_recipients_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_network_detail_total_clean_recipients_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_network_detail_total_clean_recipients_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming network detail total clean recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_detail_total_clean_recipients_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDetailTotalCleanRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_network_detail_total_clean_recipients_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_network_detail/total_clean_recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingNetworkDetailTotalCleanRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_network_detail_total_graymail_recipients_get(self, **kwargs):  # noqa: E501
        """mail incoming network detail total graymail recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_detail_total_graymail_recipients_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDetailTotalGraymailRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_network_detail_total_graymail_recipients_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_network_detail_total_graymail_recipients_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_network_detail_total_graymail_recipients_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming network detail total graymail recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_detail_total_graymail_recipients_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDetailTotalGraymailRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_network_detail_total_graymail_recipients_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_network_detail/total_graymail_recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingNetworkDetailTotalGraymailRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_network_detail_total_recipients_get(self, **kwargs):  # noqa: E501
        """mail incoming network detail total recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_detail_total_recipients_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDetailTotalRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_network_detail_total_recipients_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_network_detail_total_recipients_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_network_detail_total_recipients_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming network detail total recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_detail_total_recipients_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDetailTotalRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_network_detail_total_recipients_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_network_detail/total_recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingNetworkDetailTotalRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_network_detail_total_rejected_connections_get(self, **kwargs):  # noqa: E501
        """mail incoming network detail total rejected connections  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_detail_total_rejected_connections_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDetailTotalRejectedConnections
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_network_detail_total_rejected_connections_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_network_detail_total_rejected_connections_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_network_detail_total_rejected_connections_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming network detail total rejected connections  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_detail_total_rejected_connections_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDetailTotalRejectedConnections
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_network_detail_total_rejected_connections_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_network_detail/total_rejected_connections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingNetworkDetailTotalRejectedConnections',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_network_detail_total_threat_recipients_get(self, **kwargs):  # noqa: E501
        """mail incoming network detail total threat recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_detail_total_threat_recipients_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDetailTotalThreatRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_network_detail_total_threat_recipients_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_network_detail_total_threat_recipients_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_network_detail_total_threat_recipients_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming network detail total threat recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_detail_total_threat_recipients_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDetailTotalThreatRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_network_detail_total_threat_recipients_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_network_detail/total_threat_recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingNetworkDetailTotalThreatRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_network_detail_total_throttled_recipients_get(self, **kwargs):  # noqa: E501
        """mail incoming network detail total throttled recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_detail_total_throttled_recipients_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDetailTotalThrottledRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_network_detail_total_throttled_recipients_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_network_detail_total_throttled_recipients_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_network_detail_total_throttled_recipients_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming network detail total throttled recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_detail_total_throttled_recipients_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDetailTotalThrottledRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_network_detail_total_throttled_recipients_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_network_detail/total_throttled_recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingNetworkDetailTotalThrottledRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_network_domain_detail_blocked_dmarc_get(self, **kwargs):  # noqa: E501
        """mail incoming network domain detail blocked dmarc  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_domain_detail_blocked_dmarc_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDomainDetailBlockedDmarc
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_network_domain_detail_blocked_dmarc_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_network_domain_detail_blocked_dmarc_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_network_domain_detail_blocked_dmarc_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming network domain detail blocked dmarc  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_domain_detail_blocked_dmarc_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDomainDetailBlockedDmarc
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_network_domain_detail_blocked_dmarc_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_network_domain_detail/blocked_dmarc', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingNetworkDomainDetailBlockedDmarc',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_network_domain_detail_blocked_invalid_recipient_get(self, **kwargs):  # noqa: E501
        """mail incoming network domain detail blocked invalid recipient  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_domain_detail_blocked_invalid_recipient_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDomainDetailBlockedInvalidRecipient
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_network_domain_detail_blocked_invalid_recipient_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_network_domain_detail_blocked_invalid_recipient_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_network_domain_detail_blocked_invalid_recipient_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming network domain detail blocked invalid recipient  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_domain_detail_blocked_invalid_recipient_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDomainDetailBlockedInvalidRecipient
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_network_domain_detail_blocked_invalid_recipient_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_network_domain_detail/blocked_invalid_recipient', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingNetworkDomainDetailBlockedInvalidRecipient',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_network_domain_detail_blocked_reputation_get(self, **kwargs):  # noqa: E501
        """mail incoming network domain detail blocked reputation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_domain_detail_blocked_reputation_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDomainDetailBlockedReputation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_network_domain_detail_blocked_reputation_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_network_domain_detail_blocked_reputation_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_network_domain_detail_blocked_reputation_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming network domain detail blocked reputation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_domain_detail_blocked_reputation_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDomainDetailBlockedReputation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_network_domain_detail_blocked_reputation_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_network_domain_detail/blocked_reputation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingNetworkDomainDetailBlockedReputation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_network_domain_detail_blocked_sdr_get(self, **kwargs):  # noqa: E501
        """mail incoming network domain detail blocked sdr  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_domain_detail_blocked_sdr_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDomainDetailBlockedSdr
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_network_domain_detail_blocked_sdr_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_network_domain_detail_blocked_sdr_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_network_domain_detail_blocked_sdr_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming network domain detail blocked sdr  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_domain_detail_blocked_sdr_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDomainDetailBlockedSdr
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_network_domain_detail_blocked_sdr_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_network_domain_detail/blocked_sdr', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingNetworkDomainDetailBlockedSdr',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_network_domain_detail_bulk_mail_get(self, **kwargs):  # noqa: E501
        """mail incoming network domain detail bulk mail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_domain_detail_bulk_mail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDomainDetailBulkMail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_network_domain_detail_bulk_mail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_network_domain_detail_bulk_mail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_network_domain_detail_bulk_mail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming network domain detail bulk mail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_domain_detail_bulk_mail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDomainDetailBulkMail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_network_domain_detail_bulk_mail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_network_domain_detail/bulk_mail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingNetworkDomainDetailBulkMail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_network_domain_detail_detected_amp_get(self, **kwargs):  # noqa: E501
        """mail incoming network domain detail detected amp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_domain_detail_detected_amp_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDomainDetailDetectedAmp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_network_domain_detail_detected_amp_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_network_domain_detail_detected_amp_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_network_domain_detail_detected_amp_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming network domain detail detected amp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_domain_detail_detected_amp_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDomainDetailDetectedAmp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_network_domain_detail_detected_amp_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_network_domain_detail/detected_amp', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingNetworkDomainDetailDetectedAmp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_network_domain_detail_detected_spam_get(self, **kwargs):  # noqa: E501
        """mail incoming network domain detail detected spam  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_domain_detail_detected_spam_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDomainDetailDetectedSpam
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_network_domain_detail_detected_spam_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_network_domain_detail_detected_spam_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_network_domain_detail_detected_spam_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming network domain detail detected spam  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_domain_detail_detected_spam_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDomainDetailDetectedSpam
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_network_domain_detail_detected_spam_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_network_domain_detail/detected_spam', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingNetworkDomainDetailDetectedSpam',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_network_domain_detail_detected_virus_get(self, **kwargs):  # noqa: E501
        """mail incoming network domain detail detected virus  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_domain_detail_detected_virus_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDomainDetailDetectedVirus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_network_domain_detail_detected_virus_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_network_domain_detail_detected_virus_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_network_domain_detail_detected_virus_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming network domain detail detected virus  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_domain_detail_detected_virus_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDomainDetailDetectedVirus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_network_domain_detail_detected_virus_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_network_domain_detail/detected_virus', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingNetworkDomainDetailDetectedVirus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_network_domain_detail_get(self, **kwargs):  # noqa: E501
        """mail incoming network domain detail total recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_domain_detail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDomainDetailTotalRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_network_domain_detail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_network_domain_detail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_network_domain_detail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming network domain detail total recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_domain_detail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDomainDetailTotalRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_network_domain_detail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_network_domain_detail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingNetworkDomainDetailTotalRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_network_domain_detail_marketing_mail_get(self, **kwargs):  # noqa: E501
        """mail incoming network domain detail marketing mail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_domain_detail_marketing_mail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDomainDetailMarketingMail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_network_domain_detail_marketing_mail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_network_domain_detail_marketing_mail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_network_domain_detail_marketing_mail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming network domain detail marketing mail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_domain_detail_marketing_mail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDomainDetailMarketingMail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_network_domain_detail_marketing_mail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_network_domain_detail/marketing_mail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingNetworkDomainDetailMarketingMail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_network_domain_detail_social_mail_get(self, **kwargs):  # noqa: E501
        """mail incoming network domain detail social mail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_domain_detail_social_mail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDomainDetailSocialMail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_network_domain_detail_social_mail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_network_domain_detail_social_mail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_network_domain_detail_social_mail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming network domain detail social mail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_domain_detail_social_mail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDomainDetailSocialMail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_network_domain_detail_social_mail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_network_domain_detail/social_mail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingNetworkDomainDetailSocialMail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_network_domain_detail_threat_content_filter_get(self, **kwargs):  # noqa: E501
        """mail incoming network domain detail threat content filter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_domain_detail_threat_content_filter_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDomainDetailThreatContentFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_network_domain_detail_threat_content_filter_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_network_domain_detail_threat_content_filter_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_network_domain_detail_threat_content_filter_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming network domain detail threat content filter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_domain_detail_threat_content_filter_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDomainDetailThreatContentFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_network_domain_detail_threat_content_filter_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_network_domain_detail/threat_content_filter', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingNetworkDomainDetailThreatContentFilter',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_network_domain_detail_total_accepted_connections_get(self, **kwargs):  # noqa: E501
        """mail incoming network domain detail total accepted connections  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_domain_detail_total_accepted_connections_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDomainDetailTotalAcceptedConnections
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_network_domain_detail_total_accepted_connections_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_network_domain_detail_total_accepted_connections_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_network_domain_detail_total_accepted_connections_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming network domain detail total accepted connections  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_domain_detail_total_accepted_connections_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDomainDetailTotalAcceptedConnections
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_network_domain_detail_total_accepted_connections_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_network_domain_detail/total_accepted_connections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingNetworkDomainDetailTotalAcceptedConnections',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_network_domain_detail_total_clean_recipients_get(self, **kwargs):  # noqa: E501
        """mail incoming network domain detail total clean recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_domain_detail_total_clean_recipients_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDomainDetailTotalCleanRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_network_domain_detail_total_clean_recipients_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_network_domain_detail_total_clean_recipients_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_network_domain_detail_total_clean_recipients_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming network domain detail total clean recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_domain_detail_total_clean_recipients_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDomainDetailTotalCleanRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_network_domain_detail_total_clean_recipients_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_network_domain_detail/total_clean_recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingNetworkDomainDetailTotalCleanRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_network_domain_detail_total_graymail_recipients_get(self, **kwargs):  # noqa: E501
        """mail incoming network domain detail total graymail recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_domain_detail_total_graymail_recipients_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDomainDetailTotalGraymailRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_network_domain_detail_total_graymail_recipients_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_network_domain_detail_total_graymail_recipients_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_network_domain_detail_total_graymail_recipients_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming network domain detail total graymail recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_domain_detail_total_graymail_recipients_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDomainDetailTotalGraymailRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_network_domain_detail_total_graymail_recipients_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_network_domain_detail/total_graymail_recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingNetworkDomainDetailTotalGraymailRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_network_domain_detail_total_recipients_get(self, **kwargs):  # noqa: E501
        """mail incoming network domain detail total recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_domain_detail_total_recipients_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDomainDetailTotalRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_network_domain_detail_total_recipients_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_network_domain_detail_total_recipients_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_network_domain_detail_total_recipients_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming network domain detail total recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_domain_detail_total_recipients_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDomainDetailTotalRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_network_domain_detail_total_recipients_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_network_domain_detail/total_recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingNetworkDomainDetailTotalRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_network_domain_detail_total_rejected_connections_get(self, **kwargs):  # noqa: E501
        """mail incoming network domain detail total rejected connections  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_domain_detail_total_rejected_connections_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDomainDetailTotalRejectedConnections
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_network_domain_detail_total_rejected_connections_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_network_domain_detail_total_rejected_connections_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_network_domain_detail_total_rejected_connections_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming network domain detail total rejected connections  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_domain_detail_total_rejected_connections_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDomainDetailTotalRejectedConnections
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_network_domain_detail_total_rejected_connections_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_network_domain_detail/total_rejected_connections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingNetworkDomainDetailTotalRejectedConnections',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_network_domain_detail_total_threat_recipients_get(self, **kwargs):  # noqa: E501
        """mail incoming network domain detail total threat recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_domain_detail_total_threat_recipients_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDomainDetailTotalThreatRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_network_domain_detail_total_threat_recipients_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_network_domain_detail_total_threat_recipients_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_network_domain_detail_total_threat_recipients_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming network domain detail total threat recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_domain_detail_total_threat_recipients_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDomainDetailTotalThreatRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_network_domain_detail_total_threat_recipients_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_network_domain_detail/total_threat_recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingNetworkDomainDetailTotalThreatRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_network_domain_detail_total_throttled_recipients_get(self, **kwargs):  # noqa: E501
        """mail incoming network domain detail total throttled recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_domain_detail_total_throttled_recipients_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDomainDetailTotalThrottledRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_network_domain_detail_total_throttled_recipients_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_network_domain_detail_total_throttled_recipients_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_network_domain_detail_total_throttled_recipients_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming network domain detail total throttled recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_network_domain_detail_total_throttled_recipients_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingNetworkDomainDetailTotalThrottledRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_network_domain_detail_total_throttled_recipients_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_network_domain_detail/total_throttled_recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingNetworkDomainDetailTotalThrottledRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_traffic_summary_blocked_dmarc_get(self, **kwargs):  # noqa: E501
        """mail incoming traffic summary blocked dmarc  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_traffic_summary_blocked_dmarc_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailIncomingTrafficSummaryBlockedDmarc
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_traffic_summary_blocked_dmarc_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_traffic_summary_blocked_dmarc_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_traffic_summary_blocked_dmarc_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming traffic summary blocked dmarc  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_traffic_summary_blocked_dmarc_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailIncomingTrafficSummaryBlockedDmarc
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_traffic_summary_blocked_dmarc_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_traffic_summary/blocked_dmarc', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingTrafficSummaryBlockedDmarc',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_traffic_summary_blocked_invalid_recipient_get(self, **kwargs):  # noqa: E501
        """mail incoming traffic summary blocked invalid recipient  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_traffic_summary_blocked_invalid_recipient_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailIncomingTrafficSummaryBlockedInvalidRecipient
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_traffic_summary_blocked_invalid_recipient_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_traffic_summary_blocked_invalid_recipient_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_traffic_summary_blocked_invalid_recipient_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming traffic summary blocked invalid recipient  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_traffic_summary_blocked_invalid_recipient_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailIncomingTrafficSummaryBlockedInvalidRecipient
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_traffic_summary_blocked_invalid_recipient_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_traffic_summary/blocked_invalid_recipient', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingTrafficSummaryBlockedInvalidRecipient',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_traffic_summary_blocked_reputation_get(self, **kwargs):  # noqa: E501
        """mail incoming traffic summary blocked reputation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_traffic_summary_blocked_reputation_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailIncomingTrafficSummaryBlockedReputation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_traffic_summary_blocked_reputation_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_traffic_summary_blocked_reputation_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_traffic_summary_blocked_reputation_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming traffic summary blocked reputation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_traffic_summary_blocked_reputation_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailIncomingTrafficSummaryBlockedReputation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_traffic_summary_blocked_reputation_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_traffic_summary/blocked_reputation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingTrafficSummaryBlockedReputation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_traffic_summary_blocked_sdr_get(self, **kwargs):  # noqa: E501
        """mail incoming traffic summary blocked sdr  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_traffic_summary_blocked_sdr_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailIncomingTrafficSummaryBlockedSdr
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_traffic_summary_blocked_sdr_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_traffic_summary_blocked_sdr_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_traffic_summary_blocked_sdr_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming traffic summary blocked sdr  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_traffic_summary_blocked_sdr_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailIncomingTrafficSummaryBlockedSdr
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_traffic_summary_blocked_sdr_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_traffic_summary/blocked_sdr', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingTrafficSummaryBlockedSdr',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_traffic_summary_bulk_mail_get(self, **kwargs):  # noqa: E501
        """mail incoming traffic summary bulk mail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_traffic_summary_bulk_mail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailIncomingTrafficSummaryBulkMail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_traffic_summary_bulk_mail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_traffic_summary_bulk_mail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_traffic_summary_bulk_mail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming traffic summary bulk mail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_traffic_summary_bulk_mail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailIncomingTrafficSummaryBulkMail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_traffic_summary_bulk_mail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_traffic_summary/bulk_mail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingTrafficSummaryBulkMail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_traffic_summary_detected_amp_get(self, **kwargs):  # noqa: E501
        """mail incoming traffic summary detected amp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_traffic_summary_detected_amp_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailIncomingTrafficSummaryDetectedAmp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_traffic_summary_detected_amp_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_traffic_summary_detected_amp_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_traffic_summary_detected_amp_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming traffic summary detected amp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_traffic_summary_detected_amp_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailIncomingTrafficSummaryDetectedAmp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_traffic_summary_detected_amp_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_traffic_summary/detected_amp', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingTrafficSummaryDetectedAmp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_traffic_summary_detected_spam_get(self, **kwargs):  # noqa: E501
        """mail incoming traffic summary detected spam  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_traffic_summary_detected_spam_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailIncomingTrafficSummaryDetectedSpam
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_traffic_summary_detected_spam_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_traffic_summary_detected_spam_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_traffic_summary_detected_spam_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming traffic summary detected spam  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_traffic_summary_detected_spam_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailIncomingTrafficSummaryDetectedSpam
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_traffic_summary_detected_spam_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_traffic_summary/detected_spam', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingTrafficSummaryDetectedSpam',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_traffic_summary_detected_virus_get(self, **kwargs):  # noqa: E501
        """mail incoming traffic summary detected virus  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_traffic_summary_detected_virus_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailIncomingTrafficSummaryDetectedVirus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_traffic_summary_detected_virus_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_traffic_summary_detected_virus_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_traffic_summary_detected_virus_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming traffic summary detected virus  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_traffic_summary_detected_virus_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailIncomingTrafficSummaryDetectedVirus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_traffic_summary_detected_virus_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_traffic_summary/detected_virus', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingTrafficSummaryDetectedVirus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_traffic_summary_get(self, **kwargs):  # noqa: E501
        """mail incoming traffic summary  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_traffic_summary_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailIncomingTrafficSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_traffic_summary_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_traffic_summary_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_traffic_summary_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming traffic summary  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_traffic_summary_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailIncomingTrafficSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_traffic_summary_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_traffic_summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingTrafficSummary',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_traffic_summary_ims_spam_increment_over_case_get(self, **kwargs):  # noqa: E501
        """mail incoming traffic summary ims spam increment over case  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_traffic_summary_ims_spam_increment_over_case_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailIncomingTrafficSummaryImsSpamIncrementOverCase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_traffic_summary_ims_spam_increment_over_case_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_traffic_summary_ims_spam_increment_over_case_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_traffic_summary_ims_spam_increment_over_case_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming traffic summary ims spam increment over case  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_traffic_summary_ims_spam_increment_over_case_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailIncomingTrafficSummaryImsSpamIncrementOverCase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_traffic_summary_ims_spam_increment_over_case_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_traffic_summary/ims_spam_increment_over_case', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingTrafficSummaryImsSpamIncrementOverCase',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_traffic_summary_malicious_url_get(self, **kwargs):  # noqa: E501
        """mail incoming traffic summary malicious url  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_traffic_summary_malicious_url_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailIncomingTrafficSummaryMaliciousUrl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_traffic_summary_malicious_url_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_traffic_summary_malicious_url_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_traffic_summary_malicious_url_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming traffic summary malicious url  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_traffic_summary_malicious_url_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailIncomingTrafficSummaryMaliciousUrl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_traffic_summary_malicious_url_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_traffic_summary/malicious_url', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingTrafficSummaryMaliciousUrl',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_traffic_summary_marketing_mail_get(self, **kwargs):  # noqa: E501
        """mail incoming traffic summary marketing mail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_traffic_summary_marketing_mail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailIncomingTrafficSummaryMarketingMail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_traffic_summary_marketing_mail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_traffic_summary_marketing_mail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_traffic_summary_marketing_mail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming traffic summary marketing mail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_traffic_summary_marketing_mail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailIncomingTrafficSummaryMarketingMail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_traffic_summary_marketing_mail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_traffic_summary/marketing_mail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingTrafficSummaryMarketingMail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_traffic_summary_social_mail_get(self, **kwargs):  # noqa: E501
        """mail incoming traffic summary social mail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_traffic_summary_social_mail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailIncomingTrafficSummarySocialMail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_traffic_summary_social_mail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_traffic_summary_social_mail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_traffic_summary_social_mail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming traffic summary social mail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_traffic_summary_social_mail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailIncomingTrafficSummarySocialMail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_traffic_summary_social_mail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_traffic_summary/social_mail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingTrafficSummarySocialMail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_traffic_summary_threat_content_filter_get(self, **kwargs):  # noqa: E501
        """mail incoming traffic summary threat content filter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_traffic_summary_threat_content_filter_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailIncomingTrafficSummaryThreatContentFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_traffic_summary_threat_content_filter_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_traffic_summary_threat_content_filter_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_traffic_summary_threat_content_filter_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming traffic summary threat content filter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_traffic_summary_threat_content_filter_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailIncomingTrafficSummaryThreatContentFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_traffic_summary_threat_content_filter_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_traffic_summary/threat_content_filter', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingTrafficSummaryThreatContentFilter',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_traffic_summary_total_clean_recipients_get(self, **kwargs):  # noqa: E501
        """mail incoming traffic summary total clean recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_traffic_summary_total_clean_recipients_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailIncomingTrafficSummaryTotalCleanRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_traffic_summary_total_clean_recipients_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_traffic_summary_total_clean_recipients_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_traffic_summary_total_clean_recipients_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming traffic summary total clean recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_traffic_summary_total_clean_recipients_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailIncomingTrafficSummaryTotalCleanRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_traffic_summary_total_clean_recipients_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_traffic_summary/total_clean_recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingTrafficSummaryTotalCleanRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_traffic_summary_total_graymail_recipients_get(self, **kwargs):  # noqa: E501
        """mail incoming traffic summary total graymail recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_traffic_summary_total_graymail_recipients_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailIncomingTrafficSummaryTotalGraymailRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_traffic_summary_total_graymail_recipients_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_traffic_summary_total_graymail_recipients_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_traffic_summary_total_graymail_recipients_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming traffic summary total graymail recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_traffic_summary_total_graymail_recipients_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailIncomingTrafficSummaryTotalGraymailRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_traffic_summary_total_graymail_recipients_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_traffic_summary/total_graymail_recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingTrafficSummaryTotalGraymailRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_traffic_summary_total_recipients_get(self, **kwargs):  # noqa: E501
        """mail incoming traffic summary total recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_traffic_summary_total_recipients_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailIncomingTrafficSummaryTotalRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_traffic_summary_total_recipients_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_traffic_summary_total_recipients_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_traffic_summary_total_recipients_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming traffic summary total recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_traffic_summary_total_recipients_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailIncomingTrafficSummaryTotalRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_traffic_summary_total_recipients_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_traffic_summary/total_recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingTrafficSummaryTotalRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_traffic_summary_total_threat_recipients_get(self, **kwargs):  # noqa: E501
        """mail incoming traffic summary total threat recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_traffic_summary_total_threat_recipients_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailIncomingTrafficSummaryTotalThreatRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_traffic_summary_total_threat_recipients_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_traffic_summary_total_threat_recipients_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_traffic_summary_total_threat_recipients_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming traffic summary total threat recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_traffic_summary_total_threat_recipients_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailIncomingTrafficSummaryTotalThreatRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_traffic_summary_total_threat_recipients_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_traffic_summary/total_threat_recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingTrafficSummaryTotalThreatRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_traffic_summary_verif_decrypt_fail_get(self, **kwargs):  # noqa: E501
        """mail incoming traffic summary verif decrypt fail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_traffic_summary_verif_decrypt_fail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailIncomingTrafficSummaryVerifDecryptFail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_traffic_summary_verif_decrypt_fail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_traffic_summary_verif_decrypt_fail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_traffic_summary_verif_decrypt_fail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming traffic summary verif decrypt fail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_traffic_summary_verif_decrypt_fail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailIncomingTrafficSummaryVerifDecryptFail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_traffic_summary_verif_decrypt_fail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_traffic_summary/verif_decrypt_fail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingTrafficSummaryVerifDecryptFail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_traffic_summary_verif_decrypt_success_get(self, **kwargs):  # noqa: E501
        """mail incoming traffic summary verif decrypt success  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_traffic_summary_verif_decrypt_success_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailIncomingTrafficSummaryVerifDecryptSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_traffic_summary_verif_decrypt_success_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_traffic_summary_verif_decrypt_success_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_traffic_summary_verif_decrypt_success_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming traffic summary verif decrypt success  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_traffic_summary_verif_decrypt_success_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailIncomingTrafficSummaryVerifDecryptSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_traffic_summary_verif_decrypt_success_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_traffic_summary/verif_decrypt_success', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingTrafficSummaryVerifDecryptSuccess',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_urlclick_track_details_get(self, **kwargs):  # noqa: E501
        """mail incoming urlclick track details rewrite reason  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_urlclick_track_details_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingUrlclickTrackDetailsRewriteReason
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_urlclick_track_details_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_urlclick_track_details_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_urlclick_track_details_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming urlclick track details rewrite reason  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_urlclick_track_details_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingUrlclickTrackDetailsRewriteReason
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_urlclick_track_details_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_urlclick_track_details', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingUrlclickTrackDetailsRewriteReason',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_urlclick_track_details_rewrite_reason_get(self, **kwargs):  # noqa: E501
        """mail incoming urlclick track details rewrite reason  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_urlclick_track_details_rewrite_reason_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingUrlclickTrackDetailsRewriteReason
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_urlclick_track_details_rewrite_reason_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_urlclick_track_details_rewrite_reason_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_urlclick_track_details_rewrite_reason_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming urlclick track details rewrite reason  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_urlclick_track_details_rewrite_reason_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingUrlclickTrackDetailsRewriteReason
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_urlclick_track_details_rewrite_reason_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_urlclick_track_details/rewrite_reason', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingUrlclickTrackDetailsRewriteReason',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_web_interaction_track_malicious_users_get(self, **kwargs):  # noqa: E501
        """mail incoming web interaction track malicious users users count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_web_interaction_track_malicious_users_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingWebInteractionTrackMaliciousUsersUsersCount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_web_interaction_track_malicious_users_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_web_interaction_track_malicious_users_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_web_interaction_track_malicious_users_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming web interaction track malicious users users count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_web_interaction_track_malicious_users_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingWebInteractionTrackMaliciousUsersUsersCount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_web_interaction_track_malicious_users_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_web_interaction_track_malicious_users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingWebInteractionTrackMaliciousUsersUsersCount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_web_interaction_track_malicious_users_users_count_get(self, **kwargs):  # noqa: E501
        """mail incoming web interaction track malicious users users count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_web_interaction_track_malicious_users_users_count_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingWebInteractionTrackMaliciousUsersUsersCount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_web_interaction_track_malicious_users_users_count_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_web_interaction_track_malicious_users_users_count_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_web_interaction_track_malicious_users_users_count_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming web interaction track malicious users users count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_web_interaction_track_malicious_users_users_count_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingWebInteractionTrackMaliciousUsersUsersCount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_web_interaction_track_malicious_users_users_count_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_web_interaction_track_malicious_users/users_count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingWebInteractionTrackMaliciousUsersUsersCount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_web_interaction_track_urls_allowed_get(self, **kwargs):  # noqa: E501
        """mail incoming web interaction track urls allowed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_web_interaction_track_urls_allowed_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingWebInteractionTrackUrlsAllowed
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_web_interaction_track_urls_allowed_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_web_interaction_track_urls_allowed_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_web_interaction_track_urls_allowed_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming web interaction track urls allowed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_web_interaction_track_urls_allowed_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingWebInteractionTrackUrlsAllowed
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_web_interaction_track_urls_allowed_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_web_interaction_track_urls/allowed', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingWebInteractionTrackUrlsAllowed',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_web_interaction_track_urls_blocked_get(self, **kwargs):  # noqa: E501
        """mail incoming web interaction track urls blocked  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_web_interaction_track_urls_blocked_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingWebInteractionTrackUrlsBlocked
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_web_interaction_track_urls_blocked_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_web_interaction_track_urls_blocked_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_web_interaction_track_urls_blocked_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming web interaction track urls blocked  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_web_interaction_track_urls_blocked_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingWebInteractionTrackUrlsBlocked
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_web_interaction_track_urls_blocked_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_web_interaction_track_urls/blocked', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingWebInteractionTrackUrlsBlocked',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_web_interaction_track_urls_get(self, **kwargs):  # noqa: E501
        """mail incoming web interaction track urls allowed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_web_interaction_track_urls_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingWebInteractionTrackUrlsAllowed
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_web_interaction_track_urls_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_web_interaction_track_urls_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_web_interaction_track_urls_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming web interaction track urls allowed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_web_interaction_track_urls_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingWebInteractionTrackUrlsAllowed
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_web_interaction_track_urls_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_web_interaction_track_urls', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingWebInteractionTrackUrlsAllowed',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_web_interaction_track_urls_msg_count_get(self, **kwargs):  # noqa: E501
        """mail incoming web interaction track urls msg count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_web_interaction_track_urls_msg_count_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingWebInteractionTrackUrlsMsgCount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_web_interaction_track_urls_msg_count_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_web_interaction_track_urls_msg_count_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_web_interaction_track_urls_msg_count_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming web interaction track urls msg count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_web_interaction_track_urls_msg_count_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingWebInteractionTrackUrlsMsgCount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_web_interaction_track_urls_msg_count_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_web_interaction_track_urls/msg_count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingWebInteractionTrackUrlsMsgCount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_incoming_web_interaction_track_urls_unknown_get(self, **kwargs):  # noqa: E501
        """mail incoming web interaction track urls unknown  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_web_interaction_track_urls_unknown_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingWebInteractionTrackUrlsUnknown
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_incoming_web_interaction_track_urls_unknown_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_incoming_web_interaction_track_urls_unknown_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_incoming_web_interaction_track_urls_unknown_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail incoming web interaction track urls unknown  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_incoming_web_interaction_track_urls_unknown_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailIncomingWebInteractionTrackUrlsUnknown
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_incoming_web_interaction_track_urls_unknown_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_incoming_web_interaction_track_urls/unknown', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailIncomingWebInteractionTrackUrlsUnknown',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_mailbox_auto_remediation_action_get(self, **kwargs):  # noqa: E501
        """mail mailbox auto remediation action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_mailbox_auto_remediation_action_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailMailboxAutoRemediationAction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_mailbox_auto_remediation_action_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_mailbox_auto_remediation_action_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_mailbox_auto_remediation_action_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail mailbox auto remediation action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_mailbox_auto_remediation_action_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailMailboxAutoRemediationAction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_mailbox_auto_remediation_action_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_mailbox_auto_remediation/action', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailMailboxAutoRemediationAction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_mailbox_auto_remediation_completed_timestamp_get(self, **kwargs):  # noqa: E501
        """mail mailbox auto remediation completed timestamp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_mailbox_auto_remediation_completed_timestamp_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailMailboxAutoRemediationCompletedTimestamp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_mailbox_auto_remediation_completed_timestamp_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_mailbox_auto_remediation_completed_timestamp_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_mailbox_auto_remediation_completed_timestamp_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail mailbox auto remediation completed timestamp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_mailbox_auto_remediation_completed_timestamp_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailMailboxAutoRemediationCompletedTimestamp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_mailbox_auto_remediation_completed_timestamp_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_mailbox_auto_remediation/completed_timestamp', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailMailboxAutoRemediationCompletedTimestamp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_mailbox_auto_remediation_filenames_get(self, **kwargs):  # noqa: E501
        """mail mailbox auto remediation filenames  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_mailbox_auto_remediation_filenames_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailMailboxAutoRemediationFilenames
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_mailbox_auto_remediation_filenames_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_mailbox_auto_remediation_filenames_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_mailbox_auto_remediation_filenames_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail mailbox auto remediation filenames  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_mailbox_auto_remediation_filenames_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailMailboxAutoRemediationFilenames
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_mailbox_auto_remediation_filenames_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_mailbox_auto_remediation/filenames', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailMailboxAutoRemediationFilenames',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_mailbox_auto_remediation_get(self, **kwargs):  # noqa: E501
        """mail mailbox auto remediation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_mailbox_auto_remediation_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailMailboxAutoRemediation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_mailbox_auto_remediation_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_mailbox_auto_remediation_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_mailbox_auto_remediation_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail mailbox auto remediation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_mailbox_auto_remediation_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailMailboxAutoRemediation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_mailbox_auto_remediation_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_mailbox_auto_remediation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailMailboxAutoRemediation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_mailbox_auto_remediation_rcpts_failure_get(self, **kwargs):  # noqa: E501
        """mail mailbox auto remediation rcpts failure  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_mailbox_auto_remediation_rcpts_failure_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailMailboxAutoRemediationRcptsFailure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_mailbox_auto_remediation_rcpts_failure_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_mailbox_auto_remediation_rcpts_failure_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_mailbox_auto_remediation_rcpts_failure_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail mailbox auto remediation rcpts failure  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_mailbox_auto_remediation_rcpts_failure_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailMailboxAutoRemediationRcptsFailure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_mailbox_auto_remediation_rcpts_failure_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_mailbox_auto_remediation/rcpts_failure', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailMailboxAutoRemediationRcptsFailure',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_mailbox_auto_remediation_rcpts_success_get(self, **kwargs):  # noqa: E501
        """mail mailbox auto remediation rcpts success  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_mailbox_auto_remediation_rcpts_success_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailMailboxAutoRemediationRcptsSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_mailbox_auto_remediation_rcpts_success_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_mailbox_auto_remediation_rcpts_success_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_mailbox_auto_remediation_rcpts_success_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail mailbox auto remediation rcpts success  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_mailbox_auto_remediation_rcpts_success_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailMailboxAutoRemediationRcptsSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_mailbox_auto_remediation_rcpts_success_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_mailbox_auto_remediation/rcpts_success', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailMailboxAutoRemediationRcptsSuccess',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_mar_summary_get(self, **kwargs):  # noqa: E501
        """summary of the mailbox auto remediated messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_mar_summary_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailMarSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_mar_summary_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_mar_summary_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_mar_summary_get_with_http_info(self, **kwargs):  # noqa: E501
        """summary of the mailbox auto remediated messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_mar_summary_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailMarSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_mar_summary_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_mar_summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailMarSummary',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_md_attachment_incoming_file_type_get(self, **kwargs):  # noqa: E501
        """mail md attachment incoming file type total recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_md_attachment_incoming_file_type_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailMdAttachmentIncomingFileTypeTotalRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_md_attachment_incoming_file_type_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_md_attachment_incoming_file_type_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_md_attachment_incoming_file_type_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail md attachment incoming file type total recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_md_attachment_incoming_file_type_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailMdAttachmentIncomingFileTypeTotalRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_md_attachment_incoming_file_type_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_md_attachment_incoming_file_type', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailMdAttachmentIncomingFileTypeTotalRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_md_attachment_incoming_file_type_total_recipients_get(self, **kwargs):  # noqa: E501
        """mail md attachment incoming file type total recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_md_attachment_incoming_file_type_total_recipients_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailMdAttachmentIncomingFileTypeTotalRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_md_attachment_incoming_file_type_total_recipients_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_md_attachment_incoming_file_type_total_recipients_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_md_attachment_incoming_file_type_total_recipients_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail md attachment incoming file type total recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_md_attachment_incoming_file_type_total_recipients_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailMdAttachmentIncomingFileTypeTotalRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_md_attachment_incoming_file_type_total_recipients_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_md_attachment_incoming_file_type/total_recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailMdAttachmentIncomingFileTypeTotalRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_md_attachment_outgoing_file_type_get(self, **kwargs):  # noqa: E501
        """mail md attachment outgoing file type total recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_md_attachment_outgoing_file_type_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailMdAttachmentOutgoingFileTypeTotalRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_md_attachment_outgoing_file_type_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_md_attachment_outgoing_file_type_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_md_attachment_outgoing_file_type_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail md attachment outgoing file type total recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_md_attachment_outgoing_file_type_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailMdAttachmentOutgoingFileTypeTotalRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_md_attachment_outgoing_file_type_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_md_attachment_outgoing_file_type', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailMdAttachmentOutgoingFileTypeTotalRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_md_attachment_outgoing_file_type_total_recipients_get(self, **kwargs):  # noqa: E501
        """mail md attachment outgoing file type total recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_md_attachment_outgoing_file_type_total_recipients_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailMdAttachmentOutgoingFileTypeTotalRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_md_attachment_outgoing_file_type_total_recipients_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_md_attachment_outgoing_file_type_total_recipients_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_md_attachment_outgoing_file_type_total_recipients_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail md attachment outgoing file type total recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_md_attachment_outgoing_file_type_total_recipients_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailMdAttachmentOutgoingFileTypeTotalRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_md_attachment_outgoing_file_type_total_recipients_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_md_attachment_outgoing_file_type/total_recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailMdAttachmentOutgoingFileTypeTotalRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_mor_batch_summary_get(self, **kwargs):  # noqa: E501
        """Details of On demand remediated messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_mor_batch_summary_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailMorBatchSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_mor_batch_summary_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_mor_batch_summary_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_mor_batch_summary_get_with_http_info(self, **kwargs):  # noqa: E501
        """Details of On demand remediated messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_mor_batch_summary_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailMorBatchSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_mor_batch_summary_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_mor_batch_summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailMorBatchSummary',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_mor_summary_get(self, **kwargs):  # noqa: E501
        """summary of the mailbox on demand remediated messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_mor_summary_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailMorSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_mor_summary_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_mor_summary_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_mor_summary_get_with_http_info(self, **kwargs):  # noqa: E501
        """summary of the mailbox on demand remediated messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_mor_summary_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailMorSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_mor_summary_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_mor_summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailMorSummary',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_msg_filter_stats_get(self, **kwargs):  # noqa: E501
        """mail msg filter stats num matches  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_msg_filter_stats_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailMsgFilterStatsNumMatches
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_msg_filter_stats_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_msg_filter_stats_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_msg_filter_stats_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail msg filter stats num matches  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_msg_filter_stats_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailMsgFilterStatsNumMatches
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_msg_filter_stats_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_msg_filter_stats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailMsgFilterStatsNumMatches',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_msg_filter_stats_num_matches_get(self, **kwargs):  # noqa: E501
        """mail msg filter stats num matches  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_msg_filter_stats_num_matches_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailMsgFilterStatsNumMatches
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_msg_filter_stats_num_matches_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_msg_filter_stats_num_matches_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_msg_filter_stats_num_matches_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail msg filter stats num matches  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_msg_filter_stats_num_matches_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailMsgFilterStatsNumMatches
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_msg_filter_stats_num_matches_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_msg_filter_stats/num_matches', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailMsgFilterStatsNumMatches',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_outgoing_amp_summary_blockedlist_get(self, **kwargs):  # noqa: E501
        """mail outgoing amp summary blocked list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_amp_summary_blockedlist_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingAmpSummaryBlockedlist
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_outgoing_amp_summary_blockedlist_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_outgoing_amp_summary_blockedlist_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_outgoing_amp_summary_blockedlist_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail outgoing amp summary blocked list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_amp_summary_blockedlist_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingAmpSummaryBlockedlist
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_outgoing_amp_summary_blockedlist_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_outgoing_amp_summary/blockedlist', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailOutgoingAmpSummaryBlockedlist',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_outgoing_amp_summary_clamav_lowrisk_get(self, **kwargs):  # noqa: E501
        """mail outgoing amp summary clamav lowrisk  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_amp_summary_clamav_lowrisk_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingAmpSummaryClamavLowrisk
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_outgoing_amp_summary_clamav_lowrisk_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_outgoing_amp_summary_clamav_lowrisk_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_outgoing_amp_summary_clamav_lowrisk_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail outgoing amp summary clamav lowrisk  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_amp_summary_clamav_lowrisk_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingAmpSummaryClamavLowrisk
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_outgoing_amp_summary_clamav_lowrisk_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_outgoing_amp_summary/clamav_lowrisk', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailOutgoingAmpSummaryClamavLowrisk',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_outgoing_amp_summary_clean_get(self, **kwargs):  # noqa: E501
        """mail outgoing amp summary clean  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_amp_summary_clean_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingAmpSummaryClean
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_outgoing_amp_summary_clean_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_outgoing_amp_summary_clean_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_outgoing_amp_summary_clean_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail outgoing amp summary clean  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_amp_summary_clean_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingAmpSummaryClean
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_outgoing_amp_summary_clean_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_outgoing_amp_summary/clean', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailOutgoingAmpSummaryClean',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_outgoing_amp_summary_custom_threshold_get(self, **kwargs):  # noqa: E501
        """mail outgoing amp summary custom threshold  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_amp_summary_custom_threshold_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingAmpSummaryCustomThreshold
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_outgoing_amp_summary_custom_threshold_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_outgoing_amp_summary_custom_threshold_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_outgoing_amp_summary_custom_threshold_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail outgoing amp summary custom threshold  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_amp_summary_custom_threshold_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingAmpSummaryCustomThreshold
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_outgoing_amp_summary_custom_threshold_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_outgoing_amp_summary/custom_threshold', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailOutgoingAmpSummaryCustomThreshold',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_outgoing_amp_summary_get(self, **kwargs):  # noqa: E501
        """mail outgoing amp summary unscannable  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_amp_summary_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingAmpSummaryUnscannable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_outgoing_amp_summary_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_outgoing_amp_summary_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_outgoing_amp_summary_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail outgoing amp summary unscannable  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_amp_summary_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingAmpSummaryUnscannable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_outgoing_amp_summary_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_outgoing_amp_summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailOutgoingAmpSummaryUnscannable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_outgoing_amp_summary_lowrisk_get(self, **kwargs):  # noqa: E501
        """mail outgoing amp summary lowrisk  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_amp_summary_lowrisk_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingAmpSummaryLowrisk
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_outgoing_amp_summary_lowrisk_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_outgoing_amp_summary_lowrisk_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_outgoing_amp_summary_lowrisk_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail outgoing amp summary lowrisk  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_amp_summary_lowrisk_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingAmpSummaryLowrisk
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_outgoing_amp_summary_lowrisk_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_outgoing_amp_summary/lowrisk', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailOutgoingAmpSummaryLowrisk',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_outgoing_amp_summary_malware_get(self, **kwargs):  # noqa: E501
        """mail outgoing amp summary malware  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_amp_summary_malware_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingAmpSummaryMalware
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_outgoing_amp_summary_malware_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_outgoing_amp_summary_malware_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_outgoing_amp_summary_malware_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail outgoing amp summary malware  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_amp_summary_malware_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingAmpSummaryMalware
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_outgoing_amp_summary_malware_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_outgoing_amp_summary/malware', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailOutgoingAmpSummaryMalware',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_outgoing_amp_summary_unknown_get(self, **kwargs):  # noqa: E501
        """mail outgoing amp summary unknown  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_amp_summary_unknown_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingAmpSummaryUnknown
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_outgoing_amp_summary_unknown_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_outgoing_amp_summary_unknown_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_outgoing_amp_summary_unknown_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail outgoing amp summary unknown  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_amp_summary_unknown_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingAmpSummaryUnknown
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_outgoing_amp_summary_unknown_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_outgoing_amp_summary/unknown', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailOutgoingAmpSummaryUnknown',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_outgoing_amp_summary_unscannable_get(self, **kwargs):  # noqa: E501
        """mail outgoing amp summary unscannable  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_amp_summary_unscannable_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingAmpSummaryUnscannable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_outgoing_amp_summary_unscannable_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_outgoing_amp_summary_unscannable_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_outgoing_amp_summary_unscannable_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail outgoing amp summary unscannable  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_amp_summary_unscannable_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingAmpSummaryUnscannable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_outgoing_amp_summary_unscannable_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_outgoing_amp_summary/unscannable', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailOutgoingAmpSummaryUnscannable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_amp_verdict_time_get(self, **kwargs):  # noqa: E501
        """mail outgoing malware threat file detail by filename amp verdict time  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_amp_verdict_time_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingMalwareThreatFileDetailByFilenameAmpVerdictTime
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_amp_verdict_time_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_amp_verdict_time_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_amp_verdict_time_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail outgoing malware threat file detail by filename amp verdict time  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_amp_verdict_time_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingMalwareThreatFileDetailByFilenameAmpVerdictTime
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_amp_verdict_time_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_outgoing_malware_threat_file_detail_by_filename/amp_verdict_time', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailOutgoingMalwareThreatFileDetailByFilenameAmpVerdictTime',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_console_url_get(self, **kwargs):  # noqa: E501
        """mail outgoing malware threat file detail by filename console url  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_console_url_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingMalwareThreatFileDetailByFilenameConsoleUrl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_console_url_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_console_url_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_console_url_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail outgoing malware threat file detail by filename console url  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_console_url_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingMalwareThreatFileDetailByFilenameConsoleUrl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_console_url_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_outgoing_malware_threat_file_detail_by_filename/console_url', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailOutgoingMalwareThreatFileDetailByFilenameConsoleUrl',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_detected_amp_get(self, **kwargs):  # noqa: E501
        """mail outgoing malware threat file detail by filename detected amp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_detected_amp_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingMalwareThreatFileDetailByFilenameDetectedAmp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_detected_amp_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_detected_amp_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_detected_amp_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail outgoing malware threat file detail by filename detected amp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_detected_amp_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingMalwareThreatFileDetailByFilenameDetectedAmp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_detected_amp_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_outgoing_malware_threat_file_detail_by_filename/detected_amp', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailOutgoingMalwareThreatFileDetailByFilenameDetectedAmp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_get(self, **kwargs):  # noqa: E501
        """mail outgoing malware threat file detail by filename detected amp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingMalwareThreatFileDetailByFilenameDetectedAmp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail outgoing malware threat file detail by filename detected amp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingMalwareThreatFileDetailByFilenameDetectedAmp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_outgoing_malware_threat_file_detail_by_filename', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailOutgoingMalwareThreatFileDetailByFilenameDetectedAmp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_score_get(self, **kwargs):  # noqa: E501
        """mail outgoing malware threat file detail by filename score  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_score_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingMalwareThreatFileDetailByFilenameScore
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_score_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_score_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_score_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail outgoing malware threat file detail by filename score  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_score_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingMalwareThreatFileDetailByFilenameScore
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_score_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_outgoing_malware_threat_file_detail_by_filename/score', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailOutgoingMalwareThreatFileDetailByFilenameScore',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_threat_name_get(self, **kwargs):  # noqa: E501
        """mail outgoing malware threat file detail by filename threat name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_threat_name_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingMalwareThreatFileDetailByFilenameThreatName
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_threat_name_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_threat_name_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_threat_name_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail outgoing malware threat file detail by filename threat name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_threat_name_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingMalwareThreatFileDetailByFilenameThreatName
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_threat_name_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_outgoing_malware_threat_file_detail_by_filename/threat_name', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailOutgoingMalwareThreatFileDetailByFilenameThreatName',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_threat_type_get(self, **kwargs):  # noqa: E501
        """mail outgoing malware threat file detail by filename threat type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_threat_type_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingMalwareThreatFileDetailByFilenameThreatType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_threat_type_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_threat_type_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_threat_type_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail outgoing malware threat file detail by filename threat type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_threat_type_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingMalwareThreatFileDetailByFilenameThreatType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_threat_type_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_outgoing_malware_threat_file_detail_by_filename/threat_type', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailOutgoingMalwareThreatFileDetailByFilenameThreatType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_upload_flag_get(self, **kwargs):  # noqa: E501
        """mail outgoing malware threat file detail by filename upload flag  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_upload_flag_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingMalwareThreatFileDetailByFilenameUploadFlag
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_upload_flag_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_upload_flag_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_upload_flag_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail outgoing malware threat file detail by filename upload flag  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_upload_flag_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingMalwareThreatFileDetailByFilenameUploadFlag
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_by_filename_upload_flag_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_outgoing_malware_threat_file_detail_by_filename/upload_flag', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailOutgoingMalwareThreatFileDetailByFilenameUploadFlag',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_summary_detected_amp_files_get(self, **kwargs):  # noqa: E501
        """mail outgoing malware threat file detail summary detected amp files  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_summary_detected_amp_files_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingMalwareThreatFileDetailSummaryDetectedAmpFiles
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_summary_detected_amp_files_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_summary_detected_amp_files_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_summary_detected_amp_files_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail outgoing malware threat file detail summary detected amp files  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_summary_detected_amp_files_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingMalwareThreatFileDetailSummaryDetectedAmpFiles
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_summary_detected_amp_files_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_outgoing_malware_threat_file_detail_summary/detected_amp_files', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailOutgoingMalwareThreatFileDetailSummaryDetectedAmpFiles',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_summary_detected_amp_get(self, **kwargs):  # noqa: E501
        """mail outgoing malware threat file detail summary detected amp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_summary_detected_amp_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingMalwareThreatFileDetailSummaryDetectedAmp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_summary_detected_amp_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_summary_detected_amp_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_summary_detected_amp_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail outgoing malware threat file detail summary detected amp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_summary_detected_amp_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingMalwareThreatFileDetailSummaryDetectedAmp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_summary_detected_amp_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_outgoing_malware_threat_file_detail_summary/detected_amp', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailOutgoingMalwareThreatFileDetailSummaryDetectedAmp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_summary_get(self, **kwargs):  # noqa: E501
        """mail outgoing malware threat file detail summary detected amp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_summary_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingMalwareThreatFileDetailSummaryDetectedAmp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_summary_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_summary_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_summary_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail outgoing malware threat file detail summary detected amp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_summary_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingMalwareThreatFileDetailSummaryDetectedAmp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_outgoing_malware_threat_file_detail_summary_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_outgoing_malware_threat_file_detail_summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailOutgoingMalwareThreatFileDetailSummaryDetectedAmp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_outgoing_traffic_summary_detected_amp_get(self, **kwargs):  # noqa: E501
        """mail outgoing traffic summary detected amp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_traffic_summary_detected_amp_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailOutgoingTrafficSummaryDetectedAmp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_outgoing_traffic_summary_detected_amp_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_outgoing_traffic_summary_detected_amp_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_outgoing_traffic_summary_detected_amp_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail outgoing traffic summary detected amp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_traffic_summary_detected_amp_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailOutgoingTrafficSummaryDetectedAmp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_outgoing_traffic_summary_detected_amp_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_outgoing_traffic_summary/detected_amp', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailOutgoingTrafficSummaryDetectedAmp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_outgoing_traffic_summary_detected_spam_get(self, **kwargs):  # noqa: E501
        """mail outgoing traffic summary detected spam  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_traffic_summary_detected_spam_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailOutgoingTrafficSummaryDetectedSpam
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_outgoing_traffic_summary_detected_spam_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_outgoing_traffic_summary_detected_spam_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_outgoing_traffic_summary_detected_spam_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail outgoing traffic summary detected spam  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_traffic_summary_detected_spam_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailOutgoingTrafficSummaryDetectedSpam
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_outgoing_traffic_summary_detected_spam_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_outgoing_traffic_summary/detected_spam', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailOutgoingTrafficSummaryDetectedSpam',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_outgoing_traffic_summary_detected_virus_get(self, **kwargs):  # noqa: E501
        """mail outgoing traffic summary detected virus  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_traffic_summary_detected_virus_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailOutgoingTrafficSummaryDetectedVirus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_outgoing_traffic_summary_detected_virus_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_outgoing_traffic_summary_detected_virus_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_outgoing_traffic_summary_detected_virus_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail outgoing traffic summary detected virus  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_traffic_summary_detected_virus_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailOutgoingTrafficSummaryDetectedVirus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_outgoing_traffic_summary_detected_virus_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_outgoing_traffic_summary/detected_virus', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailOutgoingTrafficSummaryDetectedVirus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_outgoing_traffic_summary_get(self, **kwargs):  # noqa: E501
        """mail outgoing traffic summary total hard bounces  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_traffic_summary_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailOutgoingTrafficSummaryTotalHardBounces
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_outgoing_traffic_summary_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_outgoing_traffic_summary_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_outgoing_traffic_summary_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail outgoing traffic summary total hard bounces  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_traffic_summary_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailOutgoingTrafficSummaryTotalHardBounces
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_outgoing_traffic_summary_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_outgoing_traffic_summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailOutgoingTrafficSummaryTotalHardBounces',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_outgoing_traffic_summary_ims_spam_increment_over_case_get(self, **kwargs):  # noqa: E501
        """mail outgoing traffic summary ims spam increment over case  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_traffic_summary_ims_spam_increment_over_case_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailOutgoingTrafficSummaryImsSpamIncrementOverCase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_outgoing_traffic_summary_ims_spam_increment_over_case_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_outgoing_traffic_summary_ims_spam_increment_over_case_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_outgoing_traffic_summary_ims_spam_increment_over_case_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail outgoing traffic summary ims spam increment over case  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_traffic_summary_ims_spam_increment_over_case_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailOutgoingTrafficSummaryImsSpamIncrementOverCase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_outgoing_traffic_summary_ims_spam_increment_over_case_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_outgoing_traffic_summary/ims_spam_increment_over_case', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailOutgoingTrafficSummaryImsSpamIncrementOverCase',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_outgoing_traffic_summary_malicious_url_get(self, **kwargs):  # noqa: E501
        """mail outgoing traffic summary malicious url  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_traffic_summary_malicious_url_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailOutgoingTrafficSummaryMaliciousUrl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_outgoing_traffic_summary_malicious_url_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_outgoing_traffic_summary_malicious_url_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_outgoing_traffic_summary_malicious_url_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail outgoing traffic summary malicious url  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_traffic_summary_malicious_url_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailOutgoingTrafficSummaryMaliciousUrl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_outgoing_traffic_summary_malicious_url_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_outgoing_traffic_summary/malicious_url', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailOutgoingTrafficSummaryMaliciousUrl',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_outgoing_traffic_summary_threat_content_filter_get(self, **kwargs):  # noqa: E501
        """mail outgoing traffic summary threat content filter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_traffic_summary_threat_content_filter_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailOutgoingTrafficSummaryThreatContentFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_outgoing_traffic_summary_threat_content_filter_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_outgoing_traffic_summary_threat_content_filter_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_outgoing_traffic_summary_threat_content_filter_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail outgoing traffic summary threat content filter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_traffic_summary_threat_content_filter_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailOutgoingTrafficSummaryThreatContentFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_outgoing_traffic_summary_threat_content_filter_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_outgoing_traffic_summary/threat_content_filter', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailOutgoingTrafficSummaryThreatContentFilter',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_outgoing_traffic_summary_total_clean_recipients_get(self, **kwargs):  # noqa: E501
        """mail outgoing traffic summary total clean recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_traffic_summary_total_clean_recipients_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailOutgoingTrafficSummaryTotalCleanRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_outgoing_traffic_summary_total_clean_recipients_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_outgoing_traffic_summary_total_clean_recipients_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_outgoing_traffic_summary_total_clean_recipients_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail outgoing traffic summary total clean recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_traffic_summary_total_clean_recipients_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailOutgoingTrafficSummaryTotalCleanRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_outgoing_traffic_summary_total_clean_recipients_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_outgoing_traffic_summary/total_clean_recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailOutgoingTrafficSummaryTotalCleanRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_outgoing_traffic_summary_total_dlp_incidents_get(self, **kwargs):  # noqa: E501
        """mail outgoing traffic summary total dlp incidents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_traffic_summary_total_dlp_incidents_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailOutgoingTrafficSummaryTotalDlpIncidents
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_outgoing_traffic_summary_total_dlp_incidents_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_outgoing_traffic_summary_total_dlp_incidents_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_outgoing_traffic_summary_total_dlp_incidents_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail outgoing traffic summary total dlp incidents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_traffic_summary_total_dlp_incidents_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailOutgoingTrafficSummaryTotalDlpIncidents
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_outgoing_traffic_summary_total_dlp_incidents_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_outgoing_traffic_summary/total_dlp_incidents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailOutgoingTrafficSummaryTotalDlpIncidents',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_outgoing_traffic_summary_total_hard_bounces_get(self, **kwargs):  # noqa: E501
        """mail outgoing traffic summary total hard bounces  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_traffic_summary_total_hard_bounces_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailOutgoingTrafficSummaryTotalHardBounces
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_outgoing_traffic_summary_total_hard_bounces_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_outgoing_traffic_summary_total_hard_bounces_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_outgoing_traffic_summary_total_hard_bounces_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail outgoing traffic summary total hard bounces  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_traffic_summary_total_hard_bounces_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailOutgoingTrafficSummaryTotalHardBounces
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_outgoing_traffic_summary_total_hard_bounces_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_outgoing_traffic_summary/total_hard_bounces', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailOutgoingTrafficSummaryTotalHardBounces',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_outgoing_traffic_summary_total_recipients_delivered_get(self, **kwargs):  # noqa: E501
        """mail outgoing traffic summary total recipients delivered  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_traffic_summary_total_recipients_delivered_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailOutgoingTrafficSummaryTotalRecipientsDelivered
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_outgoing_traffic_summary_total_recipients_delivered_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_outgoing_traffic_summary_total_recipients_delivered_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_outgoing_traffic_summary_total_recipients_delivered_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail outgoing traffic summary total recipients delivered  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_traffic_summary_total_recipients_delivered_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailOutgoingTrafficSummaryTotalRecipientsDelivered
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_outgoing_traffic_summary_total_recipients_delivered_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_outgoing_traffic_summary/total_recipients_delivered', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailOutgoingTrafficSummaryTotalRecipientsDelivered',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_outgoing_traffic_summary_total_recipients_get(self, **kwargs):  # noqa: E501
        """mail outgoing traffic summary total recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_traffic_summary_total_recipients_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailOutgoingTrafficSummaryTotalRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_outgoing_traffic_summary_total_recipients_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_outgoing_traffic_summary_total_recipients_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_outgoing_traffic_summary_total_recipients_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail outgoing traffic summary total recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_traffic_summary_total_recipients_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailOutgoingTrafficSummaryTotalRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_outgoing_traffic_summary_total_recipients_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_outgoing_traffic_summary/total_recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailOutgoingTrafficSummaryTotalRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_outgoing_traffic_summary_total_recipients_processed_get(self, **kwargs):  # noqa: E501
        """mail outgoing traffic summary total recipients processed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_traffic_summary_total_recipients_processed_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailOutgoingTrafficSummaryTotalRecipientsProcessed
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_outgoing_traffic_summary_total_recipients_processed_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_outgoing_traffic_summary_total_recipients_processed_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_outgoing_traffic_summary_total_recipients_processed_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail outgoing traffic summary total recipients processed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_traffic_summary_total_recipients_processed_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailOutgoingTrafficSummaryTotalRecipientsProcessed
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_outgoing_traffic_summary_total_recipients_processed_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_outgoing_traffic_summary/total_recipients_processed', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailOutgoingTrafficSummaryTotalRecipientsProcessed',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_outgoing_urlclick_track_details_get(self, **kwargs):  # noqa: E501
        """mail outgoing urlclick track details rewrite reason  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_urlclick_track_details_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingUrlclickTrackDetailsRewriteReason
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_outgoing_urlclick_track_details_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_outgoing_urlclick_track_details_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_outgoing_urlclick_track_details_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail outgoing urlclick track details rewrite reason  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_urlclick_track_details_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingUrlclickTrackDetailsRewriteReason
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_outgoing_urlclick_track_details_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_outgoing_urlclick_track_details', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailOutgoingUrlclickTrackDetailsRewriteReason',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_outgoing_urlclick_track_details_rewrite_reason_get(self, **kwargs):  # noqa: E501
        """mail outgoing urlclick track details rewrite reason  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_urlclick_track_details_rewrite_reason_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingUrlclickTrackDetailsRewriteReason
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_outgoing_urlclick_track_details_rewrite_reason_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_outgoing_urlclick_track_details_rewrite_reason_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_outgoing_urlclick_track_details_rewrite_reason_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail outgoing urlclick track details rewrite reason  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_urlclick_track_details_rewrite_reason_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingUrlclickTrackDetailsRewriteReason
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_outgoing_urlclick_track_details_rewrite_reason_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_outgoing_urlclick_track_details/rewrite_reason', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailOutgoingUrlclickTrackDetailsRewriteReason',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_outgoing_web_interaction_track_malicious_users_get(self, **kwargs):  # noqa: E501
        """mail outgoing web interaction track malicious users users count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_web_interaction_track_malicious_users_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingWebInteractionTrackMaliciousUsersUsersCount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_outgoing_web_interaction_track_malicious_users_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_outgoing_web_interaction_track_malicious_users_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_outgoing_web_interaction_track_malicious_users_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail outgoing web interaction track malicious users users count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_web_interaction_track_malicious_users_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingWebInteractionTrackMaliciousUsersUsersCount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_outgoing_web_interaction_track_malicious_users_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_outgoing_web_interaction_track_malicious_users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailOutgoingWebInteractionTrackMaliciousUsersUsersCount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_outgoing_web_interaction_track_malicious_users_users_count_get(self, **kwargs):  # noqa: E501
        """mail outgoing web interaction track malicious users users count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_web_interaction_track_malicious_users_users_count_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingWebInteractionTrackMaliciousUsersUsersCount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_outgoing_web_interaction_track_malicious_users_users_count_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_outgoing_web_interaction_track_malicious_users_users_count_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_outgoing_web_interaction_track_malicious_users_users_count_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail outgoing web interaction track malicious users users count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_web_interaction_track_malicious_users_users_count_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingWebInteractionTrackMaliciousUsersUsersCount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_outgoing_web_interaction_track_malicious_users_users_count_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_outgoing_web_interaction_track_malicious_users/users_count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailOutgoingWebInteractionTrackMaliciousUsersUsersCount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_outgoing_web_interaction_track_urls_allowed_get(self, **kwargs):  # noqa: E501
        """mail outgoing web interaction track urls allowed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_web_interaction_track_urls_allowed_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingWebInteractionTrackUrlsAllowed
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_outgoing_web_interaction_track_urls_allowed_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_outgoing_web_interaction_track_urls_allowed_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_outgoing_web_interaction_track_urls_allowed_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail outgoing web interaction track urls allowed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_web_interaction_track_urls_allowed_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingWebInteractionTrackUrlsAllowed
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_outgoing_web_interaction_track_urls_allowed_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_outgoing_web_interaction_track_urls/allowed', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailOutgoingWebInteractionTrackUrlsAllowed',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_outgoing_web_interaction_track_urls_blocked_get(self, **kwargs):  # noqa: E501
        """mail outgoing web interaction track urls blocked  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_web_interaction_track_urls_blocked_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingWebInteractionTrackUrlsBlocked
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_outgoing_web_interaction_track_urls_blocked_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_outgoing_web_interaction_track_urls_blocked_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_outgoing_web_interaction_track_urls_blocked_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail outgoing web interaction track urls blocked  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_web_interaction_track_urls_blocked_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingWebInteractionTrackUrlsBlocked
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_outgoing_web_interaction_track_urls_blocked_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_outgoing_web_interaction_track_urls/blocked', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailOutgoingWebInteractionTrackUrlsBlocked',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_outgoing_web_interaction_track_urls_get(self, **kwargs):  # noqa: E501
        """mail outgoing web interaction track urls allowed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_web_interaction_track_urls_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingWebInteractionTrackUrlsAllowed
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_outgoing_web_interaction_track_urls_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_outgoing_web_interaction_track_urls_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_outgoing_web_interaction_track_urls_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail outgoing web interaction track urls allowed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_web_interaction_track_urls_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingWebInteractionTrackUrlsAllowed
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_outgoing_web_interaction_track_urls_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_outgoing_web_interaction_track_urls', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailOutgoingWebInteractionTrackUrlsAllowed',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_outgoing_web_interaction_track_urls_msg_count_get(self, **kwargs):  # noqa: E501
        """mail outgoing web interaction track urls msg count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_web_interaction_track_urls_msg_count_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingWebInteractionTrackUrlsMsgCount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_outgoing_web_interaction_track_urls_msg_count_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_outgoing_web_interaction_track_urls_msg_count_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_outgoing_web_interaction_track_urls_msg_count_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail outgoing web interaction track urls msg count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_web_interaction_track_urls_msg_count_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingWebInteractionTrackUrlsMsgCount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_outgoing_web_interaction_track_urls_msg_count_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_outgoing_web_interaction_track_urls/msg_count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailOutgoingWebInteractionTrackUrlsMsgCount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_outgoing_web_interaction_track_urls_unknown_get(self, **kwargs):  # noqa: E501
        """mail outgoing web interaction track urls unknown  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_web_interaction_track_urls_unknown_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingWebInteractionTrackUrlsUnknown
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_outgoing_web_interaction_track_urls_unknown_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_outgoing_web_interaction_track_urls_unknown_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_outgoing_web_interaction_track_urls_unknown_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail outgoing web interaction track urls unknown  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_outgoing_web_interaction_track_urls_unknown_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailOutgoingWebInteractionTrackUrlsUnknown
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_outgoing_web_interaction_track_urls_unknown_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_outgoing_web_interaction_track_urls/unknown', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailOutgoingWebInteractionTrackUrlsUnknown',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_policy_incoming_recipients_matched_get(self, **kwargs):  # noqa: E501
        """Incoming Mail policy based reporting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_policy_incoming_recipients_matched_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailPolicyIncoming
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_policy_incoming_recipients_matched_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_policy_incoming_recipients_matched_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_policy_incoming_recipients_matched_get_with_http_info(self, **kwargs):  # noqa: E501
        """Incoming Mail policy based reporting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_policy_incoming_recipients_matched_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailPolicyIncoming
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_policy_incoming_recipients_matched_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_policy_incoming/recipients_matched', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailPolicyIncoming',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_policy_outgoing_recipients_matched_get(self, **kwargs):  # noqa: E501
        """Outgoing Mail policy based reporting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_policy_outgoing_recipients_matched_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailPolicyOutgoing
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_policy_outgoing_recipients_matched_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_policy_outgoing_recipients_matched_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_policy_outgoing_recipients_matched_get_with_http_info(self, **kwargs):  # noqa: E501
        """Outgoing Mail policy based reporting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_policy_outgoing_recipients_matched_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailPolicyOutgoing
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_policy_outgoing_recipients_matched_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_policy_outgoing/recipients_matched', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailPolicyOutgoing',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_safeprint_details_get(self, **kwargs):  # noqa: E501
        """Safe Print original attachment details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_safeprint_details_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailSafeprintDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_safeprint_details_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_safeprint_details_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_safeprint_details_get_with_http_info(self, **kwargs):  # noqa: E501
        """Safe Print original attachment details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_safeprint_details_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailSafeprintDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_safeprint_details_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_safeprint_details', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSafeprintDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_security_summary_get(self, **kwargs):  # noqa: E501
        """mail security summary received conn tls fail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_security_summary_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSecuritySummaryReceivedConnTlsFail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_security_summary_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_security_summary_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_security_summary_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail security summary received conn tls fail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_security_summary_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSecuritySummaryReceivedConnTlsFail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_security_summary_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_security_summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSecuritySummaryReceivedConnTlsFail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_security_summary_received_conn_plain_get(self, **kwargs):  # noqa: E501
        """mail security summary received conn plain  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_security_summary_received_conn_plain_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSecuritySummaryReceivedConnPlain
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_security_summary_received_conn_plain_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_security_summary_received_conn_plain_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_security_summary_received_conn_plain_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail security summary received conn plain  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_security_summary_received_conn_plain_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSecuritySummaryReceivedConnPlain
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_security_summary_received_conn_plain_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_security_summary/received_conn_plain', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSecuritySummaryReceivedConnPlain',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_security_summary_received_conn_tls_fail_get(self, **kwargs):  # noqa: E501
        """mail security summary received conn tls fail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_security_summary_received_conn_tls_fail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSecuritySummaryReceivedConnTlsFail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_security_summary_received_conn_tls_fail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_security_summary_received_conn_tls_fail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_security_summary_received_conn_tls_fail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail security summary received conn tls fail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_security_summary_received_conn_tls_fail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSecuritySummaryReceivedConnTlsFail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_security_summary_received_conn_tls_fail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_security_summary/received_conn_tls_fail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSecuritySummaryReceivedConnTlsFail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_security_summary_received_conn_tls_opt_fail_get(self, **kwargs):  # noqa: E501
        """mail security summary received conn tls opt fail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_security_summary_received_conn_tls_opt_fail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSecuritySummaryReceivedConnTlsOptFail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_security_summary_received_conn_tls_opt_fail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_security_summary_received_conn_tls_opt_fail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_security_summary_received_conn_tls_opt_fail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail security summary received conn tls opt fail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_security_summary_received_conn_tls_opt_fail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSecuritySummaryReceivedConnTlsOptFail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_security_summary_received_conn_tls_opt_fail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_security_summary/received_conn_tls_opt_fail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSecuritySummaryReceivedConnTlsOptFail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_security_summary_received_conn_tls_opt_success_get(self, **kwargs):  # noqa: E501
        """mail security summary received conn tls opt success  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_security_summary_received_conn_tls_opt_success_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSecuritySummaryReceivedConnTlsOptSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_security_summary_received_conn_tls_opt_success_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_security_summary_received_conn_tls_opt_success_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_security_summary_received_conn_tls_opt_success_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail security summary received conn tls opt success  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_security_summary_received_conn_tls_opt_success_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSecuritySummaryReceivedConnTlsOptSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_security_summary_received_conn_tls_opt_success_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_security_summary/received_conn_tls_opt_success', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSecuritySummaryReceivedConnTlsOptSuccess',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_security_summary_received_conn_tls_success_get(self, **kwargs):  # noqa: E501
        """mail security summary received conn tls success  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_security_summary_received_conn_tls_success_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSecuritySummaryReceivedConnTlsSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_security_summary_received_conn_tls_success_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_security_summary_received_conn_tls_success_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_security_summary_received_conn_tls_success_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail security summary received conn tls success  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_security_summary_received_conn_tls_success_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSecuritySummaryReceivedConnTlsSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_security_summary_received_conn_tls_success_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_security_summary/received_conn_tls_success', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSecuritySummaryReceivedConnTlsSuccess',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_security_summary_received_conn_total_get(self, **kwargs):  # noqa: E501
        """mail security summary received conn total  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_security_summary_received_conn_total_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSecuritySummaryReceivedConnTotal
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_security_summary_received_conn_total_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_security_summary_received_conn_total_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_security_summary_received_conn_total_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail security summary received conn total  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_security_summary_received_conn_total_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSecuritySummaryReceivedConnTotal
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_security_summary_received_conn_total_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_security_summary/received_conn_total', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSecuritySummaryReceivedConnTotal',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_security_summary_received_encrypted_tls_get(self, **kwargs):  # noqa: E501
        """mail security summary received encrypted tls  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_security_summary_received_encrypted_tls_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSecuritySummaryReceivedEncryptedTls
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_security_summary_received_encrypted_tls_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_security_summary_received_encrypted_tls_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_security_summary_received_encrypted_tls_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail security summary received encrypted tls  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_security_summary_received_encrypted_tls_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSecuritySummaryReceivedEncryptedTls
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_security_summary_received_encrypted_tls_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_security_summary/received_encrypted_tls', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSecuritySummaryReceivedEncryptedTls',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_security_summary_received_total_get(self, **kwargs):  # noqa: E501
        """mail security summary received total  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_security_summary_received_total_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSecuritySummaryReceivedTotal
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_security_summary_received_total_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_security_summary_received_total_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_security_summary_received_total_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail security summary received total  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_security_summary_received_total_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSecuritySummaryReceivedTotal
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_security_summary_received_total_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_security_summary/received_total', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSecuritySummaryReceivedTotal',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_security_summary_received_unencrypted_get(self, **kwargs):  # noqa: E501
        """mail security summary received unencrypted  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_security_summary_received_unencrypted_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSecuritySummaryReceivedUnencrypted
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_security_summary_received_unencrypted_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_security_summary_received_unencrypted_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_security_summary_received_unencrypted_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail security summary received unencrypted  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_security_summary_received_unencrypted_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSecuritySummaryReceivedUnencrypted
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_security_summary_received_unencrypted_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_security_summary/received_unencrypted', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSecuritySummaryReceivedUnencrypted',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_security_summary_sent_conn_dane_fail_get(self, **kwargs):  # noqa: E501
        """mail security summary sent conn dane fail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_security_summary_sent_conn_dane_fail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSecuritySummarySentConnDaneFail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_security_summary_sent_conn_dane_fail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_security_summary_sent_conn_dane_fail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_security_summary_sent_conn_dane_fail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail security summary sent conn dane fail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_security_summary_sent_conn_dane_fail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSecuritySummarySentConnDaneFail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_security_summary_sent_conn_dane_fail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_security_summary/sent_conn_dane_fail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSecuritySummarySentConnDaneFail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_security_summary_sent_conn_dane_success_get(self, **kwargs):  # noqa: E501
        """mail security summary sent conn dane success  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_security_summary_sent_conn_dane_success_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSecuritySummarySentConnDaneSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_security_summary_sent_conn_dane_success_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_security_summary_sent_conn_dane_success_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_security_summary_sent_conn_dane_success_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail security summary sent conn dane success  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_security_summary_sent_conn_dane_success_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSecuritySummarySentConnDaneSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_security_summary_sent_conn_dane_success_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_security_summary/sent_conn_dane_success', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSecuritySummarySentConnDaneSuccess',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_security_summary_sent_conn_plain_get(self, **kwargs):  # noqa: E501
        """mail security summary sent conn plain  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_security_summary_sent_conn_plain_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSecuritySummarySentConnPlain
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_security_summary_sent_conn_plain_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_security_summary_sent_conn_plain_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_security_summary_sent_conn_plain_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail security summary sent conn plain  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_security_summary_sent_conn_plain_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSecuritySummarySentConnPlain
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_security_summary_sent_conn_plain_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_security_summary/sent_conn_plain', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSecuritySummarySentConnPlain',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_security_summary_sent_conn_tls_fail_get(self, **kwargs):  # noqa: E501
        """mail security summary sent conn tls fail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_security_summary_sent_conn_tls_fail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSecuritySummarySentConnTlsFail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_security_summary_sent_conn_tls_fail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_security_summary_sent_conn_tls_fail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_security_summary_sent_conn_tls_fail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail security summary sent conn tls fail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_security_summary_sent_conn_tls_fail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSecuritySummarySentConnTlsFail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_security_summary_sent_conn_tls_fail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_security_summary/sent_conn_tls_fail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSecuritySummarySentConnTlsFail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_security_summary_sent_conn_tls_opt_fail_get(self, **kwargs):  # noqa: E501
        """mail security summary sent conn tls opt fail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_security_summary_sent_conn_tls_opt_fail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSecuritySummarySentConnTlsOptFail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_security_summary_sent_conn_tls_opt_fail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_security_summary_sent_conn_tls_opt_fail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_security_summary_sent_conn_tls_opt_fail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail security summary sent conn tls opt fail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_security_summary_sent_conn_tls_opt_fail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSecuritySummarySentConnTlsOptFail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_security_summary_sent_conn_tls_opt_fail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_security_summary/sent_conn_tls_opt_fail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSecuritySummarySentConnTlsOptFail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_security_summary_sent_conn_tls_opt_success_get(self, **kwargs):  # noqa: E501
        """mail security summary sent conn tls opt success  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_security_summary_sent_conn_tls_opt_success_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSecuritySummarySentConnTlsOptSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_security_summary_sent_conn_tls_opt_success_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_security_summary_sent_conn_tls_opt_success_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_security_summary_sent_conn_tls_opt_success_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail security summary sent conn tls opt success  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_security_summary_sent_conn_tls_opt_success_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSecuritySummarySentConnTlsOptSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_security_summary_sent_conn_tls_opt_success_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_security_summary/sent_conn_tls_opt_success', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSecuritySummarySentConnTlsOptSuccess',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_security_summary_sent_conn_tls_success_get(self, **kwargs):  # noqa: E501
        """mail security summary sent conn tls success  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_security_summary_sent_conn_tls_success_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSecuritySummarySentConnTlsSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_security_summary_sent_conn_tls_success_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_security_summary_sent_conn_tls_success_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_security_summary_sent_conn_tls_success_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail security summary sent conn tls success  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_security_summary_sent_conn_tls_success_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSecuritySummarySentConnTlsSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_security_summary_sent_conn_tls_success_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_security_summary/sent_conn_tls_success', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSecuritySummarySentConnTlsSuccess',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_security_summary_sent_conn_total_get(self, **kwargs):  # noqa: E501
        """mail security summary sent conn total  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_security_summary_sent_conn_total_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSecuritySummarySentConnTotal
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_security_summary_sent_conn_total_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_security_summary_sent_conn_total_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_security_summary_sent_conn_total_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail security summary sent conn total  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_security_summary_sent_conn_total_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSecuritySummarySentConnTotal
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_security_summary_sent_conn_total_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_security_summary/sent_conn_total', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSecuritySummarySentConnTotal',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_security_summary_sent_encrypted_tls_get(self, **kwargs):  # noqa: E501
        """mail security summary sent encrypted tls  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_security_summary_sent_encrypted_tls_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSecuritySummarySentEncryptedTls
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_security_summary_sent_encrypted_tls_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_security_summary_sent_encrypted_tls_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_security_summary_sent_encrypted_tls_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail security summary sent encrypted tls  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_security_summary_sent_encrypted_tls_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSecuritySummarySentEncryptedTls
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_security_summary_sent_encrypted_tls_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_security_summary/sent_encrypted_tls', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSecuritySummarySentEncryptedTls',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_security_summary_sent_total_get(self, **kwargs):  # noqa: E501
        """mail security summary sent total  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_security_summary_sent_total_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSecuritySummarySentTotal
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_security_summary_sent_total_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_security_summary_sent_total_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_security_summary_sent_total_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail security summary sent total  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_security_summary_sent_total_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSecuritySummarySentTotal
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_security_summary_sent_total_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_security_summary/sent_total', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSecuritySummarySentTotal',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_security_summary_sent_unencrypted_get(self, **kwargs):  # noqa: E501
        """mail security summary sent unencrypted  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_security_summary_sent_unencrypted_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSecuritySummarySentUnencrypted
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_security_summary_sent_unencrypted_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_security_summary_sent_unencrypted_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_security_summary_sent_unencrypted_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail security summary sent unencrypted  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_security_summary_sent_unencrypted_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSecuritySummarySentUnencrypted
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_security_summary_sent_unencrypted_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_security_summary/sent_unencrypted', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSecuritySummarySentUnencrypted',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_sender_domain_detail_detected_amp_get(self, **kwargs):  # noqa: E501
        """mail sender domain detail detected amp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_domain_detail_detected_amp_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderDomainDetailDetectedAmp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_sender_domain_detail_detected_amp_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_sender_domain_detail_detected_amp_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_sender_domain_detail_detected_amp_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail sender domain detail detected amp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_domain_detail_detected_amp_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderDomainDetailDetectedAmp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_sender_domain_detail_detected_amp_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_sender_domain_detail/detected_amp', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSenderDomainDetailDetectedAmp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_sender_domain_detail_detected_spam_get(self, **kwargs):  # noqa: E501
        """mail sender domain detail detected spam  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_domain_detail_detected_spam_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderDomainDetailDetectedSpam
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_sender_domain_detail_detected_spam_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_sender_domain_detail_detected_spam_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_sender_domain_detail_detected_spam_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail sender domain detail detected spam  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_domain_detail_detected_spam_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderDomainDetailDetectedSpam
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_sender_domain_detail_detected_spam_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_sender_domain_detail/detected_spam', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSenderDomainDetailDetectedSpam',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_sender_domain_detail_detected_virus_get(self, **kwargs):  # noqa: E501
        """mail sender domain detail detected virus  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_domain_detail_detected_virus_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderDomainDetailDetectedVirus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_sender_domain_detail_detected_virus_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_sender_domain_detail_detected_virus_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_sender_domain_detail_detected_virus_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail sender domain detail detected virus  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_domain_detail_detected_virus_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderDomainDetailDetectedVirus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_sender_domain_detail_detected_virus_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_sender_domain_detail/detected_virus', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSenderDomainDetailDetectedVirus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_sender_domain_detail_get(self, **kwargs):  # noqa: E501
        """mail sender domain detail detected amp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_domain_detail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderDomainDetailDetectedAmp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_sender_domain_detail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_sender_domain_detail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_sender_domain_detail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail sender domain detail detected amp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_domain_detail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderDomainDetailDetectedAmp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_sender_domain_detail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_sender_domain_detail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSenderDomainDetailDetectedAmp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_sender_domain_detail_threat_content_filter_get(self, **kwargs):  # noqa: E501
        """mail sender domain detail threat content filter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_domain_detail_threat_content_filter_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderDomainDetailThreatContentFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_sender_domain_detail_threat_content_filter_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_sender_domain_detail_threat_content_filter_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_sender_domain_detail_threat_content_filter_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail sender domain detail threat content filter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_domain_detail_threat_content_filter_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderDomainDetailThreatContentFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_sender_domain_detail_threat_content_filter_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_sender_domain_detail/threat_content_filter', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSenderDomainDetailThreatContentFilter',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_sender_domain_detail_total_clean_recipients_get(self, **kwargs):  # noqa: E501
        """mail sender domain detail total clean recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_domain_detail_total_clean_recipients_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderDomainDetailTotalCleanRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_sender_domain_detail_total_clean_recipients_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_sender_domain_detail_total_clean_recipients_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_sender_domain_detail_total_clean_recipients_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail sender domain detail total clean recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_domain_detail_total_clean_recipients_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderDomainDetailTotalCleanRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_sender_domain_detail_total_clean_recipients_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_sender_domain_detail/total_clean_recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSenderDomainDetailTotalCleanRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_sender_domain_detail_total_dlp_incidents_get(self, **kwargs):  # noqa: E501
        """mail sender domain detail total dlp incidents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_domain_detail_total_dlp_incidents_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderDomainDetailTotalDlpIncidents
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_sender_domain_detail_total_dlp_incidents_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_sender_domain_detail_total_dlp_incidents_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_sender_domain_detail_total_dlp_incidents_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail sender domain detail total dlp incidents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_domain_detail_total_dlp_incidents_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderDomainDetailTotalDlpIncidents
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_sender_domain_detail_total_dlp_incidents_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_sender_domain_detail/total_dlp_incidents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSenderDomainDetailTotalDlpIncidents',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_sender_domain_detail_total_recipients_processed_get(self, **kwargs):  # noqa: E501
        """mail sender domain detail total recipients processed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_domain_detail_total_recipients_processed_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderDomainDetailTotalRecipientsProcessed
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_sender_domain_detail_total_recipients_processed_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_sender_domain_detail_total_recipients_processed_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_sender_domain_detail_total_recipients_processed_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail sender domain detail total recipients processed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_domain_detail_total_recipients_processed_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderDomainDetailTotalRecipientsProcessed
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_sender_domain_detail_total_recipients_processed_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_sender_domain_detail/total_recipients_processed', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSenderDomainDetailTotalRecipientsProcessed',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_sender_domain_detail_total_threat_recipients_get(self, **kwargs):  # noqa: E501
        """mail sender domain detail total threat recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_domain_detail_total_threat_recipients_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderDomainDetailTotalThreatRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_sender_domain_detail_total_threat_recipients_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_sender_domain_detail_total_threat_recipients_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_sender_domain_detail_total_threat_recipients_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail sender domain detail total threat recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_domain_detail_total_threat_recipients_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderDomainDetailTotalThreatRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_sender_domain_detail_total_threat_recipients_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_sender_domain_detail/total_threat_recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSenderDomainDetailTotalThreatRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_sender_domain_reputation_awful_get(self, **kwargs):  # noqa: E501
        """mail sender domain reputation awful  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_domain_reputation_awful_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderDomainReputationAwful
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_sender_domain_reputation_awful_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_sender_domain_reputation_awful_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_sender_domain_reputation_awful_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail sender domain reputation awful  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_domain_reputation_awful_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderDomainReputationAwful
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_sender_domain_reputation_awful_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_sender_domain_reputation/awful', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSenderDomainReputationAwful',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_sender_domain_reputation_get(self, **kwargs):  # noqa: E501
        """mail sender domain reputation unscannable  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_domain_reputation_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderDomainReputationUnscannable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_sender_domain_reputation_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_sender_domain_reputation_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_sender_domain_reputation_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail sender domain reputation unscannable  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_domain_reputation_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderDomainReputationUnscannable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_sender_domain_reputation_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_sender_domain_reputation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSenderDomainReputationUnscannable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_sender_domain_reputation_good_get(self, **kwargs):  # noqa: E501
        """mail sender domain reputation good  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_domain_reputation_good_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderDomainReputationGood
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_sender_domain_reputation_good_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_sender_domain_reputation_good_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_sender_domain_reputation_good_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail sender domain reputation good  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_domain_reputation_good_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderDomainReputationGood
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_sender_domain_reputation_good_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_sender_domain_reputation/good', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSenderDomainReputationGood',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_sender_domain_reputation_neutral_get(self, **kwargs):  # noqa: E501
        """mail sender domain reputation neutral  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_domain_reputation_neutral_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderDomainReputationNeutral
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_sender_domain_reputation_neutral_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_sender_domain_reputation_neutral_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_sender_domain_reputation_neutral_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail sender domain reputation neutral  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_domain_reputation_neutral_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderDomainReputationNeutral
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_sender_domain_reputation_neutral_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_sender_domain_reputation/neutral', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSenderDomainReputationNeutral',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_sender_domain_reputation_not_scanned_get(self, **kwargs):  # noqa: E501
        """mail sender domain reputation not scanned  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_domain_reputation_not_scanned_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderDomainReputationNotScanned
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_sender_domain_reputation_not_scanned_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_sender_domain_reputation_not_scanned_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_sender_domain_reputation_not_scanned_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail sender domain reputation not scanned  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_domain_reputation_not_scanned_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderDomainReputationNotScanned
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_sender_domain_reputation_not_scanned_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_sender_domain_reputation/not_scanned', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSenderDomainReputationNotScanned',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_sender_domain_reputation_poor_get(self, **kwargs):  # noqa: E501
        """mail sender domain reputation poor  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_domain_reputation_poor_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderDomainReputationPoor
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_sender_domain_reputation_poor_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_sender_domain_reputation_poor_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_sender_domain_reputation_poor_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail sender domain reputation poor  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_domain_reputation_poor_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderDomainReputationPoor
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_sender_domain_reputation_poor_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_sender_domain_reputation/poor', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSenderDomainReputationPoor',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_sender_domain_reputation_tainted_get(self, **kwargs):  # noqa: E501
        """mail sender domain reputation tainted  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_domain_reputation_tainted_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderDomainReputationTainted
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_sender_domain_reputation_tainted_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_sender_domain_reputation_tainted_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_sender_domain_reputation_tainted_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail sender domain reputation tainted  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_domain_reputation_tainted_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderDomainReputationTainted
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_sender_domain_reputation_tainted_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_sender_domain_reputation/tainted', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSenderDomainReputationTainted',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_sender_domain_reputation_unknown_get(self, **kwargs):  # noqa: E501
        """mail sender domain reputation unknown  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_domain_reputation_unknown_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderDomainReputationUnknown
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_sender_domain_reputation_unknown_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_sender_domain_reputation_unknown_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_sender_domain_reputation_unknown_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail sender domain reputation unknown  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_domain_reputation_unknown_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderDomainReputationUnknown
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_sender_domain_reputation_unknown_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_sender_domain_reputation/unknown', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSenderDomainReputationUnknown',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_sender_domain_reputation_unscannable_get(self, **kwargs):  # noqa: E501
        """mail sender domain reputation unscannable  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_domain_reputation_unscannable_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderDomainReputationUnscannable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_sender_domain_reputation_unscannable_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_sender_domain_reputation_unscannable_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_sender_domain_reputation_unscannable_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail sender domain reputation unscannable  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_domain_reputation_unscannable_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderDomainReputationUnscannable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_sender_domain_reputation_unscannable_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_sender_domain_reputation/unscannable', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSenderDomainReputationUnscannable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_sender_domain_reputation_weak_get(self, **kwargs):  # noqa: E501
        """mail sender domain reputation weak  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_domain_reputation_weak_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderDomainReputationWeak
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_sender_domain_reputation_weak_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_sender_domain_reputation_weak_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_sender_domain_reputation_weak_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail sender domain reputation weak  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_domain_reputation_weak_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderDomainReputationWeak
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_sender_domain_reputation_weak_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_sender_domain_reputation/weak', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSenderDomainReputationWeak',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_sender_domain_threat_categories_get(self, **kwargs):  # noqa: E501
        """mail sender domain threat categories total threat messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_domain_threat_categories_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date: The start date must be in ISO8601 format.
        :param str end_date: The end date must be in ISO8601 format.
        :param str device_type:
        :param str top:
        :param str limit:
        :param str offset:
        :param str order_by:
        :param str order_dir:
        :return: ReportingMailSenderDomainThreatCategoriesTotalThreatMessages
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_sender_domain_threat_categories_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_sender_domain_threat_categories_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_sender_domain_threat_categories_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail sender domain threat categories total threat messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_domain_threat_categories_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date: The start date must be in ISO8601 format.
        :param str end_date: The end date must be in ISO8601 format.
        :param str device_type:
        :param str top:
        :param str limit:
        :param str offset:
        :param str order_by:
        :param str order_dir:
        :return: ReportingMailSenderDomainThreatCategoriesTotalThreatMessages
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top', 'limit', 'offset', 'order_by', 'order_dir']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_sender_domain_threat_categories_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'order_dir' in params:
            query_params.append(('orderDir', params['order_dir']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_sender_domain_threat_categories', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSenderDomainThreatCategoriesTotalThreatMessages',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_sender_domain_threat_categories_total_threat_messages_get(self, **kwargs):  # noqa: E501
        """mail sender domain threat categories total threat messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_domain_threat_categories_total_threat_messages_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderDomainThreatCategoriesTotalThreatMessages
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_sender_domain_threat_categories_total_threat_messages_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_sender_domain_threat_categories_total_threat_messages_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_sender_domain_threat_categories_total_threat_messages_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail sender domain threat categories total threat messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_domain_threat_categories_total_threat_messages_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderDomainThreatCategoriesTotalThreatMessages
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_sender_domain_threat_categories_total_threat_messages_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_sender_domain_threat_categories/total_threat_messages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSenderDomainThreatCategoriesTotalThreatMessages',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_sender_domain_threat_levels_get(self, **kwargs):  # noqa: E501
        """mail sender domain reputation threat  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_domain_threat_levels_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date: The start date must be in ISO8601 format.
        :param str end_date: The end date must be in ISO8601 format.
        :param str device_type:
        :param str limit:
        :param str offset:
        :param str order_by:
        :param str order_dir:
        :return: ReportingMailSenderDomainThreatLevels
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_sender_domain_threat_levels_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_sender_domain_threat_levels_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_sender_domain_threat_levels_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail sender domain reputation threat  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_domain_threat_levels_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date: The start date must be in ISO8601 format.
        :param str end_date: The end date must be in ISO8601 format.
        :param str device_type:
        :param str limit:
        :param str offset:
        :param str order_by:
        :param str order_dir:
        :return: ReportingMailSenderDomainThreatLevels
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'limit', 'offset', 'order_by', 'order_dir']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_sender_domain_threat_levels_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'order_dir' in params:
            query_params.append(('orderDir', params['order_dir']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_sender_domain_threat_levels', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSenderDomainThreatLevels',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_sender_group_detail_get(self, **kwargs):  # noqa: E501
        """mail sender group detail total connections  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_group_detail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderGroupDetailTotalConnections
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_sender_group_detail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_sender_group_detail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_sender_group_detail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail sender group detail total connections  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_group_detail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderGroupDetailTotalConnections
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_sender_group_detail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_sender_group_detail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSenderGroupDetailTotalConnections',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_sender_group_detail_total_connections_get(self, **kwargs):  # noqa: E501
        """mail sender group detail total connections  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_group_detail_total_connections_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderGroupDetailTotalConnections
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_sender_group_detail_total_connections_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_sender_group_detail_total_connections_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_sender_group_detail_total_connections_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail sender group detail total connections  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_group_detail_total_connections_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderGroupDetailTotalConnections
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_sender_group_detail_total_connections_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_sender_group_detail/total_connections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSenderGroupDetailTotalConnections',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_sender_group_summary_connections_accept_get(self, **kwargs):  # noqa: E501
        """mail sender group summary connections accept  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_group_summary_connections_accept_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderGroupSummaryConnectionsAccept
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_sender_group_summary_connections_accept_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_sender_group_summary_connections_accept_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_sender_group_summary_connections_accept_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail sender group summary connections accept  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_group_summary_connections_accept_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderGroupSummaryConnectionsAccept
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_sender_group_summary_connections_accept_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_sender_group_summary/connections_accept', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSenderGroupSummaryConnectionsAccept',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_sender_group_summary_connections_reject_get(self, **kwargs):  # noqa: E501
        """mail sender group summary connections reject  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_group_summary_connections_reject_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderGroupSummaryConnectionsReject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_sender_group_summary_connections_reject_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_sender_group_summary_connections_reject_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_sender_group_summary_connections_reject_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail sender group summary connections reject  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_group_summary_connections_reject_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderGroupSummaryConnectionsReject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_sender_group_summary_connections_reject_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_sender_group_summary/connections_reject', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSenderGroupSummaryConnectionsReject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_sender_group_summary_connections_relay_get(self, **kwargs):  # noqa: E501
        """mail sender group summary connections relay  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_group_summary_connections_relay_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderGroupSummaryConnectionsRelay
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_sender_group_summary_connections_relay_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_sender_group_summary_connections_relay_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_sender_group_summary_connections_relay_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail sender group summary connections relay  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_group_summary_connections_relay_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderGroupSummaryConnectionsRelay
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_sender_group_summary_connections_relay_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_sender_group_summary/connections_relay', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSenderGroupSummaryConnectionsRelay',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_sender_group_summary_connections_tcp_refuse_get(self, **kwargs):  # noqa: E501
        """mail sender group summary connections tcp refuse  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_group_summary_connections_tcp_refuse_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderGroupSummaryConnectionsTcpRefuse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_sender_group_summary_connections_tcp_refuse_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_sender_group_summary_connections_tcp_refuse_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_sender_group_summary_connections_tcp_refuse_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail sender group summary connections tcp refuse  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_group_summary_connections_tcp_refuse_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderGroupSummaryConnectionsTcpRefuse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_sender_group_summary_connections_tcp_refuse_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_sender_group_summary/connections_tcp_refuse', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSenderGroupSummaryConnectionsTcpRefuse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_sender_group_summary_get(self, **kwargs):  # noqa: E501
        """mail sender group summary connections accept  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_group_summary_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderGroupSummaryConnectionsAccept
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_sender_group_summary_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_sender_group_summary_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_sender_group_summary_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail sender group summary connections accept  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_group_summary_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderGroupSummaryConnectionsAccept
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_sender_group_summary_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_sender_group_summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSenderGroupSummaryConnectionsAccept',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_sender_ip_hostname_detail_detected_amp_get(self, **kwargs):  # noqa: E501
        """mail sender ip hostname detail detected amp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_ip_hostname_detail_detected_amp_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderIpHostnameDetailDetectedAmp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_sender_ip_hostname_detail_detected_amp_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_sender_ip_hostname_detail_detected_amp_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_sender_ip_hostname_detail_detected_amp_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail sender ip hostname detail detected amp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_ip_hostname_detail_detected_amp_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderIpHostnameDetailDetectedAmp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_sender_ip_hostname_detail_detected_amp_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_sender_ip_hostname_detail/detected_amp', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSenderIpHostnameDetailDetectedAmp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_sender_ip_hostname_detail_detected_spam_get(self, **kwargs):  # noqa: E501
        """mail sender ip hostname detail detected spam  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_ip_hostname_detail_detected_spam_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderIpHostnameDetailDetectedSpam
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_sender_ip_hostname_detail_detected_spam_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_sender_ip_hostname_detail_detected_spam_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_sender_ip_hostname_detail_detected_spam_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail sender ip hostname detail detected spam  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_ip_hostname_detail_detected_spam_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderIpHostnameDetailDetectedSpam
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_sender_ip_hostname_detail_detected_spam_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_sender_ip_hostname_detail/detected_spam', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSenderIpHostnameDetailDetectedSpam',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_sender_ip_hostname_detail_detected_virus_get(self, **kwargs):  # noqa: E501
        """mail sender ip hostname detail detected virus  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_ip_hostname_detail_detected_virus_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderIpHostnameDetailDetectedVirus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_sender_ip_hostname_detail_detected_virus_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_sender_ip_hostname_detail_detected_virus_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_sender_ip_hostname_detail_detected_virus_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail sender ip hostname detail detected virus  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_ip_hostname_detail_detected_virus_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderIpHostnameDetailDetectedVirus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_sender_ip_hostname_detail_detected_virus_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_sender_ip_hostname_detail/detected_virus', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSenderIpHostnameDetailDetectedVirus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_sender_ip_hostname_detail_get(self, **kwargs):  # noqa: E501
        """mail sender ip hostname detail detected amp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_ip_hostname_detail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderIpHostnameDetailDetectedAmp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_sender_ip_hostname_detail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_sender_ip_hostname_detail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_sender_ip_hostname_detail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail sender ip hostname detail detected amp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_ip_hostname_detail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderIpHostnameDetailDetectedAmp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_sender_ip_hostname_detail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_sender_ip_hostname_detail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSenderIpHostnameDetailDetectedAmp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_sender_ip_hostname_detail_threat_content_filter_get(self, **kwargs):  # noqa: E501
        """mail sender ip hostname detail threat content filter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_ip_hostname_detail_threat_content_filter_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderIpHostnameDetailThreatContentFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_sender_ip_hostname_detail_threat_content_filter_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_sender_ip_hostname_detail_threat_content_filter_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_sender_ip_hostname_detail_threat_content_filter_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail sender ip hostname detail threat content filter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_ip_hostname_detail_threat_content_filter_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderIpHostnameDetailThreatContentFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_sender_ip_hostname_detail_threat_content_filter_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_sender_ip_hostname_detail/threat_content_filter', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSenderIpHostnameDetailThreatContentFilter',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_sender_ip_hostname_detail_total_clean_recipients_get(self, **kwargs):  # noqa: E501
        """mail sender ip hostname detail total clean recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_ip_hostname_detail_total_clean_recipients_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderIpHostnameDetailTotalCleanRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_sender_ip_hostname_detail_total_clean_recipients_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_sender_ip_hostname_detail_total_clean_recipients_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_sender_ip_hostname_detail_total_clean_recipients_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail sender ip hostname detail total clean recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_ip_hostname_detail_total_clean_recipients_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderIpHostnameDetailTotalCleanRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_sender_ip_hostname_detail_total_clean_recipients_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_sender_ip_hostname_detail/total_clean_recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSenderIpHostnameDetailTotalCleanRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_sender_ip_hostname_detail_total_dlp_incidents_get(self, **kwargs):  # noqa: E501
        """mail sender ip hostname detail total dlp incidents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_ip_hostname_detail_total_dlp_incidents_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderIpHostnameDetailTotalDlpIncidents
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_sender_ip_hostname_detail_total_dlp_incidents_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_sender_ip_hostname_detail_total_dlp_incidents_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_sender_ip_hostname_detail_total_dlp_incidents_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail sender ip hostname detail total dlp incidents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_ip_hostname_detail_total_dlp_incidents_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderIpHostnameDetailTotalDlpIncidents
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_sender_ip_hostname_detail_total_dlp_incidents_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_sender_ip_hostname_detail/total_dlp_incidents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSenderIpHostnameDetailTotalDlpIncidents',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_sender_ip_hostname_detail_total_recipients_processed_get(self, **kwargs):  # noqa: E501
        """mail sender ip hostname detail total recipients processed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_ip_hostname_detail_total_recipients_processed_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderIpHostnameDetailTotalRecipientsProcessed
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_sender_ip_hostname_detail_total_recipients_processed_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_sender_ip_hostname_detail_total_recipients_processed_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_sender_ip_hostname_detail_total_recipients_processed_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail sender ip hostname detail total recipients processed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_ip_hostname_detail_total_recipients_processed_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderIpHostnameDetailTotalRecipientsProcessed
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_sender_ip_hostname_detail_total_recipients_processed_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_sender_ip_hostname_detail/total_recipients_processed', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSenderIpHostnameDetailTotalRecipientsProcessed',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_sender_ip_hostname_detail_total_threat_recipients_get(self, **kwargs):  # noqa: E501
        """mail sender ip hostname detail total threat recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_ip_hostname_detail_total_threat_recipients_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderIpHostnameDetailTotalThreatRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_sender_ip_hostname_detail_total_threat_recipients_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_sender_ip_hostname_detail_total_threat_recipients_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_sender_ip_hostname_detail_total_threat_recipients_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail sender ip hostname detail total threat recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_sender_ip_hostname_detail_total_threat_recipients_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSenderIpHostnameDetailTotalThreatRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_sender_ip_hostname_detail_total_threat_recipients_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_sender_ip_hostname_detail/total_threat_recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSenderIpHostnameDetailTotalThreatRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_subject_stats_get(self, **kwargs):  # noqa: E501
        """mail subject stats num msgs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_subject_stats_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSubjectStatsNumMsgs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_subject_stats_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_subject_stats_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_subject_stats_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail subject stats num msgs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_subject_stats_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSubjectStatsNumMsgs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_subject_stats_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_subject_stats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSubjectStatsNumMsgs',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_subject_stats_num_msgs_get(self, **kwargs):  # noqa: E501
        """mail subject stats num msgs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_subject_stats_num_msgs_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSubjectStatsNumMsgs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_subject_stats_num_msgs_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_subject_stats_num_msgs_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_subject_stats_num_msgs_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail subject stats num msgs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_subject_stats_num_msgs_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSubjectStatsNumMsgs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_subject_stats_num_msgs_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_subject_stats/num_msgs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSubjectStatsNumMsgs',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_system_capacity_average_incoming_message_size_in_bytes_get(self, **kwargs):  # noqa: E501
        """mail system capacity average incoming message size in bytes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_system_capacity_average_incoming_message_size_in_bytes_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSystemCapacityAverageIncomingMessageSizeInBytes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_system_capacity_average_incoming_message_size_in_bytes_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_system_capacity_average_incoming_message_size_in_bytes_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_system_capacity_average_incoming_message_size_in_bytes_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail system capacity average incoming message size in bytes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_system_capacity_average_incoming_message_size_in_bytes_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSystemCapacityAverageIncomingMessageSizeInBytes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_system_capacity_average_incoming_message_size_in_bytes_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_system_capacity/average_incoming_message_size_in_bytes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSystemCapacityAverageIncomingMessageSizeInBytes',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_system_capacity_average_memory_page_swapping_get(self, **kwargs):  # noqa: E501
        """mail system capacity average memory page swapping  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_system_capacity_average_memory_page_swapping_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSystemCapacityAverageMemoryPageSwapping
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_system_capacity_average_memory_page_swapping_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_system_capacity_average_memory_page_swapping_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_system_capacity_average_memory_page_swapping_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail system capacity average memory page swapping  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_system_capacity_average_memory_page_swapping_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSystemCapacityAverageMemoryPageSwapping
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_system_capacity_average_memory_page_swapping_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_system_capacity/average_memory_page_swapping', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSystemCapacityAverageMemoryPageSwapping',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_system_capacity_average_outgoing_message_size_in_bytes_get(self, **kwargs):  # noqa: E501
        """mail system capacity average outgoing message size in bytes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_system_capacity_average_outgoing_message_size_in_bytes_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSystemCapacityAverageOutgoingMessageSizeInBytes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_system_capacity_average_outgoing_message_size_in_bytes_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_system_capacity_average_outgoing_message_size_in_bytes_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_system_capacity_average_outgoing_message_size_in_bytes_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail system capacity average outgoing message size in bytes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_system_capacity_average_outgoing_message_size_in_bytes_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSystemCapacityAverageOutgoingMessageSizeInBytes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_system_capacity_average_outgoing_message_size_in_bytes_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_system_capacity/average_outgoing_message_size_in_bytes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSystemCapacityAverageOutgoingMessageSizeInBytes',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_system_capacity_bytes_in_get(self, **kwargs):  # noqa: E501
        """mail system capacity bytes in  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_system_capacity_bytes_in_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSystemCapacityBytesIn
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_system_capacity_bytes_in_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_system_capacity_bytes_in_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_system_capacity_bytes_in_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail system capacity bytes in  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_system_capacity_bytes_in_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSystemCapacityBytesIn
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_system_capacity_bytes_in_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_system_capacity/bytes_in', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSystemCapacityBytesIn',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_system_capacity_bytes_out_get(self, **kwargs):  # noqa: E501
        """mail system capacity bytes out  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_system_capacity_bytes_out_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSystemCapacityBytesOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_system_capacity_bytes_out_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_system_capacity_bytes_out_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_system_capacity_bytes_out_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail system capacity bytes out  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_system_capacity_bytes_out_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSystemCapacityBytesOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_system_capacity_bytes_out_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_system_capacity/bytes_out', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSystemCapacityBytesOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_system_capacity_get(self, **kwargs):  # noqa: E501
        """mail system capacity workqueue average messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_system_capacity_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSystemCapacityWorkqueueAverageMessages
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_system_capacity_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_system_capacity_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_system_capacity_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail system capacity workqueue average messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_system_capacity_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSystemCapacityWorkqueueAverageMessages
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_system_capacity_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_system_capacity', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSystemCapacityWorkqueueAverageMessages',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_system_capacity_incoming_connections_get(self, **kwargs):  # noqa: E501
        """mail system capacity incoming connections  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_system_capacity_incoming_connections_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSystemCapacityIncomingConnections
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_system_capacity_incoming_connections_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_system_capacity_incoming_connections_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_system_capacity_incoming_connections_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail system capacity incoming connections  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_system_capacity_incoming_connections_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSystemCapacityIncomingConnections
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_system_capacity_incoming_connections_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_system_capacity/incoming_connections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSystemCapacityIncomingConnections',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_system_capacity_incoming_messages_get(self, **kwargs):  # noqa: E501
        """mail system capacity incoming messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_system_capacity_incoming_messages_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSystemCapacityIncomingMessages
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_system_capacity_incoming_messages_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_system_capacity_incoming_messages_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_system_capacity_incoming_messages_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail system capacity incoming messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_system_capacity_incoming_messages_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSystemCapacityIncomingMessages
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_system_capacity_incoming_messages_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_system_capacity/incoming_messages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSystemCapacityIncomingMessages',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_system_capacity_outgoing_connections_get(self, **kwargs):  # noqa: E501
        """mail system capacity outgoing connections  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_system_capacity_outgoing_connections_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSystemCapacityOutgoingConnections
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_system_capacity_outgoing_connections_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_system_capacity_outgoing_connections_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_system_capacity_outgoing_connections_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail system capacity outgoing connections  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_system_capacity_outgoing_connections_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSystemCapacityOutgoingConnections
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_system_capacity_outgoing_connections_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_system_capacity/outgoing_connections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSystemCapacityOutgoingConnections',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_system_capacity_outgoing_messages_get(self, **kwargs):  # noqa: E501
        """mail system capacity outgoing messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_system_capacity_outgoing_messages_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSystemCapacityOutgoingMessages
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_system_capacity_outgoing_messages_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_system_capacity_outgoing_messages_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_system_capacity_outgoing_messages_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail system capacity outgoing messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_system_capacity_outgoing_messages_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSystemCapacityOutgoingMessages
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_system_capacity_outgoing_messages_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_system_capacity/outgoing_messages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSystemCapacityOutgoingMessages',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_system_capacity_overall_percent_cpu_usage_for_antispam_get(self, **kwargs):  # noqa: E501
        """mail system capacity overall percent cpu usage for antispam  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_system_capacity_overall_percent_cpu_usage_for_antispam_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSystemCapacityOverallPercentCpuUsageForAntispam
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_system_capacity_overall_percent_cpu_usage_for_antispam_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_system_capacity_overall_percent_cpu_usage_for_antispam_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_system_capacity_overall_percent_cpu_usage_for_antispam_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail system capacity overall percent cpu usage for antispam  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_system_capacity_overall_percent_cpu_usage_for_antispam_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSystemCapacityOverallPercentCpuUsageForAntispam
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_system_capacity_overall_percent_cpu_usage_for_antispam_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_system_capacity/overall_percent_cpu_usage_for_antispam', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSystemCapacityOverallPercentCpuUsageForAntispam',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_system_capacity_overall_percent_cpu_usage_for_antivirus_get(self, **kwargs):  # noqa: E501
        """mail system capacity overall percent cpu usage for antivirus  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_system_capacity_overall_percent_cpu_usage_for_antivirus_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSystemCapacityOverallPercentCpuUsageForAntivirus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_system_capacity_overall_percent_cpu_usage_for_antivirus_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_system_capacity_overall_percent_cpu_usage_for_antivirus_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_system_capacity_overall_percent_cpu_usage_for_antivirus_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail system capacity overall percent cpu usage for antivirus  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_system_capacity_overall_percent_cpu_usage_for_antivirus_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSystemCapacityOverallPercentCpuUsageForAntivirus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_system_capacity_overall_percent_cpu_usage_for_antivirus_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_system_capacity/overall_percent_cpu_usage_for_antivirus', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSystemCapacityOverallPercentCpuUsageForAntivirus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_system_capacity_overall_percent_cpu_usage_for_mail_count_get(self, **kwargs):  # noqa: E501
        """mail system capacity overall percent cpu usage for mail count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_system_capacity_overall_percent_cpu_usage_for_mail_count_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSystemCapacityOverallPercentCpuUsageForMailCount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_system_capacity_overall_percent_cpu_usage_for_mail_count_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_system_capacity_overall_percent_cpu_usage_for_mail_count_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_system_capacity_overall_percent_cpu_usage_for_mail_count_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail system capacity overall percent cpu usage for mail count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_system_capacity_overall_percent_cpu_usage_for_mail_count_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSystemCapacityOverallPercentCpuUsageForMailCount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_system_capacity_overall_percent_cpu_usage_for_mail_count_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_system_capacity/overall_percent_cpu_usage_for_mail_count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSystemCapacityOverallPercentCpuUsageForMailCount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_system_capacity_overall_percent_cpu_usage_for_quarantine_get(self, **kwargs):  # noqa: E501
        """mail system capacity overall percent cpu usage for quarantine  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_system_capacity_overall_percent_cpu_usage_for_quarantine_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSystemCapacityOverallPercentCpuUsageForQuarantine
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_system_capacity_overall_percent_cpu_usage_for_quarantine_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_system_capacity_overall_percent_cpu_usage_for_quarantine_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_system_capacity_overall_percent_cpu_usage_for_quarantine_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail system capacity overall percent cpu usage for quarantine  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_system_capacity_overall_percent_cpu_usage_for_quarantine_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSystemCapacityOverallPercentCpuUsageForQuarantine
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_system_capacity_overall_percent_cpu_usage_for_quarantine_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_system_capacity/overall_percent_cpu_usage_for_quarantine', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSystemCapacityOverallPercentCpuUsageForQuarantine',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_system_capacity_overall_percent_cpu_usage_for_reporting_get(self, **kwargs):  # noqa: E501
        """mail system capacity overall percent cpu usage for reporting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_system_capacity_overall_percent_cpu_usage_for_reporting_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSystemCapacityOverallPercentCpuUsageForReporting
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_system_capacity_overall_percent_cpu_usage_for_reporting_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_system_capacity_overall_percent_cpu_usage_for_reporting_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_system_capacity_overall_percent_cpu_usage_for_reporting_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail system capacity overall percent cpu usage for reporting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_system_capacity_overall_percent_cpu_usage_for_reporting_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSystemCapacityOverallPercentCpuUsageForReporting
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_system_capacity_overall_percent_cpu_usage_for_reporting_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_system_capacity/overall_percent_cpu_usage_for_reporting', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSystemCapacityOverallPercentCpuUsageForReporting',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_system_capacity_overall_percent_cpu_usage_get(self, **kwargs):  # noqa: E501
        """mail system capacity overall percent cpu usage  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_system_capacity_overall_percent_cpu_usage_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSystemCapacityOverallPercentCpuUsage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_system_capacity_overall_percent_cpu_usage_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_system_capacity_overall_percent_cpu_usage_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_system_capacity_overall_percent_cpu_usage_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail system capacity overall percent cpu usage  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_system_capacity_overall_percent_cpu_usage_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSystemCapacityOverallPercentCpuUsage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_system_capacity_overall_percent_cpu_usage_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_system_capacity/overall_percent_cpu_usage', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSystemCapacityOverallPercentCpuUsage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_system_capacity_res_con_start_count_get(self, **kwargs):  # noqa: E501
        """mail system capacity res con start count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_system_capacity_res_con_start_count_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSystemCapacityResConStartCount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_system_capacity_res_con_start_count_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_system_capacity_res_con_start_count_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_system_capacity_res_con_start_count_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail system capacity res con start count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_system_capacity_res_con_start_count_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSystemCapacityResConStartCount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_system_capacity_res_con_start_count_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_system_capacity/res_con_start_count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSystemCapacityResConStartCount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_system_capacity_workqueue_average_messages_get(self, **kwargs):  # noqa: E501
        """mail system capacity workqueue average messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_system_capacity_workqueue_average_messages_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSystemCapacityWorkqueueAverageMessages
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_system_capacity_workqueue_average_messages_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_system_capacity_workqueue_average_messages_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_system_capacity_workqueue_average_messages_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail system capacity workqueue average messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_system_capacity_workqueue_average_messages_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSystemCapacityWorkqueueAverageMessages
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_system_capacity_workqueue_average_messages_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_system_capacity/workqueue_average_messages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSystemCapacityWorkqueueAverageMessages',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_system_capacity_workqueue_average_time_spent_get(self, **kwargs):  # noqa: E501
        """mail system capacity workqueue average time spent  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_system_capacity_workqueue_average_time_spent_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSystemCapacityWorkqueueAverageTimeSpent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_system_capacity_workqueue_average_time_spent_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_system_capacity_workqueue_average_time_spent_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_system_capacity_workqueue_average_time_spent_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail system capacity workqueue average time spent  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_system_capacity_workqueue_average_time_spent_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSystemCapacityWorkqueueAverageTimeSpent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_system_capacity_workqueue_average_time_spent_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_system_capacity/workqueue_average_time_spent', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSystemCapacityWorkqueueAverageTimeSpent',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_system_capacity_workqueue_maximum_messages_get(self, **kwargs):  # noqa: E501
        """mail system capacity workqueue maximum messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_system_capacity_workqueue_maximum_messages_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSystemCapacityWorkqueueMaximumMessages
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_system_capacity_workqueue_maximum_messages_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_system_capacity_workqueue_maximum_messages_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_system_capacity_workqueue_maximum_messages_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail system capacity workqueue maximum messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_system_capacity_workqueue_maximum_messages_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSystemCapacityWorkqueueMaximumMessages
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_system_capacity_workqueue_maximum_messages_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_system_capacity/workqueue_maximum_messages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSystemCapacityWorkqueueMaximumMessages',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_system_capacity_workqueue_messages_max_get(self, **kwargs):  # noqa: E501
        """mail system capacity workqueue messages max  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_system_capacity_workqueue_messages_max_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSystemCapacityWorkqueueMessagesMax
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_system_capacity_workqueue_messages_max_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_system_capacity_workqueue_messages_max_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_system_capacity_workqueue_messages_max_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail system capacity workqueue messages max  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_system_capacity_workqueue_messages_max_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailSystemCapacityWorkqueueMessagesMax
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_system_capacity_workqueue_messages_max_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_system_capacity/workqueue_messages_max', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailSystemCapacityWorkqueueMessagesMax',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_threatfeeds_indicator_summary_domain_get(self, **kwargs):  # noqa: E501
        """mail threatfeeds indicator summary domain  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_threatfeeds_indicator_summary_domain_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailThreatfeedsIndicatorSummaryDomain
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_threatfeeds_indicator_summary_domain_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_threatfeeds_indicator_summary_domain_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_threatfeeds_indicator_summary_domain_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail threatfeeds indicator summary domain  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_threatfeeds_indicator_summary_domain_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailThreatfeedsIndicatorSummaryDomain
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_threatfeeds_indicator_summary_domain_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_threatfeeds_indicator_summary/domain', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailThreatfeedsIndicatorSummaryDomain',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_threatfeeds_indicator_summary_file_hash_get(self, **kwargs):  # noqa: E501
        """mail threatfeeds indicator summary file hash  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_threatfeeds_indicator_summary_file_hash_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailThreatfeedsIndicatorSummaryFileHash
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_threatfeeds_indicator_summary_file_hash_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_threatfeeds_indicator_summary_file_hash_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_threatfeeds_indicator_summary_file_hash_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail threatfeeds indicator summary file hash  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_threatfeeds_indicator_summary_file_hash_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailThreatfeedsIndicatorSummaryFileHash
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_threatfeeds_indicator_summary_file_hash_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_threatfeeds_indicator_summary/file_hash', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailThreatfeedsIndicatorSummaryFileHash',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_threatfeeds_indicator_summary_get(self, **kwargs):  # noqa: E501
        """mail threatfeeds indicator summary domain  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_threatfeeds_indicator_summary_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailThreatfeedsIndicatorSummaryDomain
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_threatfeeds_indicator_summary_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_threatfeeds_indicator_summary_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_threatfeeds_indicator_summary_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail threatfeeds indicator summary domain  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_threatfeeds_indicator_summary_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailThreatfeedsIndicatorSummaryDomain
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_threatfeeds_indicator_summary_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_threatfeeds_indicator_summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailThreatfeedsIndicatorSummaryDomain',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_threatfeeds_indicator_summary_url_get(self, **kwargs):  # noqa: E501
        """mail threatfeeds indicator summary url  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_threatfeeds_indicator_summary_url_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailThreatfeedsIndicatorSummaryUrl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_threatfeeds_indicator_summary_url_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_threatfeeds_indicator_summary_url_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_threatfeeds_indicator_summary_url_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail threatfeeds indicator summary url  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_threatfeeds_indicator_summary_url_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailThreatfeedsIndicatorSummaryUrl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_threatfeeds_indicator_summary_url_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_threatfeeds_indicator_summary/url', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailThreatfeedsIndicatorSummaryUrl',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_threatfeeds_indicator_value_detail_get(self, **kwargs):  # noqa: E501
        """mail threatfeeds indicator value detail ioc type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_threatfeeds_indicator_value_detail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailThreatfeedsIndicatorValueDetailIocType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_threatfeeds_indicator_value_detail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_threatfeeds_indicator_value_detail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_threatfeeds_indicator_value_detail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail threatfeeds indicator value detail ioc type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_threatfeeds_indicator_value_detail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailThreatfeedsIndicatorValueDetailIocType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_threatfeeds_indicator_value_detail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_threatfeeds_indicator_value_detail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailThreatfeedsIndicatorValueDetailIocType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_threatfeeds_indicator_value_detail_ioc_consumed_get(self, **kwargs):  # noqa: E501
        """mail threatfeeds indicator value detail ioc consumed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_threatfeeds_indicator_value_detail_ioc_consumed_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailThreatfeedsIndicatorValueDetailIocConsumed
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_threatfeeds_indicator_value_detail_ioc_consumed_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_threatfeeds_indicator_value_detail_ioc_consumed_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_threatfeeds_indicator_value_detail_ioc_consumed_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail threatfeeds indicator value detail ioc consumed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_threatfeeds_indicator_value_detail_ioc_consumed_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailThreatfeedsIndicatorValueDetailIocConsumed
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_threatfeeds_indicator_value_detail_ioc_consumed_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_threatfeeds_indicator_value_detail/ioc_consumed', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailThreatfeedsIndicatorValueDetailIocConsumed',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_threatfeeds_indicator_value_detail_ioc_type_get(self, **kwargs):  # noqa: E501
        """mail threatfeeds indicator value detail ioc type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_threatfeeds_indicator_value_detail_ioc_type_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailThreatfeedsIndicatorValueDetailIocType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_threatfeeds_indicator_value_detail_ioc_type_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_threatfeeds_indicator_value_detail_ioc_type_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_threatfeeds_indicator_value_detail_ioc_type_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail threatfeeds indicator value detail ioc type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_threatfeeds_indicator_value_detail_ioc_type_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailThreatfeedsIndicatorValueDetailIocType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_threatfeeds_indicator_value_detail_ioc_type_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_threatfeeds_indicator_value_detail/ioc_type', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailThreatfeedsIndicatorValueDetailIocType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_threatfeeds_source_detail_domain_indicator_get(self, **kwargs):  # noqa: E501
        """mail threatfeeds source detail domain indicator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_threatfeeds_source_detail_domain_indicator_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailThreatfeedsSourceDetailDomainIndicator
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_threatfeeds_source_detail_domain_indicator_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_threatfeeds_source_detail_domain_indicator_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_threatfeeds_source_detail_domain_indicator_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail threatfeeds source detail domain indicator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_threatfeeds_source_detail_domain_indicator_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailThreatfeedsSourceDetailDomainIndicator
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_threatfeeds_source_detail_domain_indicator_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_threatfeeds_source_detail/domain_indicator', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailThreatfeedsSourceDetailDomainIndicator',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_threatfeeds_source_detail_file_hash_indicator_get(self, **kwargs):  # noqa: E501
        """mail threatfeeds source detail file hash indicator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_threatfeeds_source_detail_file_hash_indicator_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailThreatfeedsSourceDetailFileHashIndicator
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_threatfeeds_source_detail_file_hash_indicator_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_threatfeeds_source_detail_file_hash_indicator_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_threatfeeds_source_detail_file_hash_indicator_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail threatfeeds source detail file hash indicator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_threatfeeds_source_detail_file_hash_indicator_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailThreatfeedsSourceDetailFileHashIndicator
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_threatfeeds_source_detail_file_hash_indicator_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_threatfeeds_source_detail/file_hash_indicator', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailThreatfeedsSourceDetailFileHashIndicator',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_threatfeeds_source_detail_get(self, **kwargs):  # noqa: E501
        """mail threatfeeds source detail ip indicator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_threatfeeds_source_detail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailThreatfeedsSourceDetailIpIndicator
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_threatfeeds_source_detail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_threatfeeds_source_detail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_threatfeeds_source_detail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail threatfeeds source detail ip indicator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_threatfeeds_source_detail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailThreatfeedsSourceDetailIpIndicator
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_threatfeeds_source_detail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_threatfeeds_source_detail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailThreatfeedsSourceDetailIpIndicator',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_threatfeeds_source_detail_ip_indicator_get(self, **kwargs):  # noqa: E501
        """mail threatfeeds source detail ip indicator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_threatfeeds_source_detail_ip_indicator_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailThreatfeedsSourceDetailIpIndicator
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_threatfeeds_source_detail_ip_indicator_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_threatfeeds_source_detail_ip_indicator_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_threatfeeds_source_detail_ip_indicator_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail threatfeeds source detail ip indicator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_threatfeeds_source_detail_ip_indicator_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailThreatfeedsSourceDetailIpIndicator
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_threatfeeds_source_detail_ip_indicator_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_threatfeeds_source_detail/ip_indicator', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailThreatfeedsSourceDetailIpIndicator',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_threatfeeds_source_detail_total_messages_matched_get(self, **kwargs):  # noqa: E501
        """mail threatfeeds source detail total messages matched  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_threatfeeds_source_detail_total_messages_matched_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailThreatfeedsSourceDetailTotalMessagesMatched
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_threatfeeds_source_detail_total_messages_matched_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_threatfeeds_source_detail_total_messages_matched_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_threatfeeds_source_detail_total_messages_matched_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail threatfeeds source detail total messages matched  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_threatfeeds_source_detail_total_messages_matched_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailThreatfeedsSourceDetailTotalMessagesMatched
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_threatfeeds_source_detail_total_messages_matched_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_threatfeeds_source_detail/total_messages_matched', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailThreatfeedsSourceDetailTotalMessagesMatched',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_threatfeeds_source_detail_url_indicator_get(self, **kwargs):  # noqa: E501
        """mail threatfeeds source detail url indicator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_threatfeeds_source_detail_url_indicator_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailThreatfeedsSourceDetailUrlIndicator
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_threatfeeds_source_detail_url_indicator_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_threatfeeds_source_detail_url_indicator_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_threatfeeds_source_detail_url_indicator_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail threatfeeds source detail url indicator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_threatfeeds_source_detail_url_indicator_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailThreatfeedsSourceDetailUrlIndicator
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_threatfeeds_source_detail_url_indicator_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_threatfeeds_source_detail/url_indicator', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailThreatfeedsSourceDetailUrlIndicator',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_url_analysis_summary_get(self, **kwargs):  # noqa: E501
        """Summary of the messages retrospected by URL Analysis.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_url_analysis_summary_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUrlAnalysisSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_url_analysis_summary_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_url_analysis_summary_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_url_analysis_summary_get_with_http_info(self, **kwargs):  # noqa: E501
        """Summary of the messages retrospected by URL Analysis.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_url_analysis_summary_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUrlAnalysisSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_url_analysis_summary_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_url_analysis_summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailUrlAnalysisSummary',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_url_category_summary_get(self, **kwargs):  # noqa: E501
        """mail url category summary incoming count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_url_category_summary_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUrlCategorySummaryIncomingCount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_url_category_summary_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_url_category_summary_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_url_category_summary_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail url category summary incoming count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_url_category_summary_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUrlCategorySummaryIncomingCount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_url_category_summary_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_url_category_summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailUrlCategorySummaryIncomingCount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_url_category_summary_incoming_count_get(self, **kwargs):  # noqa: E501
        """mail url category summary incoming count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_url_category_summary_incoming_count_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUrlCategorySummaryIncomingCount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_url_category_summary_incoming_count_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_url_category_summary_incoming_count_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_url_category_summary_incoming_count_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail url category summary incoming count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_url_category_summary_incoming_count_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUrlCategorySummaryIncomingCount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_url_category_summary_incoming_count_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_url_category_summary/incoming_count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailUrlCategorySummaryIncomingCount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_url_category_summary_outgoing_count_get(self, **kwargs):  # noqa: E501
        """mail url category summary outgoing count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_url_category_summary_outgoing_count_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUrlCategorySummaryOutgoingCount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_url_category_summary_outgoing_count_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_url_category_summary_outgoing_count_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_url_category_summary_outgoing_count_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail url category summary outgoing count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_url_category_summary_outgoing_count_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUrlCategorySummaryOutgoingCount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_url_category_summary_outgoing_count_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_url_category_summary/outgoing_count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailUrlCategorySummaryOutgoingCount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_url_domain_summary_get(self, **kwargs):  # noqa: E501
        """mail url domain summary incoming count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_url_domain_summary_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUrlDomainSummaryIncomingCount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_url_domain_summary_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_url_domain_summary_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_url_domain_summary_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail url domain summary incoming count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_url_domain_summary_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUrlDomainSummaryIncomingCount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_url_domain_summary_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_url_domain_summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailUrlDomainSummaryIncomingCount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_url_domain_summary_incoming_count_get(self, **kwargs):  # noqa: E501
        """mail url domain summary incoming count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_url_domain_summary_incoming_count_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUrlDomainSummaryIncomingCount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_url_domain_summary_incoming_count_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_url_domain_summary_incoming_count_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_url_domain_summary_incoming_count_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail url domain summary incoming count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_url_domain_summary_incoming_count_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUrlDomainSummaryIncomingCount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_url_domain_summary_incoming_count_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_url_domain_summary/incoming_count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailUrlDomainSummaryIncomingCount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_url_domain_summary_outgoing_count_get(self, **kwargs):  # noqa: E501
        """mail url domain summary outgoing count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_url_domain_summary_outgoing_count_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUrlDomainSummaryOutgoingCount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_url_domain_summary_outgoing_count_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_url_domain_summary_outgoing_count_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_url_domain_summary_outgoing_count_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail url domain summary outgoing count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_url_domain_summary_outgoing_count_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUrlDomainSummaryOutgoingCount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_url_domain_summary_outgoing_count_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_url_domain_summary/outgoing_count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailUrlDomainSummaryOutgoingCount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_url_reputation_summary_get(self, **kwargs):  # noqa: E501
        """mail url reputation summary incoming count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_url_reputation_summary_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUrlReputationSummaryIncomingCount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_url_reputation_summary_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_url_reputation_summary_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_url_reputation_summary_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail url reputation summary incoming count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_url_reputation_summary_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUrlReputationSummaryIncomingCount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_url_reputation_summary_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_url_reputation_summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailUrlReputationSummaryIncomingCount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_url_reputation_summary_incoming_count_get(self, **kwargs):  # noqa: E501
        """mail url reputation summary incoming count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_url_reputation_summary_incoming_count_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUrlReputationSummaryIncomingCount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_url_reputation_summary_incoming_count_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_url_reputation_summary_incoming_count_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_url_reputation_summary_incoming_count_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail url reputation summary incoming count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_url_reputation_summary_incoming_count_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUrlReputationSummaryIncomingCount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_url_reputation_summary_incoming_count_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_url_reputation_summary/incoming_count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailUrlReputationSummaryIncomingCount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_url_reputation_summary_outgoing_count_get(self, **kwargs):  # noqa: E501
        """mail url reputation summary outgoing count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_url_reputation_summary_outgoing_count_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUrlReputationSummaryOutgoingCount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_url_reputation_summary_outgoing_count_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_url_reputation_summary_outgoing_count_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_url_reputation_summary_outgoing_count_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail url reputation summary outgoing count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_url_reputation_summary_outgoing_count_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUrlReputationSummaryOutgoingCount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_url_reputation_summary_outgoing_count_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_url_reputation_summary/outgoing_count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailUrlReputationSummaryOutgoingCount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_users_content_filter_incoming_get(self, **kwargs):  # noqa: E501
        """mail users content filter incoming recipients matched  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_content_filter_incoming_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersContentFilterIncomingRecipientsMatched
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_users_content_filter_incoming_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_users_content_filter_incoming_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_users_content_filter_incoming_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail users content filter incoming recipients matched  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_content_filter_incoming_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersContentFilterIncomingRecipientsMatched
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_users_content_filter_incoming_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_users_content_filter_incoming', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailUsersContentFilterIncomingRecipientsMatched',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_users_content_filter_incoming_recipients_matched_get(self, **kwargs):  # noqa: E501
        """mail users content filter incoming recipients matched  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_content_filter_incoming_recipients_matched_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersContentFilterIncomingRecipientsMatched
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_users_content_filter_incoming_recipients_matched_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_users_content_filter_incoming_recipients_matched_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_users_content_filter_incoming_recipients_matched_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail users content filter incoming recipients matched  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_content_filter_incoming_recipients_matched_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersContentFilterIncomingRecipientsMatched
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_users_content_filter_incoming_recipients_matched_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_users_content_filter_incoming/recipients_matched', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailUsersContentFilterIncomingRecipientsMatched',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_users_content_filter_outgoing_get(self, **kwargs):  # noqa: E501
        """mail users content filter outgoing recipients matched  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_content_filter_outgoing_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersContentFilterOutgoingRecipientsMatched
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_users_content_filter_outgoing_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_users_content_filter_outgoing_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_users_content_filter_outgoing_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail users content filter outgoing recipients matched  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_content_filter_outgoing_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersContentFilterOutgoingRecipientsMatched
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_users_content_filter_outgoing_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_users_content_filter_outgoing', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailUsersContentFilterOutgoingRecipientsMatched',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_users_content_filter_outgoing_recipients_matched_get(self, **kwargs):  # noqa: E501
        """mail users content filter outgoing recipients matched  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_content_filter_outgoing_recipients_matched_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersContentFilterOutgoingRecipientsMatched
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_users_content_filter_outgoing_recipients_matched_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_users_content_filter_outgoing_recipients_matched_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_users_content_filter_outgoing_recipients_matched_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail users content filter outgoing recipients matched  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_content_filter_outgoing_recipients_matched_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersContentFilterOutgoingRecipientsMatched
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_users_content_filter_outgoing_recipients_matched_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_users_content_filter_outgoing/recipients_matched', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailUsersContentFilterOutgoingRecipientsMatched',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_users_detail_get(self, **kwargs):  # noqa: E501
        """mail users detail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_detail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_users_detail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_users_detail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_users_detail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail users detail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_detail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_users_detail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_users_detail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailUsersDetail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_users_detail_incoming_bulk_mail_get(self, **kwargs):  # noqa: E501
        """mail users detail incoming bulk mail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_detail_incoming_bulk_mail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersDetailIncomingBulkMail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_users_detail_incoming_bulk_mail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_users_detail_incoming_bulk_mail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_users_detail_incoming_bulk_mail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail users detail incoming bulk mail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_detail_incoming_bulk_mail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersDetailIncomingBulkMail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_users_detail_incoming_bulk_mail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_users_detail/incoming_bulk_mail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailUsersDetailIncomingBulkMail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_users_detail_incoming_detected_amp_get(self, **kwargs):  # noqa: E501
        """mail users detail incoming detected amp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_detail_incoming_detected_amp_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersDetailIncomingDetectedAmp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_users_detail_incoming_detected_amp_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_users_detail_incoming_detected_amp_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_users_detail_incoming_detected_amp_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail users detail incoming detected amp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_detail_incoming_detected_amp_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersDetailIncomingDetectedAmp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_users_detail_incoming_detected_amp_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_users_detail/incoming_detected_amp', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailUsersDetailIncomingDetectedAmp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_users_detail_incoming_detected_content_filter_get(self, **kwargs):  # noqa: E501
        """mail users detail incoming detected content filter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_detail_incoming_detected_content_filter_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersDetailIncomingDetectedContentFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_users_detail_incoming_detected_content_filter_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_users_detail_incoming_detected_content_filter_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_users_detail_incoming_detected_content_filter_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail users detail incoming detected content filter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_detail_incoming_detected_content_filter_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersDetailIncomingDetectedContentFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_users_detail_incoming_detected_content_filter_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_users_detail/incoming_detected_content_filter', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailUsersDetailIncomingDetectedContentFilter',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_users_detail_incoming_detected_ims_spam_increment_over_case_get(self, **kwargs):  # noqa: E501
        """mail users detail incoming detected ims spam increment over case  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_detail_incoming_detected_ims_spam_increment_over_case_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersDetailIncomingDetectedImsSpamIncrementOverCase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_users_detail_incoming_detected_ims_spam_increment_over_case_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_users_detail_incoming_detected_ims_spam_increment_over_case_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_users_detail_incoming_detected_ims_spam_increment_over_case_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail users detail incoming detected ims spam increment over case  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_detail_incoming_detected_ims_spam_increment_over_case_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersDetailIncomingDetectedImsSpamIncrementOverCase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_users_detail_incoming_detected_ims_spam_increment_over_case_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_users_detail/incoming_detected_ims_spam_increment_over_case', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailUsersDetailIncomingDetectedImsSpamIncrementOverCase',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_users_detail_incoming_detected_spam_get(self, **kwargs):  # noqa: E501
        """mail users detail incoming detected spam  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_detail_incoming_detected_spam_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersDetailIncomingDetectedSpam
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_users_detail_incoming_detected_spam_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_users_detail_incoming_detected_spam_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_users_detail_incoming_detected_spam_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail users detail incoming detected spam  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_detail_incoming_detected_spam_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersDetailIncomingDetectedSpam
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_users_detail_incoming_detected_spam_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_users_detail/incoming_detected_spam', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailUsersDetailIncomingDetectedSpam',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_users_detail_incoming_detected_virus_get(self, **kwargs):  # noqa: E501
        """mail users detail incoming detected virus  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_detail_incoming_detected_virus_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersDetailIncomingDetectedVirus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_users_detail_incoming_detected_virus_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_users_detail_incoming_detected_virus_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_users_detail_incoming_detected_virus_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail users detail incoming detected virus  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_detail_incoming_detected_virus_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersDetailIncomingDetectedVirus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_users_detail_incoming_detected_virus_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_users_detail/incoming_detected_virus', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailUsersDetailIncomingDetectedVirus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_users_detail_incoming_graymail_get(self, **kwargs):  # noqa: E501
        """mail users detail incoming graymail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_detail_incoming_graymail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersDetailIncomingGraymail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_users_detail_incoming_graymail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_users_detail_incoming_graymail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_users_detail_incoming_graymail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail users detail incoming graymail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_detail_incoming_graymail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersDetailIncomingGraymail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_users_detail_incoming_graymail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_users_detail/incoming_graymail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailUsersDetailIncomingGraymail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_users_detail_incoming_marketing_mail_get(self, **kwargs):  # noqa: E501
        """mail users detail incoming marketing mail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_detail_incoming_marketing_mail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersDetailIncomingMarketingMail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_users_detail_incoming_marketing_mail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_users_detail_incoming_marketing_mail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_users_detail_incoming_marketing_mail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail users detail incoming marketing mail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_detail_incoming_marketing_mail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersDetailIncomingMarketingMail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_users_detail_incoming_marketing_mail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_users_detail/incoming_marketing_mail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailUsersDetailIncomingMarketingMail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_users_detail_incoming_social_mail_get(self, **kwargs):  # noqa: E501
        """mail users detail incoming social mail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_detail_incoming_social_mail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersDetailIncomingSocialMail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_users_detail_incoming_social_mail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_users_detail_incoming_social_mail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_users_detail_incoming_social_mail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail users detail incoming social mail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_detail_incoming_social_mail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersDetailIncomingSocialMail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_users_detail_incoming_social_mail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_users_detail/incoming_social_mail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailUsersDetailIncomingSocialMail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_users_detail_incoming_threat_content_filter_get(self, **kwargs):  # noqa: E501
        """mail users detail incoming threat content filter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_detail_incoming_threat_content_filter_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersDetailIncomingThreatContentFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_users_detail_incoming_threat_content_filter_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_users_detail_incoming_threat_content_filter_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_users_detail_incoming_threat_content_filter_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail users detail incoming threat content filter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_detail_incoming_threat_content_filter_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersDetailIncomingThreatContentFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_users_detail_incoming_threat_content_filter_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_users_detail/incoming_threat_content_filter', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailUsersDetailIncomingThreatContentFilter',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_users_detail_incoming_total_clean_recipients_get(self, **kwargs):  # noqa: E501
        """mail users detail incoming total clean recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_detail_incoming_total_clean_recipients_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersDetailIncomingTotalCleanRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_users_detail_incoming_total_clean_recipients_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_users_detail_incoming_total_clean_recipients_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_users_detail_incoming_total_clean_recipients_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail users detail incoming total clean recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_detail_incoming_total_clean_recipients_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersDetailIncomingTotalCleanRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_users_detail_incoming_total_clean_recipients_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_users_detail/incoming_total_clean_recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailUsersDetailIncomingTotalCleanRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_users_detail_incoming_total_recipients_get(self, **kwargs):  # noqa: E501
        """mail users detail incoming total recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_detail_incoming_total_recipients_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersDetailIncomingTotalRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_users_detail_incoming_total_recipients_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_users_detail_incoming_total_recipients_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_users_detail_incoming_total_recipients_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail users detail incoming total recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_detail_incoming_total_recipients_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersDetailIncomingTotalRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_users_detail_incoming_total_recipients_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_users_detail/incoming_total_recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailUsersDetailIncomingTotalRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_users_detail_outgoing_detected_amp_get(self, **kwargs):  # noqa: E501
        """mail users detail outgoing detected amp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_detail_outgoing_detected_amp_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersDetailOutgoingDetectedAmp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_users_detail_outgoing_detected_amp_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_users_detail_outgoing_detected_amp_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_users_detail_outgoing_detected_amp_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail users detail outgoing detected amp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_detail_outgoing_detected_amp_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersDetailOutgoingDetectedAmp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_users_detail_outgoing_detected_amp_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_users_detail/outgoing_detected_amp', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailUsersDetailOutgoingDetectedAmp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_users_detail_outgoing_detected_content_filter_get(self, **kwargs):  # noqa: E501
        """mail users detail outgoing detected content filter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_detail_outgoing_detected_content_filter_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersDetailOutgoingDetectedContentFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_users_detail_outgoing_detected_content_filter_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_users_detail_outgoing_detected_content_filter_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_users_detail_outgoing_detected_content_filter_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail users detail outgoing detected content filter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_detail_outgoing_detected_content_filter_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersDetailOutgoingDetectedContentFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_users_detail_outgoing_detected_content_filter_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_users_detail/outgoing_detected_content_filter', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailUsersDetailOutgoingDetectedContentFilter',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_users_detail_outgoing_detected_ims_spam_increment_over_case_get(self, **kwargs):  # noqa: E501
        """mail users detail outgoing detected ims spam increment over case  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_detail_outgoing_detected_ims_spam_increment_over_case_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersDetailOutgoingDetectedImsSpamIncrementOverCase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_users_detail_outgoing_detected_ims_spam_increment_over_case_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_users_detail_outgoing_detected_ims_spam_increment_over_case_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_users_detail_outgoing_detected_ims_spam_increment_over_case_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail users detail outgoing detected ims spam increment over case  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_detail_outgoing_detected_ims_spam_increment_over_case_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersDetailOutgoingDetectedImsSpamIncrementOverCase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_users_detail_outgoing_detected_ims_spam_increment_over_case_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_users_detail/outgoing_detected_ims_spam_increment_over_case', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailUsersDetailOutgoingDetectedImsSpamIncrementOverCase',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_users_detail_outgoing_detected_spam_get(self, **kwargs):  # noqa: E501
        """mail users detail outgoing detected spam  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_detail_outgoing_detected_spam_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersDetailOutgoingDetectedSpam
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_users_detail_outgoing_detected_spam_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_users_detail_outgoing_detected_spam_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_users_detail_outgoing_detected_spam_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail users detail outgoing detected spam  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_detail_outgoing_detected_spam_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersDetailOutgoingDetectedSpam
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_users_detail_outgoing_detected_spam_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_users_detail/outgoing_detected_spam', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailUsersDetailOutgoingDetectedSpam',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_users_detail_outgoing_detected_virus_get(self, **kwargs):  # noqa: E501
        """mail users detail outgoing detected virus  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_detail_outgoing_detected_virus_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersDetailOutgoingDetectedVirus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_users_detail_outgoing_detected_virus_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_users_detail_outgoing_detected_virus_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_users_detail_outgoing_detected_virus_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail users detail outgoing detected virus  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_detail_outgoing_detected_virus_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersDetailOutgoingDetectedVirus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_users_detail_outgoing_detected_virus_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_users_detail/outgoing_detected_virus', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailUsersDetailOutgoingDetectedVirus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_users_detail_outgoing_threat_content_filter_get(self, **kwargs):  # noqa: E501
        """mail users detail outgoing threat content filter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_detail_outgoing_threat_content_filter_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersDetailOutgoingThreatContentFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_users_detail_outgoing_threat_content_filter_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_users_detail_outgoing_threat_content_filter_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_users_detail_outgoing_threat_content_filter_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail users detail outgoing threat content filter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_detail_outgoing_threat_content_filter_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersDetailOutgoingThreatContentFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_users_detail_outgoing_threat_content_filter_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_users_detail/outgoing_threat_content_filter', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailUsersDetailOutgoingThreatContentFilter',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_users_detail_outgoing_total_clean_recipients_get(self, **kwargs):  # noqa: E501
        """mail users detail outgoing total clean recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_detail_outgoing_total_clean_recipients_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersDetailOutgoingTotalCleanRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_users_detail_outgoing_total_clean_recipients_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_users_detail_outgoing_total_clean_recipients_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_users_detail_outgoing_total_clean_recipients_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail users detail outgoing total clean recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_detail_outgoing_total_clean_recipients_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersDetailOutgoingTotalCleanRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_users_detail_outgoing_total_clean_recipients_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_users_detail/outgoing_total_clean_recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailUsersDetailOutgoingTotalCleanRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_users_detail_outgoing_total_recipients_get(self, **kwargs):  # noqa: E501
        """mail users detail outgoing total recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_detail_outgoing_total_recipients_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersDetailOutgoingTotalRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_users_detail_outgoing_total_recipients_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_users_detail_outgoing_total_recipients_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_users_detail_outgoing_total_recipients_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail users detail outgoing total recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_users_detail_outgoing_total_recipients_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailUsersDetailOutgoingTotalRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_users_detail_outgoing_total_recipients_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_users_detail/outgoing_total_recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailUsersDetailOutgoingTotalRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_virus_type_detail_get(self, **kwargs):  # noqa: E501
        """mail virus type detail outgoing total recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_virus_type_detail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailVirusTypeDetailOutgoingTotalRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_virus_type_detail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_virus_type_detail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_virus_type_detail_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail virus type detail outgoing total recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_virus_type_detail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailVirusTypeDetailOutgoingTotalRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_virus_type_detail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_virus_type_detail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailVirusTypeDetailOutgoingTotalRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_virus_type_detail_incoming_total_recipients_get(self, **kwargs):  # noqa: E501
        """mail virus type detail incoming total recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_virus_type_detail_incoming_total_recipients_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailVirusTypeDetailIncomingTotalRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_virus_type_detail_incoming_total_recipients_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_virus_type_detail_incoming_total_recipients_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_virus_type_detail_incoming_total_recipients_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail virus type detail incoming total recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_virus_type_detail_incoming_total_recipients_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailVirusTypeDetailIncomingTotalRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_virus_type_detail_incoming_total_recipients_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_virus_type_detail/incoming_total_recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailVirusTypeDetailIncomingTotalRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_virus_type_detail_outgoing_total_recipients_get(self, **kwargs):  # noqa: E501
        """mail virus type detail outgoing total recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_virus_type_detail_outgoing_total_recipients_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailVirusTypeDetailOutgoingTotalRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_virus_type_detail_outgoing_total_recipients_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_virus_type_detail_outgoing_total_recipients_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_virus_type_detail_outgoing_total_recipients_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail virus type detail outgoing total recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_virus_type_detail_outgoing_total_recipients_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailVirusTypeDetailOutgoingTotalRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_virus_type_detail_outgoing_total_recipients_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_virus_type_detail/outgoing_total_recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailVirusTypeDetailOutgoingTotalRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_virus_type_detail_total_recipients_get(self, **kwargs):  # noqa: E501
        """mail virus type detail total recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_virus_type_detail_total_recipients_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailVirusTypeDetailTotalRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_virus_type_detail_total_recipients_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_virus_type_detail_total_recipients_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_virus_type_detail_total_recipients_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail virus type detail total recipients  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_virus_type_detail_total_recipients_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailVirusTypeDetailTotalRecipients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_virus_type_detail_total_recipients_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_virus_type_detail/total_recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailVirusTypeDetailTotalRecipients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_vof_specific_threat_summary_get(self, **kwargs):  # noqa: E501
        """mail vof specific threat summary  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_vof_specific_threat_summary_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailVofSpecificThreatSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_vof_specific_threat_summary_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_vof_specific_threat_summary_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_vof_specific_threat_summary_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail vof specific threat summary  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_vof_specific_threat_summary_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :return: ReportingMailVofSpecificThreatSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_vof_specific_threat_summary_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_vof_specific_threat_summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailVofSpecificThreatSummary',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_vof_threat_details_get(self, **kwargs):  # noqa: E501
        """mail vof threat details threat detected  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_vof_threat_details_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailVofThreatDetailsThreatDetected
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_vof_threat_details_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_vof_threat_details_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_vof_threat_details_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail vof threat details threat detected  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_vof_threat_details_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailVofThreatDetailsThreatDetected
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_vof_threat_details_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_vof_threat_details', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailVofThreatDetailsThreatDetected',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_vof_threat_details_threat_detected_get(self, **kwargs):  # noqa: E501
        """mail vof threat details threat detected  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_vof_threat_details_threat_detected_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailVofThreatDetailsThreatDetected
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_vof_threat_details_threat_detected_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_vof_threat_details_threat_detected_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_vof_threat_details_threat_detected_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail vof threat details threat detected  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_vof_threat_details_threat_detected_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailVofThreatDetailsThreatDetected
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_vof_threat_details_threat_detected_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_vof_threat_details/threat_detected', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailVofThreatDetailsThreatDetected',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_vof_threat_summary_get(self, **kwargs):  # noqa: E501
        """mail vof threat summary threat detected  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_vof_threat_summary_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailVofThreatSummaryThreatDetected
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_vof_threat_summary_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_vof_threat_summary_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_vof_threat_summary_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail vof threat summary threat detected  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_vof_threat_summary_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailVofThreatSummaryThreatDetected
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_vof_threat_summary_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_vof_threat_summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailVofThreatSummaryThreatDetected',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_vof_threat_summary_threat_detected_get(self, **kwargs):  # noqa: E501
        """mail vof threat summary threat detected  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_vof_threat_summary_threat_detected_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailVofThreatSummaryThreatDetected
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_vof_threat_summary_threat_detected_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_vof_threat_summary_threat_detected_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_vof_threat_summary_threat_detected_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail vof threat summary threat detected  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_vof_threat_summary_threat_detected_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailVofThreatSummaryThreatDetected
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_vof_threat_summary_threat_detected_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_vof_threat_summary/threat_detected', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailVofThreatSummaryThreatDetected',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_vof_threats_by_level_get(self, **kwargs):  # noqa: E501
        """mail vof threats by level threat detected  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_vof_threats_by_level_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailVofThreatsByLevelThreatDetected
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_vof_threats_by_level_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_vof_threats_by_level_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_vof_threats_by_level_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail vof threats by level threat detected  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_vof_threats_by_level_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailVofThreatsByLevelThreatDetected
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_vof_threats_by_level_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_vof_threats_by_level', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailVofThreatsByLevelThreatDetected',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_vof_threats_by_level_threat_detected_get(self, **kwargs):  # noqa: E501
        """mail vof threats by level threat detected  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_vof_threats_by_level_threat_detected_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailVofThreatsByLevelThreatDetected
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_vof_threats_by_level_threat_detected_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_vof_threats_by_level_threat_detected_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_vof_threats_by_level_threat_detected_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail vof threats by level threat detected  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_vof_threats_by_level_threat_detected_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailVofThreatsByLevelThreatDetected
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_vof_threats_by_level_threat_detected_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_vof_threats_by_level/threat_detected', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailVofThreatsByLevelThreatDetected',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_vof_threats_by_threat_type_get(self, **kwargs):  # noqa: E501
        """mail vof threats by threat type threat detected  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_vof_threats_by_threat_type_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailVofThreatsByThreatTypeThreatDetected
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_vof_threats_by_threat_type_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_vof_threats_by_threat_type_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_vof_threats_by_threat_type_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail vof threats by threat type threat detected  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_vof_threats_by_threat_type_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailVofThreatsByThreatTypeThreatDetected
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_vof_threats_by_threat_type_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_vof_threats_by_threat_type', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailVofThreatsByThreatTypeThreatDetected',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_vof_threats_by_threat_type_threat_detected_get(self, **kwargs):  # noqa: E501
        """mail vof threats by threat type threat detected  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_vof_threats_by_threat_type_threat_detected_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailVofThreatsByThreatTypeThreatDetected
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_vof_threats_by_threat_type_threat_detected_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_vof_threats_by_threat_type_threat_detected_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_vof_threats_by_threat_type_threat_detected_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail vof threats by threat type threat detected  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_vof_threats_by_threat_type_threat_detected_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailVofThreatsByThreatTypeThreatDetected
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_vof_threats_by_threat_type_threat_detected_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_vof_threats_by_threat_type/threat_detected', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailVofThreatsByThreatTypeThreatDetected',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_vof_threats_by_time_threshold_get(self, **kwargs):  # noqa: E501
        """mail vof threats by time threshold quarantine message exit  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_vof_threats_by_time_threshold_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailVofThreatsByTimeThresholdQuarantineMessageExit
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_vof_threats_by_time_threshold_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_vof_threats_by_time_threshold_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_vof_threats_by_time_threshold_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail vof threats by time threshold quarantine message exit  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_vof_threats_by_time_threshold_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailVofThreatsByTimeThresholdQuarantineMessageExit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_vof_threats_by_time_threshold_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_vof_threats_by_time_threshold', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailVofThreatsByTimeThresholdQuarantineMessageExit',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_vof_threats_by_time_threshold_local_store_quarantine_message_exit_get(self, **kwargs):  # noqa: E501
        """mail vof threats by time threshold local store quarantine message exit  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_vof_threats_by_time_threshold_local_store_quarantine_message_exit_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailVofThreatsByTimeThresholdLocalStoreQuarantineMessageExit
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_vof_threats_by_time_threshold_local_store_quarantine_message_exit_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_vof_threats_by_time_threshold_local_store_quarantine_message_exit_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_vof_threats_by_time_threshold_local_store_quarantine_message_exit_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail vof threats by time threshold local store quarantine message exit  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_vof_threats_by_time_threshold_local_store_quarantine_message_exit_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailVofThreatsByTimeThresholdLocalStoreQuarantineMessageExit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_vof_threats_by_time_threshold_local_store_quarantine_message_exit_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_vof_threats_by_time_threshold/local_store_quarantine_message_exit', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailVofThreatsByTimeThresholdLocalStoreQuarantineMessageExit',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_vof_threats_by_time_threshold_quarantine_message_exit_get(self, **kwargs):  # noqa: E501
        """mail vof threats by time threshold quarantine message exit  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_vof_threats_by_time_threshold_quarantine_message_exit_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailVofThreatsByTimeThresholdQuarantineMessageExit
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_vof_threats_by_time_threshold_quarantine_message_exit_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_vof_threats_by_time_threshold_quarantine_message_exit_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_vof_threats_by_time_threshold_quarantine_message_exit_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail vof threats by time threshold quarantine message exit  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_vof_threats_by_time_threshold_quarantine_message_exit_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailVofThreatsByTimeThresholdQuarantineMessageExit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_vof_threats_by_time_threshold_quarantine_message_exit_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_vof_threats_by_time_threshold/quarantine_message_exit', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailVofThreatsByTimeThresholdQuarantineMessageExit',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_vof_threats_by_type_get(self, **kwargs):  # noqa: E501
        """mail vof threats by type threat detected  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_vof_threats_by_type_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailVofThreatsByTypeThreatDetected
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_vof_threats_by_type_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_vof_threats_by_type_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_vof_threats_by_type_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail vof threats by type threat detected  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_vof_threats_by_type_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailVofThreatsByTypeThreatDetected
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_vof_threats_by_type_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_vof_threats_by_type', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailVofThreatsByTypeThreatDetected',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_vof_threats_by_type_threat_detected_get(self, **kwargs):  # noqa: E501
        """mail vof threats by type threat detected  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_vof_threats_by_type_threat_detected_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailVofThreatsByTypeThreatDetected
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_vof_threats_by_type_threat_detected_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_vof_threats_by_type_threat_detected_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_vof_threats_by_type_threat_detected_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail vof threats by type threat detected  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_vof_threats_by_type_threat_detected_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailVofThreatsByTypeThreatDetected
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_vof_threats_by_type_threat_detected_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_vof_threats_by_type/threat_detected', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailVofThreatsByTypeThreatDetected',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_vof_threats_rewritten_url_get(self, **kwargs):  # noqa: E501
        """mail vof threats rewritten url rewritten url  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_vof_threats_rewritten_url_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailVofThreatsRewrittenUrlRewrittenUrl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_vof_threats_rewritten_url_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_vof_threats_rewritten_url_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_vof_threats_rewritten_url_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail vof threats rewritten url rewritten url  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_vof_threats_rewritten_url_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailVofThreatsRewrittenUrlRewrittenUrl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_vof_threats_rewritten_url_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_vof_threats_rewritten_url', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailVofThreatsRewrittenUrlRewrittenUrl',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_mail_vof_threats_rewritten_url_rewritten_url_get(self, **kwargs):  # noqa: E501
        """mail vof threats rewritten url rewritten url  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_vof_threats_rewritten_url_rewritten_url_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailVofThreatsRewrittenUrlRewrittenUrl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_mail_vof_threats_rewritten_url_rewritten_url_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_mail_vof_threats_rewritten_url_rewritten_url_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_mail_vof_threats_rewritten_url_rewritten_url_get_with_http_info(self, **kwargs):  # noqa: E501
        """mail vof threats rewritten url rewritten url  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_mail_vof_threats_rewritten_url_rewritten_url_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingMailVofThreatsRewrittenUrlRewrittenUrl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_mail_vof_threats_rewritten_url_rewritten_url_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/mail_vof_threats_rewritten_url/rewritten_url', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingMailVofThreatsRewrittenUrlRewrittenUrl',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_reporting_system_begin_time_get(self, **kwargs):  # noqa: E501
        """reporting system begin time  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_reporting_system_begin_time_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingReportingSystemBeginTime
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_reporting_system_begin_time_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_reporting_system_begin_time_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_reporting_system_begin_time_get_with_http_info(self, **kwargs):  # noqa: E501
        """reporting system begin time  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_reporting_system_begin_time_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingReportingSystemBeginTime
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_reporting_system_begin_time_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/reporting_system/begin_time', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingReportingSystemBeginTime',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_reporting_system_end_time_get(self, **kwargs):  # noqa: E501
        """reporting system end time  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_reporting_system_end_time_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingReportingSystemEndTime
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_reporting_system_end_time_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_reporting_system_end_time_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_reporting_system_end_time_get_with_http_info(self, **kwargs):  # noqa: E501
        """reporting system end time  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_reporting_system_end_time_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingReportingSystemEndTime
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_reporting_system_end_time_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/reporting_system/end_time', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingReportingSystemEndTime',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_reporting_system_get(self, **kwargs):  # noqa: E501
        """reporting system begin time  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_reporting_system_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingReportingSystemBeginTime
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_reporting_system_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_reporting_system_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_reporting_system_get_with_http_info(self, **kwargs):  # noqa: E501
        """reporting system begin time  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_reporting_system_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingReportingSystemBeginTime
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_reporting_system_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/reporting_system', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingReportingSystemBeginTime',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_reporting_reporting_system_heartbeat_get(self, **kwargs):  # noqa: E501
        """reporting system heartbeat  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_reporting_system_heartbeat_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingReportingSystemHeartbeat
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_reporting_reporting_system_heartbeat_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_reporting_reporting_system_heartbeat_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_reporting_reporting_system_heartbeat_get_with_http_info(self, **kwargs):  # noqa: E501
        """reporting system heartbeat  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_reporting_reporting_system_heartbeat_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str device_type:
        :param str top:
        :return: ReportingReportingSystemHeartbeat
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'device_type', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_reporting_reporting_system_heartbeat_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/reporting/reporting_system/heartbeat', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportingReportingSystemHeartbeat',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
