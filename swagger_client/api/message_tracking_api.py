# coding: utf-8

"""
    Secure Email Gateway API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class MessageTrackingApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def esa_api_v20_message_tracking_amp_details_get(self, **kwargs):  # noqa: E501
        """Retrieve details of AMP action details of messages with different attributes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_message_tracking_amp_details_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str icid:
        :param str mid:
        :param str serial_number:
        :return: MessageTrackingAmpDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_message_tracking_amp_details_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_message_tracking_amp_details_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_message_tracking_amp_details_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve details of AMP action details of messages with different attributes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_message_tracking_amp_details_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str icid:
        :param str mid:
        :param str serial_number:
        :return: MessageTrackingAmpDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'icid', 'mid', 'serial_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_message_tracking_amp_details_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'icid' in params:
            query_params.append(('icid', params['icid']))  # noqa: E501
        if 'mid' in params:
            query_params.append(('mid', params['mid']))  # noqa: E501
        if 'serial_number' in params:
            query_params.append(('serialNumber', params['serial_number']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/message-tracking/amp-details', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MessageTrackingAmpDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_message_tracking_connection_details_get(self, **kwargs):  # noqa: E501
        """Retrieve connection details of messages with different attributes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_message_tracking_connection_details_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str icid:
        :param str mid:
        :param str serial_number:
        :return: MessageTrackingConnectionDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_message_tracking_connection_details_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_message_tracking_connection_details_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_message_tracking_connection_details_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve connection details of messages with different attributes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_message_tracking_connection_details_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str icid:
        :param str mid:
        :param str serial_number:
        :return: MessageTrackingConnectionDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'icid', 'mid', 'serial_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_message_tracking_connection_details_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'icid' in params:
            query_params.append(('icid', params['icid']))  # noqa: E501
        if 'mid' in params:
            query_params.append(('mid', params['mid']))  # noqa: E501
        if 'serial_number' in params:
            query_params.append(('serialNumber', params['serial_number']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/message-tracking/connection-details', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MessageTrackingConnectionDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_message_tracking_details_get(self, **kwargs):  # noqa: E501
        """Retrieve details of messages with different attributes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_message_tracking_details_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str icid:
        :param str mid:
        :param str serial_number:
        :return: MessageTrackingDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_message_tracking_details_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_message_tracking_details_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_message_tracking_details_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve details of messages with different attributes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_message_tracking_details_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str icid:
        :param str mid:
        :param str serial_number:
        :return: MessageTrackingDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'icid', 'mid', 'serial_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_message_tracking_details_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'icid' in params:
            query_params.append(('icid', params['icid']))  # noqa: E501
        if 'mid' in params:
            query_params.append(('mid', params['mid']))  # noqa: E501
        if 'serial_number' in params:
            query_params.append(('serialNumber', params['serial_number']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/message-tracking/details', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MessageTrackingDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_message_tracking_dlp_details_get(self, **kwargs):  # noqa: E501
        """Retrieve details of DLP of messages with different attributes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_message_tracking_dlp_details_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str icid:
        :param str mid:
        :param str serial_number:
        :return: MessageTrackingDlpDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_message_tracking_dlp_details_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_message_tracking_dlp_details_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_message_tracking_dlp_details_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve details of DLP of messages with different attributes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_message_tracking_dlp_details_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str icid:
        :param str mid:
        :param str serial_number:
        :return: MessageTrackingDlpDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'icid', 'mid', 'serial_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_message_tracking_dlp_details_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'icid' in params:
            query_params.append(('icid', params['icid']))  # noqa: E501
        if 'mid' in params:
            query_params.append(('mid', params['mid']))  # noqa: E501
        if 'serial_number' in params:
            query_params.append(('serialNumber', params['serial_number']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/message-tracking/dlp-details', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MessageTrackingDlpDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_message_tracking_messages_get(self, **kwargs):  # noqa: E501
        """Message-tracking messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_message_tracking_messages_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str cisco_host:
        :param str search_option:
        :param str offset:
        :param str limit:
        :return: MessageTrackingMessages
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_message_tracking_messages_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_message_tracking_messages_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_message_tracking_messages_get_with_http_info(self, **kwargs):  # noqa: E501
        """Message-tracking messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_message_tracking_messages_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str cisco_host:
        :param str search_option:
        :param str offset:
        :param str limit:
        :return: MessageTrackingMessages
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'cisco_host', 'search_option', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_message_tracking_messages_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'cisco_host' in params:
            query_params.append(('ciscoHost', params['cisco_host']))  # noqa: E501
        if 'search_option' in params:
            query_params.append(('searchOption', params['search_option']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/message-tracking/messages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MessageTrackingMessages',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esa_api_v20_message_tracking_url_details_get(self, **kwargs):  # noqa: E501
        """Retrieve details of URL details of messages with different attributes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_message_tracking_url_details_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str icid:
        :param str mid:
        :param str serial_number:
        :return: MessageTrackingUrlDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.esa_api_v20_message_tracking_url_details_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.esa_api_v20_message_tracking_url_details_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def esa_api_v20_message_tracking_url_details_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve details of URL details of messages with different attributes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esa_api_v20_message_tracking_url_details_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :param str icid:
        :param str mid:
        :param str serial_number:
        :return: MessageTrackingUrlDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'icid', 'mid', 'serial_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esa_api_v20_message_tracking_url_details_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'icid' in params:
            query_params.append(('icid', params['icid']))  # noqa: E501
        if 'mid' in params:
            query_params.append(('mid', params['mid']))  # noqa: E501
        if 'serial_number' in params:
            query_params.append(('serialNumber', params['serial_number']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json, text/plain, */*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'UserSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/esa/api/v2.0/message-tracking/url-details', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MessageTrackingUrlDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
