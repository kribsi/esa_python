# coding: utf-8

"""
    Secure Email Gateway API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReportingMailIncomingMalwareThreatFileDetailByFilenameDataResultSet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amp_verdict_time': 'list[dict(str, object)]',
        'console_url': 'list[dict(str, object)]',
        'detected_amp': 'list[dict(str, object)]',
        'score': 'list[dict(str, object)]',
        'threat_name': 'list[dict(str, object)]',
        'threat_type': 'list[dict(str, object)]',
        'upload_flag': 'list[dict(str, object)]'
    }

    attribute_map = {
        'amp_verdict_time': 'amp_verdict_time',
        'console_url': 'console_url',
        'detected_amp': 'detected_amp',
        'score': 'score',
        'threat_name': 'threat_name',
        'threat_type': 'threat_type',
        'upload_flag': 'upload_flag'
    }

    def __init__(self, amp_verdict_time=None, console_url=None, detected_amp=None, score=None, threat_name=None, threat_type=None, upload_flag=None):  # noqa: E501
        """ReportingMailIncomingMalwareThreatFileDetailByFilenameDataResultSet - a model defined in Swagger"""  # noqa: E501
        self._amp_verdict_time = None
        self._console_url = None
        self._detected_amp = None
        self._score = None
        self._threat_name = None
        self._threat_type = None
        self._upload_flag = None
        self.discriminator = None
        if amp_verdict_time is not None:
            self.amp_verdict_time = amp_verdict_time
        if console_url is not None:
            self.console_url = console_url
        if detected_amp is not None:
            self.detected_amp = detected_amp
        if score is not None:
            self.score = score
        if threat_name is not None:
            self.threat_name = threat_name
        if threat_type is not None:
            self.threat_type = threat_type
        if upload_flag is not None:
            self.upload_flag = upload_flag

    @property
    def amp_verdict_time(self):
        """Gets the amp_verdict_time of this ReportingMailIncomingMalwareThreatFileDetailByFilenameDataResultSet.  # noqa: E501


        :return: The amp_verdict_time of this ReportingMailIncomingMalwareThreatFileDetailByFilenameDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._amp_verdict_time

    @amp_verdict_time.setter
    def amp_verdict_time(self, amp_verdict_time):
        """Sets the amp_verdict_time of this ReportingMailIncomingMalwareThreatFileDetailByFilenameDataResultSet.


        :param amp_verdict_time: The amp_verdict_time of this ReportingMailIncomingMalwareThreatFileDetailByFilenameDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._amp_verdict_time = amp_verdict_time

    @property
    def console_url(self):
        """Gets the console_url of this ReportingMailIncomingMalwareThreatFileDetailByFilenameDataResultSet.  # noqa: E501


        :return: The console_url of this ReportingMailIncomingMalwareThreatFileDetailByFilenameDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._console_url

    @console_url.setter
    def console_url(self, console_url):
        """Sets the console_url of this ReportingMailIncomingMalwareThreatFileDetailByFilenameDataResultSet.


        :param console_url: The console_url of this ReportingMailIncomingMalwareThreatFileDetailByFilenameDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._console_url = console_url

    @property
    def detected_amp(self):
        """Gets the detected_amp of this ReportingMailIncomingMalwareThreatFileDetailByFilenameDataResultSet.  # noqa: E501


        :return: The detected_amp of this ReportingMailIncomingMalwareThreatFileDetailByFilenameDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._detected_amp

    @detected_amp.setter
    def detected_amp(self, detected_amp):
        """Sets the detected_amp of this ReportingMailIncomingMalwareThreatFileDetailByFilenameDataResultSet.


        :param detected_amp: The detected_amp of this ReportingMailIncomingMalwareThreatFileDetailByFilenameDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._detected_amp = detected_amp

    @property
    def score(self):
        """Gets the score of this ReportingMailIncomingMalwareThreatFileDetailByFilenameDataResultSet.  # noqa: E501


        :return: The score of this ReportingMailIncomingMalwareThreatFileDetailByFilenameDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this ReportingMailIncomingMalwareThreatFileDetailByFilenameDataResultSet.


        :param score: The score of this ReportingMailIncomingMalwareThreatFileDetailByFilenameDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._score = score

    @property
    def threat_name(self):
        """Gets the threat_name of this ReportingMailIncomingMalwareThreatFileDetailByFilenameDataResultSet.  # noqa: E501


        :return: The threat_name of this ReportingMailIncomingMalwareThreatFileDetailByFilenameDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._threat_name

    @threat_name.setter
    def threat_name(self, threat_name):
        """Sets the threat_name of this ReportingMailIncomingMalwareThreatFileDetailByFilenameDataResultSet.


        :param threat_name: The threat_name of this ReportingMailIncomingMalwareThreatFileDetailByFilenameDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._threat_name = threat_name

    @property
    def threat_type(self):
        """Gets the threat_type of this ReportingMailIncomingMalwareThreatFileDetailByFilenameDataResultSet.  # noqa: E501


        :return: The threat_type of this ReportingMailIncomingMalwareThreatFileDetailByFilenameDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._threat_type

    @threat_type.setter
    def threat_type(self, threat_type):
        """Sets the threat_type of this ReportingMailIncomingMalwareThreatFileDetailByFilenameDataResultSet.


        :param threat_type: The threat_type of this ReportingMailIncomingMalwareThreatFileDetailByFilenameDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._threat_type = threat_type

    @property
    def upload_flag(self):
        """Gets the upload_flag of this ReportingMailIncomingMalwareThreatFileDetailByFilenameDataResultSet.  # noqa: E501


        :return: The upload_flag of this ReportingMailIncomingMalwareThreatFileDetailByFilenameDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._upload_flag

    @upload_flag.setter
    def upload_flag(self, upload_flag):
        """Sets the upload_flag of this ReportingMailIncomingMalwareThreatFileDetailByFilenameDataResultSet.


        :param upload_flag: The upload_flag of this ReportingMailIncomingMalwareThreatFileDetailByFilenameDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._upload_flag = upload_flag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportingMailIncomingMalwareThreatFileDetailByFilenameDataResultSet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportingMailIncomingMalwareThreatFileDetailByFilenameDataResultSet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
