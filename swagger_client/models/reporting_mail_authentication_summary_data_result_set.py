# coding: utf-8

"""
    Secure Email Gateway API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReportingMailAuthenticationSummaryDataResultSet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'received_auth': 'list[dict(str, object)]',
        'received_conn_auth_fail': 'list[dict(str, object)]',
        'received_conn_auth_success': 'list[dict(str, object)]',
        'received_conn_cert_fail': 'list[dict(str, object)]',
        'received_conn_cert_success': 'list[dict(str, object)]',
        'received_conn_noauth': 'list[dict(str, object)]',
        'received_conn_total': 'list[dict(str, object)]',
        'received_noauth': 'list[dict(str, object)]',
        'received_total': 'list[dict(str, object)]'
    }

    attribute_map = {
        'received_auth': 'received_auth',
        'received_conn_auth_fail': 'received_conn_auth_fail',
        'received_conn_auth_success': 'received_conn_auth_success',
        'received_conn_cert_fail': 'received_conn_cert_fail',
        'received_conn_cert_success': 'received_conn_cert_success',
        'received_conn_noauth': 'received_conn_noauth',
        'received_conn_total': 'received_conn_total',
        'received_noauth': 'received_noauth',
        'received_total': 'received_total'
    }

    def __init__(self, received_auth=None, received_conn_auth_fail=None, received_conn_auth_success=None, received_conn_cert_fail=None, received_conn_cert_success=None, received_conn_noauth=None, received_conn_total=None, received_noauth=None, received_total=None):  # noqa: E501
        """ReportingMailAuthenticationSummaryDataResultSet - a model defined in Swagger"""  # noqa: E501
        self._received_auth = None
        self._received_conn_auth_fail = None
        self._received_conn_auth_success = None
        self._received_conn_cert_fail = None
        self._received_conn_cert_success = None
        self._received_conn_noauth = None
        self._received_conn_total = None
        self._received_noauth = None
        self._received_total = None
        self.discriminator = None
        if received_auth is not None:
            self.received_auth = received_auth
        if received_conn_auth_fail is not None:
            self.received_conn_auth_fail = received_conn_auth_fail
        if received_conn_auth_success is not None:
            self.received_conn_auth_success = received_conn_auth_success
        if received_conn_cert_fail is not None:
            self.received_conn_cert_fail = received_conn_cert_fail
        if received_conn_cert_success is not None:
            self.received_conn_cert_success = received_conn_cert_success
        if received_conn_noauth is not None:
            self.received_conn_noauth = received_conn_noauth
        if received_conn_total is not None:
            self.received_conn_total = received_conn_total
        if received_noauth is not None:
            self.received_noauth = received_noauth
        if received_total is not None:
            self.received_total = received_total

    @property
    def received_auth(self):
        """Gets the received_auth of this ReportingMailAuthenticationSummaryDataResultSet.  # noqa: E501


        :return: The received_auth of this ReportingMailAuthenticationSummaryDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._received_auth

    @received_auth.setter
    def received_auth(self, received_auth):
        """Sets the received_auth of this ReportingMailAuthenticationSummaryDataResultSet.


        :param received_auth: The received_auth of this ReportingMailAuthenticationSummaryDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._received_auth = received_auth

    @property
    def received_conn_auth_fail(self):
        """Gets the received_conn_auth_fail of this ReportingMailAuthenticationSummaryDataResultSet.  # noqa: E501


        :return: The received_conn_auth_fail of this ReportingMailAuthenticationSummaryDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._received_conn_auth_fail

    @received_conn_auth_fail.setter
    def received_conn_auth_fail(self, received_conn_auth_fail):
        """Sets the received_conn_auth_fail of this ReportingMailAuthenticationSummaryDataResultSet.


        :param received_conn_auth_fail: The received_conn_auth_fail of this ReportingMailAuthenticationSummaryDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._received_conn_auth_fail = received_conn_auth_fail

    @property
    def received_conn_auth_success(self):
        """Gets the received_conn_auth_success of this ReportingMailAuthenticationSummaryDataResultSet.  # noqa: E501


        :return: The received_conn_auth_success of this ReportingMailAuthenticationSummaryDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._received_conn_auth_success

    @received_conn_auth_success.setter
    def received_conn_auth_success(self, received_conn_auth_success):
        """Sets the received_conn_auth_success of this ReportingMailAuthenticationSummaryDataResultSet.


        :param received_conn_auth_success: The received_conn_auth_success of this ReportingMailAuthenticationSummaryDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._received_conn_auth_success = received_conn_auth_success

    @property
    def received_conn_cert_fail(self):
        """Gets the received_conn_cert_fail of this ReportingMailAuthenticationSummaryDataResultSet.  # noqa: E501


        :return: The received_conn_cert_fail of this ReportingMailAuthenticationSummaryDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._received_conn_cert_fail

    @received_conn_cert_fail.setter
    def received_conn_cert_fail(self, received_conn_cert_fail):
        """Sets the received_conn_cert_fail of this ReportingMailAuthenticationSummaryDataResultSet.


        :param received_conn_cert_fail: The received_conn_cert_fail of this ReportingMailAuthenticationSummaryDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._received_conn_cert_fail = received_conn_cert_fail

    @property
    def received_conn_cert_success(self):
        """Gets the received_conn_cert_success of this ReportingMailAuthenticationSummaryDataResultSet.  # noqa: E501


        :return: The received_conn_cert_success of this ReportingMailAuthenticationSummaryDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._received_conn_cert_success

    @received_conn_cert_success.setter
    def received_conn_cert_success(self, received_conn_cert_success):
        """Sets the received_conn_cert_success of this ReportingMailAuthenticationSummaryDataResultSet.


        :param received_conn_cert_success: The received_conn_cert_success of this ReportingMailAuthenticationSummaryDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._received_conn_cert_success = received_conn_cert_success

    @property
    def received_conn_noauth(self):
        """Gets the received_conn_noauth of this ReportingMailAuthenticationSummaryDataResultSet.  # noqa: E501


        :return: The received_conn_noauth of this ReportingMailAuthenticationSummaryDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._received_conn_noauth

    @received_conn_noauth.setter
    def received_conn_noauth(self, received_conn_noauth):
        """Sets the received_conn_noauth of this ReportingMailAuthenticationSummaryDataResultSet.


        :param received_conn_noauth: The received_conn_noauth of this ReportingMailAuthenticationSummaryDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._received_conn_noauth = received_conn_noauth

    @property
    def received_conn_total(self):
        """Gets the received_conn_total of this ReportingMailAuthenticationSummaryDataResultSet.  # noqa: E501


        :return: The received_conn_total of this ReportingMailAuthenticationSummaryDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._received_conn_total

    @received_conn_total.setter
    def received_conn_total(self, received_conn_total):
        """Sets the received_conn_total of this ReportingMailAuthenticationSummaryDataResultSet.


        :param received_conn_total: The received_conn_total of this ReportingMailAuthenticationSummaryDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._received_conn_total = received_conn_total

    @property
    def received_noauth(self):
        """Gets the received_noauth of this ReportingMailAuthenticationSummaryDataResultSet.  # noqa: E501


        :return: The received_noauth of this ReportingMailAuthenticationSummaryDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._received_noauth

    @received_noauth.setter
    def received_noauth(self, received_noauth):
        """Sets the received_noauth of this ReportingMailAuthenticationSummaryDataResultSet.


        :param received_noauth: The received_noauth of this ReportingMailAuthenticationSummaryDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._received_noauth = received_noauth

    @property
    def received_total(self):
        """Gets the received_total of this ReportingMailAuthenticationSummaryDataResultSet.  # noqa: E501


        :return: The received_total of this ReportingMailAuthenticationSummaryDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._received_total

    @received_total.setter
    def received_total(self, received_total):
        """Sets the received_total of this ReportingMailAuthenticationSummaryDataResultSet.


        :param received_total: The received_total of this ReportingMailAuthenticationSummaryDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._received_total = received_total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportingMailAuthenticationSummaryDataResultSet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportingMailAuthenticationSummaryDataResultSet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
