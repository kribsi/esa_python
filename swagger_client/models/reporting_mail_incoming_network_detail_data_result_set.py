# coding: utf-8

"""
    Secure Email Gateway API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReportingMailIncomingNetworkDetailDataResultSet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'blocked_dmarc': 'list[dict(str, object)]',
        'blocked_invalid_recipient': 'list[dict(str, object)]',
        'blocked_reputation': 'list[dict(str, object)]',
        'bulk_mail': 'list[dict(str, object)]',
        'detected_amp': 'list[dict(str, object)]',
        'detected_spam': 'list[dict(str, object)]',
        'detected_virus': 'list[dict(str, object)]',
        'last_sender_group': 'list[dict(str, object)]',
        'last_sender_group_name': 'list[dict(str, object)]',
        'marketing_mail': 'list[dict(str, object)]',
        'social_mail': 'list[dict(str, object)]',
        'threat_content_filter': 'list[dict(str, object)]',
        'total_accepted_connections': 'list[dict(str, object)]',
        'total_clean_recipients': 'list[dict(str, object)]',
        'total_graymail_recipients': 'list[dict(str, object)]',
        'total_recipients': 'list[dict(str, object)]',
        'total_rejected_connections': 'list[dict(str, object)]',
        'total_threat_recipients': 'list[dict(str, object)]',
        'total_throttled_recipients': 'list[dict(str, object)]'
    }

    attribute_map = {
        'blocked_dmarc': 'blocked_dmarc',
        'blocked_invalid_recipient': 'blocked_invalid_recipient',
        'blocked_reputation': 'blocked_reputation',
        'bulk_mail': 'bulk_mail',
        'detected_amp': 'detected_amp',
        'detected_spam': 'detected_spam',
        'detected_virus': 'detected_virus',
        'last_sender_group': 'last_sender_group',
        'last_sender_group_name': 'last_sender_group_name',
        'marketing_mail': 'marketing_mail',
        'social_mail': 'social_mail',
        'threat_content_filter': 'threat_content_filter',
        'total_accepted_connections': 'total_accepted_connections',
        'total_clean_recipients': 'total_clean_recipients',
        'total_graymail_recipients': 'total_graymail_recipients',
        'total_recipients': 'total_recipients',
        'total_rejected_connections': 'total_rejected_connections',
        'total_threat_recipients': 'total_threat_recipients',
        'total_throttled_recipients': 'total_throttled_recipients'
    }

    def __init__(self, blocked_dmarc=None, blocked_invalid_recipient=None, blocked_reputation=None, bulk_mail=None, detected_amp=None, detected_spam=None, detected_virus=None, last_sender_group=None, last_sender_group_name=None, marketing_mail=None, social_mail=None, threat_content_filter=None, total_accepted_connections=None, total_clean_recipients=None, total_graymail_recipients=None, total_recipients=None, total_rejected_connections=None, total_threat_recipients=None, total_throttled_recipients=None):  # noqa: E501
        """ReportingMailIncomingNetworkDetailDataResultSet - a model defined in Swagger"""  # noqa: E501
        self._blocked_dmarc = None
        self._blocked_invalid_recipient = None
        self._blocked_reputation = None
        self._bulk_mail = None
        self._detected_amp = None
        self._detected_spam = None
        self._detected_virus = None
        self._last_sender_group = None
        self._last_sender_group_name = None
        self._marketing_mail = None
        self._social_mail = None
        self._threat_content_filter = None
        self._total_accepted_connections = None
        self._total_clean_recipients = None
        self._total_graymail_recipients = None
        self._total_recipients = None
        self._total_rejected_connections = None
        self._total_threat_recipients = None
        self._total_throttled_recipients = None
        self.discriminator = None
        if blocked_dmarc is not None:
            self.blocked_dmarc = blocked_dmarc
        if blocked_invalid_recipient is not None:
            self.blocked_invalid_recipient = blocked_invalid_recipient
        if blocked_reputation is not None:
            self.blocked_reputation = blocked_reputation
        if bulk_mail is not None:
            self.bulk_mail = bulk_mail
        if detected_amp is not None:
            self.detected_amp = detected_amp
        if detected_spam is not None:
            self.detected_spam = detected_spam
        if detected_virus is not None:
            self.detected_virus = detected_virus
        if last_sender_group is not None:
            self.last_sender_group = last_sender_group
        if last_sender_group_name is not None:
            self.last_sender_group_name = last_sender_group_name
        if marketing_mail is not None:
            self.marketing_mail = marketing_mail
        if social_mail is not None:
            self.social_mail = social_mail
        if threat_content_filter is not None:
            self.threat_content_filter = threat_content_filter
        if total_accepted_connections is not None:
            self.total_accepted_connections = total_accepted_connections
        if total_clean_recipients is not None:
            self.total_clean_recipients = total_clean_recipients
        if total_graymail_recipients is not None:
            self.total_graymail_recipients = total_graymail_recipients
        if total_recipients is not None:
            self.total_recipients = total_recipients
        if total_rejected_connections is not None:
            self.total_rejected_connections = total_rejected_connections
        if total_threat_recipients is not None:
            self.total_threat_recipients = total_threat_recipients
        if total_throttled_recipients is not None:
            self.total_throttled_recipients = total_throttled_recipients

    @property
    def blocked_dmarc(self):
        """Gets the blocked_dmarc of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501


        :return: The blocked_dmarc of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._blocked_dmarc

    @blocked_dmarc.setter
    def blocked_dmarc(self, blocked_dmarc):
        """Sets the blocked_dmarc of this ReportingMailIncomingNetworkDetailDataResultSet.


        :param blocked_dmarc: The blocked_dmarc of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._blocked_dmarc = blocked_dmarc

    @property
    def blocked_invalid_recipient(self):
        """Gets the blocked_invalid_recipient of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501


        :return: The blocked_invalid_recipient of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._blocked_invalid_recipient

    @blocked_invalid_recipient.setter
    def blocked_invalid_recipient(self, blocked_invalid_recipient):
        """Sets the blocked_invalid_recipient of this ReportingMailIncomingNetworkDetailDataResultSet.


        :param blocked_invalid_recipient: The blocked_invalid_recipient of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._blocked_invalid_recipient = blocked_invalid_recipient

    @property
    def blocked_reputation(self):
        """Gets the blocked_reputation of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501


        :return: The blocked_reputation of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._blocked_reputation

    @blocked_reputation.setter
    def blocked_reputation(self, blocked_reputation):
        """Sets the blocked_reputation of this ReportingMailIncomingNetworkDetailDataResultSet.


        :param blocked_reputation: The blocked_reputation of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._blocked_reputation = blocked_reputation

    @property
    def bulk_mail(self):
        """Gets the bulk_mail of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501


        :return: The bulk_mail of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._bulk_mail

    @bulk_mail.setter
    def bulk_mail(self, bulk_mail):
        """Sets the bulk_mail of this ReportingMailIncomingNetworkDetailDataResultSet.


        :param bulk_mail: The bulk_mail of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._bulk_mail = bulk_mail

    @property
    def detected_amp(self):
        """Gets the detected_amp of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501


        :return: The detected_amp of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._detected_amp

    @detected_amp.setter
    def detected_amp(self, detected_amp):
        """Sets the detected_amp of this ReportingMailIncomingNetworkDetailDataResultSet.


        :param detected_amp: The detected_amp of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._detected_amp = detected_amp

    @property
    def detected_spam(self):
        """Gets the detected_spam of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501


        :return: The detected_spam of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._detected_spam

    @detected_spam.setter
    def detected_spam(self, detected_spam):
        """Sets the detected_spam of this ReportingMailIncomingNetworkDetailDataResultSet.


        :param detected_spam: The detected_spam of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._detected_spam = detected_spam

    @property
    def detected_virus(self):
        """Gets the detected_virus of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501


        :return: The detected_virus of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._detected_virus

    @detected_virus.setter
    def detected_virus(self, detected_virus):
        """Sets the detected_virus of this ReportingMailIncomingNetworkDetailDataResultSet.


        :param detected_virus: The detected_virus of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._detected_virus = detected_virus

    @property
    def last_sender_group(self):
        """Gets the last_sender_group of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501


        :return: The last_sender_group of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._last_sender_group

    @last_sender_group.setter
    def last_sender_group(self, last_sender_group):
        """Sets the last_sender_group of this ReportingMailIncomingNetworkDetailDataResultSet.


        :param last_sender_group: The last_sender_group of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._last_sender_group = last_sender_group

    @property
    def last_sender_group_name(self):
        """Gets the last_sender_group_name of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501


        :return: The last_sender_group_name of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._last_sender_group_name

    @last_sender_group_name.setter
    def last_sender_group_name(self, last_sender_group_name):
        """Sets the last_sender_group_name of this ReportingMailIncomingNetworkDetailDataResultSet.


        :param last_sender_group_name: The last_sender_group_name of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._last_sender_group_name = last_sender_group_name

    @property
    def marketing_mail(self):
        """Gets the marketing_mail of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501


        :return: The marketing_mail of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._marketing_mail

    @marketing_mail.setter
    def marketing_mail(self, marketing_mail):
        """Sets the marketing_mail of this ReportingMailIncomingNetworkDetailDataResultSet.


        :param marketing_mail: The marketing_mail of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._marketing_mail = marketing_mail

    @property
    def social_mail(self):
        """Gets the social_mail of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501


        :return: The social_mail of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._social_mail

    @social_mail.setter
    def social_mail(self, social_mail):
        """Sets the social_mail of this ReportingMailIncomingNetworkDetailDataResultSet.


        :param social_mail: The social_mail of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._social_mail = social_mail

    @property
    def threat_content_filter(self):
        """Gets the threat_content_filter of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501


        :return: The threat_content_filter of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._threat_content_filter

    @threat_content_filter.setter
    def threat_content_filter(self, threat_content_filter):
        """Sets the threat_content_filter of this ReportingMailIncomingNetworkDetailDataResultSet.


        :param threat_content_filter: The threat_content_filter of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._threat_content_filter = threat_content_filter

    @property
    def total_accepted_connections(self):
        """Gets the total_accepted_connections of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501


        :return: The total_accepted_connections of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._total_accepted_connections

    @total_accepted_connections.setter
    def total_accepted_connections(self, total_accepted_connections):
        """Sets the total_accepted_connections of this ReportingMailIncomingNetworkDetailDataResultSet.


        :param total_accepted_connections: The total_accepted_connections of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._total_accepted_connections = total_accepted_connections

    @property
    def total_clean_recipients(self):
        """Gets the total_clean_recipients of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501


        :return: The total_clean_recipients of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._total_clean_recipients

    @total_clean_recipients.setter
    def total_clean_recipients(self, total_clean_recipients):
        """Sets the total_clean_recipients of this ReportingMailIncomingNetworkDetailDataResultSet.


        :param total_clean_recipients: The total_clean_recipients of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._total_clean_recipients = total_clean_recipients

    @property
    def total_graymail_recipients(self):
        """Gets the total_graymail_recipients of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501


        :return: The total_graymail_recipients of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._total_graymail_recipients

    @total_graymail_recipients.setter
    def total_graymail_recipients(self, total_graymail_recipients):
        """Sets the total_graymail_recipients of this ReportingMailIncomingNetworkDetailDataResultSet.


        :param total_graymail_recipients: The total_graymail_recipients of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._total_graymail_recipients = total_graymail_recipients

    @property
    def total_recipients(self):
        """Gets the total_recipients of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501


        :return: The total_recipients of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._total_recipients

    @total_recipients.setter
    def total_recipients(self, total_recipients):
        """Sets the total_recipients of this ReportingMailIncomingNetworkDetailDataResultSet.


        :param total_recipients: The total_recipients of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._total_recipients = total_recipients

    @property
    def total_rejected_connections(self):
        """Gets the total_rejected_connections of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501


        :return: The total_rejected_connections of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._total_rejected_connections

    @total_rejected_connections.setter
    def total_rejected_connections(self, total_rejected_connections):
        """Sets the total_rejected_connections of this ReportingMailIncomingNetworkDetailDataResultSet.


        :param total_rejected_connections: The total_rejected_connections of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._total_rejected_connections = total_rejected_connections

    @property
    def total_threat_recipients(self):
        """Gets the total_threat_recipients of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501


        :return: The total_threat_recipients of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._total_threat_recipients

    @total_threat_recipients.setter
    def total_threat_recipients(self, total_threat_recipients):
        """Sets the total_threat_recipients of this ReportingMailIncomingNetworkDetailDataResultSet.


        :param total_threat_recipients: The total_threat_recipients of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._total_threat_recipients = total_threat_recipients

    @property
    def total_throttled_recipients(self):
        """Gets the total_throttled_recipients of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501


        :return: The total_throttled_recipients of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._total_throttled_recipients

    @total_throttled_recipients.setter
    def total_throttled_recipients(self, total_throttled_recipients):
        """Sets the total_throttled_recipients of this ReportingMailIncomingNetworkDetailDataResultSet.


        :param total_throttled_recipients: The total_throttled_recipients of this ReportingMailIncomingNetworkDetailDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._total_throttled_recipients = total_throttled_recipients

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportingMailIncomingNetworkDetailDataResultSet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportingMailIncomingNetworkDetailDataResultSet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
