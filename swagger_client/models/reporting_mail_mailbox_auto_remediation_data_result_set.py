# coding: utf-8

"""
    Secure Email Gateway API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReportingMailMailboxAutoRemediationDataResultSet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'list[dict(str, object)]',
        'completed_timestamp': 'list[dict(str, object)]',
        'filenames': 'list[dict(str, object)]',
        'rcpts_failure': 'list[dict(str, object)]',
        'rcpts_success': 'list[dict(str, object)]',
        'profile': 'list[dict(str, object)]',
        'reason': 'list[dict(str, object)]'
    }

    attribute_map = {
        'action': 'action',
        'completed_timestamp': 'completed_timestamp',
        'filenames': 'filenames',
        'rcpts_failure': 'rcpts_failure',
        'rcpts_success': 'rcpts_success',
        'profile': 'profile',
        'reason': 'reason'
    }

    def __init__(self, action=None, completed_timestamp=None, filenames=None, rcpts_failure=None, rcpts_success=None, profile=None, reason=None):  # noqa: E501
        """ReportingMailMailboxAutoRemediationDataResultSet - a model defined in Swagger"""  # noqa: E501
        self._action = None
        self._completed_timestamp = None
        self._filenames = None
        self._rcpts_failure = None
        self._rcpts_success = None
        self._profile = None
        self._reason = None
        self.discriminator = None
        if action is not None:
            self.action = action
        if completed_timestamp is not None:
            self.completed_timestamp = completed_timestamp
        if filenames is not None:
            self.filenames = filenames
        if rcpts_failure is not None:
            self.rcpts_failure = rcpts_failure
        if rcpts_success is not None:
            self.rcpts_success = rcpts_success
        if profile is not None:
            self.profile = profile
        if reason is not None:
            self.reason = reason

    @property
    def action(self):
        """Gets the action of this ReportingMailMailboxAutoRemediationDataResultSet.  # noqa: E501


        :return: The action of this ReportingMailMailboxAutoRemediationDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this ReportingMailMailboxAutoRemediationDataResultSet.


        :param action: The action of this ReportingMailMailboxAutoRemediationDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._action = action

    @property
    def completed_timestamp(self):
        """Gets the completed_timestamp of this ReportingMailMailboxAutoRemediationDataResultSet.  # noqa: E501


        :return: The completed_timestamp of this ReportingMailMailboxAutoRemediationDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._completed_timestamp

    @completed_timestamp.setter
    def completed_timestamp(self, completed_timestamp):
        """Sets the completed_timestamp of this ReportingMailMailboxAutoRemediationDataResultSet.


        :param completed_timestamp: The completed_timestamp of this ReportingMailMailboxAutoRemediationDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._completed_timestamp = completed_timestamp

    @property
    def filenames(self):
        """Gets the filenames of this ReportingMailMailboxAutoRemediationDataResultSet.  # noqa: E501


        :return: The filenames of this ReportingMailMailboxAutoRemediationDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._filenames

    @filenames.setter
    def filenames(self, filenames):
        """Sets the filenames of this ReportingMailMailboxAutoRemediationDataResultSet.


        :param filenames: The filenames of this ReportingMailMailboxAutoRemediationDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._filenames = filenames

    @property
    def rcpts_failure(self):
        """Gets the rcpts_failure of this ReportingMailMailboxAutoRemediationDataResultSet.  # noqa: E501


        :return: The rcpts_failure of this ReportingMailMailboxAutoRemediationDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._rcpts_failure

    @rcpts_failure.setter
    def rcpts_failure(self, rcpts_failure):
        """Sets the rcpts_failure of this ReportingMailMailboxAutoRemediationDataResultSet.


        :param rcpts_failure: The rcpts_failure of this ReportingMailMailboxAutoRemediationDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._rcpts_failure = rcpts_failure

    @property
    def rcpts_success(self):
        """Gets the rcpts_success of this ReportingMailMailboxAutoRemediationDataResultSet.  # noqa: E501


        :return: The rcpts_success of this ReportingMailMailboxAutoRemediationDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._rcpts_success

    @rcpts_success.setter
    def rcpts_success(self, rcpts_success):
        """Sets the rcpts_success of this ReportingMailMailboxAutoRemediationDataResultSet.


        :param rcpts_success: The rcpts_success of this ReportingMailMailboxAutoRemediationDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._rcpts_success = rcpts_success

    @property
    def profile(self):
        """Gets the profile of this ReportingMailMailboxAutoRemediationDataResultSet.  # noqa: E501


        :return: The profile of this ReportingMailMailboxAutoRemediationDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this ReportingMailMailboxAutoRemediationDataResultSet.


        :param profile: The profile of this ReportingMailMailboxAutoRemediationDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._profile = profile

    @property
    def reason(self):
        """Gets the reason of this ReportingMailMailboxAutoRemediationDataResultSet.  # noqa: E501


        :return: The reason of this ReportingMailMailboxAutoRemediationDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this ReportingMailMailboxAutoRemediationDataResultSet.


        :param reason: The reason of this ReportingMailMailboxAutoRemediationDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._reason = reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportingMailMailboxAutoRemediationDataResultSet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportingMailMailboxAutoRemediationDataResultSet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
