# coding: utf-8

"""
    Secure Email Gateway API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReportingMailIncomingAmpSummaryDataResultSet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'blockedlist': 'list[dict(str, object)]',
        'clamav_lowrisk': 'list[dict(str, object)]',
        'clean': 'list[dict(str, object)]',
        'custom_threshold': 'list[dict(str, object)]',
        'lowrisk': 'list[dict(str, object)]',
        'malware': 'list[dict(str, object)]',
        'unknown': 'list[dict(str, object)]',
        'unscannable': 'list[dict(str, object)]'
    }

    attribute_map = {
        'blockedlist': 'blockedlist',
        'clamav_lowrisk': 'clamav_lowrisk',
        'clean': 'clean',
        'custom_threshold': 'custom_threshold',
        'lowrisk': 'lowrisk',
        'malware': 'malware',
        'unknown': 'unknown',
        'unscannable': 'unscannable'
    }

    def __init__(self, blockedlist=None, clamav_lowrisk=None, clean=None, custom_threshold=None, lowrisk=None, malware=None, unknown=None, unscannable=None):  # noqa: E501
        """ReportingMailIncomingAmpSummaryDataResultSet - a model defined in Swagger"""  # noqa: E501
        self._blockedlist = None
        self._clamav_lowrisk = None
        self._clean = None
        self._custom_threshold = None
        self._lowrisk = None
        self._malware = None
        self._unknown = None
        self._unscannable = None
        self.discriminator = None
        if blockedlist is not None:
            self.blockedlist = blockedlist
        if clamav_lowrisk is not None:
            self.clamav_lowrisk = clamav_lowrisk
        if clean is not None:
            self.clean = clean
        if custom_threshold is not None:
            self.custom_threshold = custom_threshold
        if lowrisk is not None:
            self.lowrisk = lowrisk
        if malware is not None:
            self.malware = malware
        if unknown is not None:
            self.unknown = unknown
        if unscannable is not None:
            self.unscannable = unscannable

    @property
    def blockedlist(self):
        """Gets the blockedlist of this ReportingMailIncomingAmpSummaryDataResultSet.  # noqa: E501


        :return: The blockedlist of this ReportingMailIncomingAmpSummaryDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._blockedlist

    @blockedlist.setter
    def blockedlist(self, blockedlist):
        """Sets the blockedlist of this ReportingMailIncomingAmpSummaryDataResultSet.


        :param blockedlist: The blockedlist of this ReportingMailIncomingAmpSummaryDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._blockedlist = blockedlist

    @property
    def clamav_lowrisk(self):
        """Gets the clamav_lowrisk of this ReportingMailIncomingAmpSummaryDataResultSet.  # noqa: E501


        :return: The clamav_lowrisk of this ReportingMailIncomingAmpSummaryDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._clamav_lowrisk

    @clamav_lowrisk.setter
    def clamav_lowrisk(self, clamav_lowrisk):
        """Sets the clamav_lowrisk of this ReportingMailIncomingAmpSummaryDataResultSet.


        :param clamav_lowrisk: The clamav_lowrisk of this ReportingMailIncomingAmpSummaryDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._clamav_lowrisk = clamav_lowrisk

    @property
    def clean(self):
        """Gets the clean of this ReportingMailIncomingAmpSummaryDataResultSet.  # noqa: E501


        :return: The clean of this ReportingMailIncomingAmpSummaryDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._clean

    @clean.setter
    def clean(self, clean):
        """Sets the clean of this ReportingMailIncomingAmpSummaryDataResultSet.


        :param clean: The clean of this ReportingMailIncomingAmpSummaryDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._clean = clean

    @property
    def custom_threshold(self):
        """Gets the custom_threshold of this ReportingMailIncomingAmpSummaryDataResultSet.  # noqa: E501


        :return: The custom_threshold of this ReportingMailIncomingAmpSummaryDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._custom_threshold

    @custom_threshold.setter
    def custom_threshold(self, custom_threshold):
        """Sets the custom_threshold of this ReportingMailIncomingAmpSummaryDataResultSet.


        :param custom_threshold: The custom_threshold of this ReportingMailIncomingAmpSummaryDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._custom_threshold = custom_threshold

    @property
    def lowrisk(self):
        """Gets the lowrisk of this ReportingMailIncomingAmpSummaryDataResultSet.  # noqa: E501


        :return: The lowrisk of this ReportingMailIncomingAmpSummaryDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._lowrisk

    @lowrisk.setter
    def lowrisk(self, lowrisk):
        """Sets the lowrisk of this ReportingMailIncomingAmpSummaryDataResultSet.


        :param lowrisk: The lowrisk of this ReportingMailIncomingAmpSummaryDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._lowrisk = lowrisk

    @property
    def malware(self):
        """Gets the malware of this ReportingMailIncomingAmpSummaryDataResultSet.  # noqa: E501


        :return: The malware of this ReportingMailIncomingAmpSummaryDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._malware

    @malware.setter
    def malware(self, malware):
        """Sets the malware of this ReportingMailIncomingAmpSummaryDataResultSet.


        :param malware: The malware of this ReportingMailIncomingAmpSummaryDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._malware = malware

    @property
    def unknown(self):
        """Gets the unknown of this ReportingMailIncomingAmpSummaryDataResultSet.  # noqa: E501


        :return: The unknown of this ReportingMailIncomingAmpSummaryDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._unknown

    @unknown.setter
    def unknown(self, unknown):
        """Sets the unknown of this ReportingMailIncomingAmpSummaryDataResultSet.


        :param unknown: The unknown of this ReportingMailIncomingAmpSummaryDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._unknown = unknown

    @property
    def unscannable(self):
        """Gets the unscannable of this ReportingMailIncomingAmpSummaryDataResultSet.  # noqa: E501


        :return: The unscannable of this ReportingMailIncomingAmpSummaryDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._unscannable

    @unscannable.setter
    def unscannable(self, unscannable):
        """Sets the unscannable of this ReportingMailIncomingAmpSummaryDataResultSet.


        :param unscannable: The unscannable of this ReportingMailIncomingAmpSummaryDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._unscannable = unscannable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportingMailIncomingAmpSummaryDataResultSet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportingMailIncomingAmpSummaryDataResultSet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
