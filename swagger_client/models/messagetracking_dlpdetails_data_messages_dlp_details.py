# coding: utf-8

"""
    Secure Email Gateway API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MessagetrackingDlpdetailsDataMessagesDlpDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dlp_matched_content': 'list[MessagetrackingDlpdetailsDataMessagesDlpDetailsDlpMatchedContent]',
        'dlp_policy': 'str',
        'mid': 'str',
        'risk_factor': 'int',
        'violation_severity': 'str'
    }

    attribute_map = {
        'dlp_matched_content': 'dlpMatchedContent',
        'dlp_policy': 'dlpPolicy',
        'mid': 'mid',
        'risk_factor': 'riskFactor',
        'violation_severity': 'violationSeverity'
    }

    def __init__(self, dlp_matched_content=None, dlp_policy=None, mid=None, risk_factor=None, violation_severity=None):  # noqa: E501
        """MessagetrackingDlpdetailsDataMessagesDlpDetails - a model defined in Swagger"""  # noqa: E501
        self._dlp_matched_content = None
        self._dlp_policy = None
        self._mid = None
        self._risk_factor = None
        self._violation_severity = None
        self.discriminator = None
        if dlp_matched_content is not None:
            self.dlp_matched_content = dlp_matched_content
        if dlp_policy is not None:
            self.dlp_policy = dlp_policy
        if mid is not None:
            self.mid = mid
        if risk_factor is not None:
            self.risk_factor = risk_factor
        if violation_severity is not None:
            self.violation_severity = violation_severity

    @property
    def dlp_matched_content(self):
        """Gets the dlp_matched_content of this MessagetrackingDlpdetailsDataMessagesDlpDetails.  # noqa: E501


        :return: The dlp_matched_content of this MessagetrackingDlpdetailsDataMessagesDlpDetails.  # noqa: E501
        :rtype: list[MessagetrackingDlpdetailsDataMessagesDlpDetailsDlpMatchedContent]
        """
        return self._dlp_matched_content

    @dlp_matched_content.setter
    def dlp_matched_content(self, dlp_matched_content):
        """Sets the dlp_matched_content of this MessagetrackingDlpdetailsDataMessagesDlpDetails.


        :param dlp_matched_content: The dlp_matched_content of this MessagetrackingDlpdetailsDataMessagesDlpDetails.  # noqa: E501
        :type: list[MessagetrackingDlpdetailsDataMessagesDlpDetailsDlpMatchedContent]
        """

        self._dlp_matched_content = dlp_matched_content

    @property
    def dlp_policy(self):
        """Gets the dlp_policy of this MessagetrackingDlpdetailsDataMessagesDlpDetails.  # noqa: E501


        :return: The dlp_policy of this MessagetrackingDlpdetailsDataMessagesDlpDetails.  # noqa: E501
        :rtype: str
        """
        return self._dlp_policy

    @dlp_policy.setter
    def dlp_policy(self, dlp_policy):
        """Sets the dlp_policy of this MessagetrackingDlpdetailsDataMessagesDlpDetails.


        :param dlp_policy: The dlp_policy of this MessagetrackingDlpdetailsDataMessagesDlpDetails.  # noqa: E501
        :type: str
        """

        self._dlp_policy = dlp_policy

    @property
    def mid(self):
        """Gets the mid of this MessagetrackingDlpdetailsDataMessagesDlpDetails.  # noqa: E501


        :return: The mid of this MessagetrackingDlpdetailsDataMessagesDlpDetails.  # noqa: E501
        :rtype: str
        """
        return self._mid

    @mid.setter
    def mid(self, mid):
        """Sets the mid of this MessagetrackingDlpdetailsDataMessagesDlpDetails.


        :param mid: The mid of this MessagetrackingDlpdetailsDataMessagesDlpDetails.  # noqa: E501
        :type: str
        """

        self._mid = mid

    @property
    def risk_factor(self):
        """Gets the risk_factor of this MessagetrackingDlpdetailsDataMessagesDlpDetails.  # noqa: E501


        :return: The risk_factor of this MessagetrackingDlpdetailsDataMessagesDlpDetails.  # noqa: E501
        :rtype: int
        """
        return self._risk_factor

    @risk_factor.setter
    def risk_factor(self, risk_factor):
        """Sets the risk_factor of this MessagetrackingDlpdetailsDataMessagesDlpDetails.


        :param risk_factor: The risk_factor of this MessagetrackingDlpdetailsDataMessagesDlpDetails.  # noqa: E501
        :type: int
        """

        self._risk_factor = risk_factor

    @property
    def violation_severity(self):
        """Gets the violation_severity of this MessagetrackingDlpdetailsDataMessagesDlpDetails.  # noqa: E501


        :return: The violation_severity of this MessagetrackingDlpdetailsDataMessagesDlpDetails.  # noqa: E501
        :rtype: str
        """
        return self._violation_severity

    @violation_severity.setter
    def violation_severity(self, violation_severity):
        """Sets the violation_severity of this MessagetrackingDlpdetailsDataMessagesDlpDetails.


        :param violation_severity: The violation_severity of this MessagetrackingDlpdetailsDataMessagesDlpDetails.  # noqa: E501
        :type: str
        """

        self._violation_severity = violation_severity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MessagetrackingDlpdetailsDataMessagesDlpDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MessagetrackingDlpdetailsDataMessagesDlpDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
