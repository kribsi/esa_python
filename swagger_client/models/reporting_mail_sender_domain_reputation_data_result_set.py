# coding: utf-8

"""
    Secure Email Gateway API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReportingMailSenderDomainReputationDataResultSet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'awful': 'list[dict(str, object)]',
        'good': 'list[dict(str, object)]',
        'neutral': 'list[dict(str, object)]',
        'not_scanned': 'list[dict(str, object)]',
        'poor': 'list[dict(str, object)]',
        'tainted': 'list[dict(str, object)]',
        'unknown': 'list[dict(str, object)]',
        'unscannable': 'list[dict(str, object)]',
        'weak': 'list[dict(str, object)]'
    }

    attribute_map = {
        'awful': 'awful',
        'good': 'good',
        'neutral': 'neutral',
        'not_scanned': 'not_scanned',
        'poor': 'poor',
        'tainted': 'tainted',
        'unknown': 'unknown',
        'unscannable': 'unscannable',
        'weak': 'weak'
    }

    def __init__(self, awful=None, good=None, neutral=None, not_scanned=None, poor=None, tainted=None, unknown=None, unscannable=None, weak=None):  # noqa: E501
        """ReportingMailSenderDomainReputationDataResultSet - a model defined in Swagger"""  # noqa: E501
        self._awful = None
        self._good = None
        self._neutral = None
        self._not_scanned = None
        self._poor = None
        self._tainted = None
        self._unknown = None
        self._unscannable = None
        self._weak = None
        self.discriminator = None
        if awful is not None:
            self.awful = awful
        if good is not None:
            self.good = good
        if neutral is not None:
            self.neutral = neutral
        if not_scanned is not None:
            self.not_scanned = not_scanned
        if poor is not None:
            self.poor = poor
        if tainted is not None:
            self.tainted = tainted
        if unknown is not None:
            self.unknown = unknown
        if unscannable is not None:
            self.unscannable = unscannable
        if weak is not None:
            self.weak = weak

    @property
    def awful(self):
        """Gets the awful of this ReportingMailSenderDomainReputationDataResultSet.  # noqa: E501


        :return: The awful of this ReportingMailSenderDomainReputationDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._awful

    @awful.setter
    def awful(self, awful):
        """Sets the awful of this ReportingMailSenderDomainReputationDataResultSet.


        :param awful: The awful of this ReportingMailSenderDomainReputationDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._awful = awful

    @property
    def good(self):
        """Gets the good of this ReportingMailSenderDomainReputationDataResultSet.  # noqa: E501


        :return: The good of this ReportingMailSenderDomainReputationDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._good

    @good.setter
    def good(self, good):
        """Sets the good of this ReportingMailSenderDomainReputationDataResultSet.


        :param good: The good of this ReportingMailSenderDomainReputationDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._good = good

    @property
    def neutral(self):
        """Gets the neutral of this ReportingMailSenderDomainReputationDataResultSet.  # noqa: E501


        :return: The neutral of this ReportingMailSenderDomainReputationDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._neutral

    @neutral.setter
    def neutral(self, neutral):
        """Sets the neutral of this ReportingMailSenderDomainReputationDataResultSet.


        :param neutral: The neutral of this ReportingMailSenderDomainReputationDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._neutral = neutral

    @property
    def not_scanned(self):
        """Gets the not_scanned of this ReportingMailSenderDomainReputationDataResultSet.  # noqa: E501


        :return: The not_scanned of this ReportingMailSenderDomainReputationDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._not_scanned

    @not_scanned.setter
    def not_scanned(self, not_scanned):
        """Sets the not_scanned of this ReportingMailSenderDomainReputationDataResultSet.


        :param not_scanned: The not_scanned of this ReportingMailSenderDomainReputationDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._not_scanned = not_scanned

    @property
    def poor(self):
        """Gets the poor of this ReportingMailSenderDomainReputationDataResultSet.  # noqa: E501


        :return: The poor of this ReportingMailSenderDomainReputationDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._poor

    @poor.setter
    def poor(self, poor):
        """Sets the poor of this ReportingMailSenderDomainReputationDataResultSet.


        :param poor: The poor of this ReportingMailSenderDomainReputationDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._poor = poor

    @property
    def tainted(self):
        """Gets the tainted of this ReportingMailSenderDomainReputationDataResultSet.  # noqa: E501


        :return: The tainted of this ReportingMailSenderDomainReputationDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._tainted

    @tainted.setter
    def tainted(self, tainted):
        """Sets the tainted of this ReportingMailSenderDomainReputationDataResultSet.


        :param tainted: The tainted of this ReportingMailSenderDomainReputationDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._tainted = tainted

    @property
    def unknown(self):
        """Gets the unknown of this ReportingMailSenderDomainReputationDataResultSet.  # noqa: E501


        :return: The unknown of this ReportingMailSenderDomainReputationDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._unknown

    @unknown.setter
    def unknown(self, unknown):
        """Sets the unknown of this ReportingMailSenderDomainReputationDataResultSet.


        :param unknown: The unknown of this ReportingMailSenderDomainReputationDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._unknown = unknown

    @property
    def unscannable(self):
        """Gets the unscannable of this ReportingMailSenderDomainReputationDataResultSet.  # noqa: E501


        :return: The unscannable of this ReportingMailSenderDomainReputationDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._unscannable

    @unscannable.setter
    def unscannable(self, unscannable):
        """Sets the unscannable of this ReportingMailSenderDomainReputationDataResultSet.


        :param unscannable: The unscannable of this ReportingMailSenderDomainReputationDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._unscannable = unscannable

    @property
    def weak(self):
        """Gets the weak of this ReportingMailSenderDomainReputationDataResultSet.  # noqa: E501


        :return: The weak of this ReportingMailSenderDomainReputationDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._weak

    @weak.setter
    def weak(self, weak):
        """Sets the weak of this ReportingMailSenderDomainReputationDataResultSet.


        :param weak: The weak of this ReportingMailSenderDomainReputationDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._weak = weak

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportingMailSenderDomainReputationDataResultSet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportingMailSenderDomainReputationDataResultSet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
