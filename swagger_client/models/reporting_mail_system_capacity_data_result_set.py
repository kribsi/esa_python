# coding: utf-8

"""
    Secure Email Gateway API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReportingMailSystemCapacityDataResultSet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'average_incoming_message_size_in_bytes': 'list[dict(str, object)]',
        'average_memory_page_swapping': 'list[dict(str, object)]',
        'average_outgoing_message_size_in_bytes': 'list[dict(str, object)]',
        'bytes_in': 'list[dict(str, object)]',
        'bytes_out': 'list[dict(str, object)]',
        'incoming_connections': 'list[dict(str, object)]',
        'incoming_messages': 'list[dict(str, object)]',
        'outgoing_connections': 'list[dict(str, object)]',
        'outgoing_messages': 'list[dict(str, object)]',
        'overall_percent_cpu_usage': 'list[dict(str, object)]',
        'overall_percent_cpu_usage_for_antispam': 'list[dict(str, object)]',
        'overall_percent_cpu_usage_for_antivirus': 'list[dict(str, object)]',
        'overall_percent_cpu_usage_for_mail_count': 'list[dict(str, object)]',
        'overall_percent_cpu_usage_for_quarantine': 'list[dict(str, object)]',
        'overall_percent_cpu_usage_for_reporting': 'list[dict(str, object)]',
        'res_con_start_count': 'list[dict(str, object)]',
        'workqueue_average_messages': 'list[dict(str, object)]',
        'workqueue_average_time_spent': 'list[dict(str, object)]',
        'workqueue_maximum_messages': 'list[dict(str, object)]',
        'workqueue_messages_max': 'list[dict(str, object)]'
    }

    attribute_map = {
        'average_incoming_message_size_in_bytes': 'average_incoming_message_size_in_bytes',
        'average_memory_page_swapping': 'average_memory_page_swapping',
        'average_outgoing_message_size_in_bytes': 'average_outgoing_message_size_in_bytes',
        'bytes_in': 'bytes_in',
        'bytes_out': 'bytes_out',
        'incoming_connections': 'incoming_connections',
        'incoming_messages': 'incoming_messages',
        'outgoing_connections': 'outgoing_connections',
        'outgoing_messages': 'outgoing_messages',
        'overall_percent_cpu_usage': 'overall_percent_cpu_usage',
        'overall_percent_cpu_usage_for_antispam': 'overall_percent_cpu_usage_for_antispam',
        'overall_percent_cpu_usage_for_antivirus': 'overall_percent_cpu_usage_for_antivirus',
        'overall_percent_cpu_usage_for_mail_count': 'overall_percent_cpu_usage_for_mail_count',
        'overall_percent_cpu_usage_for_quarantine': 'overall_percent_cpu_usage_for_quarantine',
        'overall_percent_cpu_usage_for_reporting': 'overall_percent_cpu_usage_for_reporting',
        'res_con_start_count': 'res_con_start_count',
        'workqueue_average_messages': 'workqueue_average_messages',
        'workqueue_average_time_spent': 'workqueue_average_time_spent',
        'workqueue_maximum_messages': 'workqueue_maximum_messages',
        'workqueue_messages_max': 'workqueue_messages_max'
    }

    def __init__(self, average_incoming_message_size_in_bytes=None, average_memory_page_swapping=None, average_outgoing_message_size_in_bytes=None, bytes_in=None, bytes_out=None, incoming_connections=None, incoming_messages=None, outgoing_connections=None, outgoing_messages=None, overall_percent_cpu_usage=None, overall_percent_cpu_usage_for_antispam=None, overall_percent_cpu_usage_for_antivirus=None, overall_percent_cpu_usage_for_mail_count=None, overall_percent_cpu_usage_for_quarantine=None, overall_percent_cpu_usage_for_reporting=None, res_con_start_count=None, workqueue_average_messages=None, workqueue_average_time_spent=None, workqueue_maximum_messages=None, workqueue_messages_max=None):  # noqa: E501
        """ReportingMailSystemCapacityDataResultSet - a model defined in Swagger"""  # noqa: E501
        self._average_incoming_message_size_in_bytes = None
        self._average_memory_page_swapping = None
        self._average_outgoing_message_size_in_bytes = None
        self._bytes_in = None
        self._bytes_out = None
        self._incoming_connections = None
        self._incoming_messages = None
        self._outgoing_connections = None
        self._outgoing_messages = None
        self._overall_percent_cpu_usage = None
        self._overall_percent_cpu_usage_for_antispam = None
        self._overall_percent_cpu_usage_for_antivirus = None
        self._overall_percent_cpu_usage_for_mail_count = None
        self._overall_percent_cpu_usage_for_quarantine = None
        self._overall_percent_cpu_usage_for_reporting = None
        self._res_con_start_count = None
        self._workqueue_average_messages = None
        self._workqueue_average_time_spent = None
        self._workqueue_maximum_messages = None
        self._workqueue_messages_max = None
        self.discriminator = None
        if average_incoming_message_size_in_bytes is not None:
            self.average_incoming_message_size_in_bytes = average_incoming_message_size_in_bytes
        if average_memory_page_swapping is not None:
            self.average_memory_page_swapping = average_memory_page_swapping
        if average_outgoing_message_size_in_bytes is not None:
            self.average_outgoing_message_size_in_bytes = average_outgoing_message_size_in_bytes
        if bytes_in is not None:
            self.bytes_in = bytes_in
        if bytes_out is not None:
            self.bytes_out = bytes_out
        if incoming_connections is not None:
            self.incoming_connections = incoming_connections
        if incoming_messages is not None:
            self.incoming_messages = incoming_messages
        if outgoing_connections is not None:
            self.outgoing_connections = outgoing_connections
        if outgoing_messages is not None:
            self.outgoing_messages = outgoing_messages
        if overall_percent_cpu_usage is not None:
            self.overall_percent_cpu_usage = overall_percent_cpu_usage
        if overall_percent_cpu_usage_for_antispam is not None:
            self.overall_percent_cpu_usage_for_antispam = overall_percent_cpu_usage_for_antispam
        if overall_percent_cpu_usage_for_antivirus is not None:
            self.overall_percent_cpu_usage_for_antivirus = overall_percent_cpu_usage_for_antivirus
        if overall_percent_cpu_usage_for_mail_count is not None:
            self.overall_percent_cpu_usage_for_mail_count = overall_percent_cpu_usage_for_mail_count
        if overall_percent_cpu_usage_for_quarantine is not None:
            self.overall_percent_cpu_usage_for_quarantine = overall_percent_cpu_usage_for_quarantine
        if overall_percent_cpu_usage_for_reporting is not None:
            self.overall_percent_cpu_usage_for_reporting = overall_percent_cpu_usage_for_reporting
        if res_con_start_count is not None:
            self.res_con_start_count = res_con_start_count
        if workqueue_average_messages is not None:
            self.workqueue_average_messages = workqueue_average_messages
        if workqueue_average_time_spent is not None:
            self.workqueue_average_time_spent = workqueue_average_time_spent
        if workqueue_maximum_messages is not None:
            self.workqueue_maximum_messages = workqueue_maximum_messages
        if workqueue_messages_max is not None:
            self.workqueue_messages_max = workqueue_messages_max

    @property
    def average_incoming_message_size_in_bytes(self):
        """Gets the average_incoming_message_size_in_bytes of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501


        :return: The average_incoming_message_size_in_bytes of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._average_incoming_message_size_in_bytes

    @average_incoming_message_size_in_bytes.setter
    def average_incoming_message_size_in_bytes(self, average_incoming_message_size_in_bytes):
        """Sets the average_incoming_message_size_in_bytes of this ReportingMailSystemCapacityDataResultSet.


        :param average_incoming_message_size_in_bytes: The average_incoming_message_size_in_bytes of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._average_incoming_message_size_in_bytes = average_incoming_message_size_in_bytes

    @property
    def average_memory_page_swapping(self):
        """Gets the average_memory_page_swapping of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501


        :return: The average_memory_page_swapping of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._average_memory_page_swapping

    @average_memory_page_swapping.setter
    def average_memory_page_swapping(self, average_memory_page_swapping):
        """Sets the average_memory_page_swapping of this ReportingMailSystemCapacityDataResultSet.


        :param average_memory_page_swapping: The average_memory_page_swapping of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._average_memory_page_swapping = average_memory_page_swapping

    @property
    def average_outgoing_message_size_in_bytes(self):
        """Gets the average_outgoing_message_size_in_bytes of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501


        :return: The average_outgoing_message_size_in_bytes of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._average_outgoing_message_size_in_bytes

    @average_outgoing_message_size_in_bytes.setter
    def average_outgoing_message_size_in_bytes(self, average_outgoing_message_size_in_bytes):
        """Sets the average_outgoing_message_size_in_bytes of this ReportingMailSystemCapacityDataResultSet.


        :param average_outgoing_message_size_in_bytes: The average_outgoing_message_size_in_bytes of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._average_outgoing_message_size_in_bytes = average_outgoing_message_size_in_bytes

    @property
    def bytes_in(self):
        """Gets the bytes_in of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501


        :return: The bytes_in of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._bytes_in

    @bytes_in.setter
    def bytes_in(self, bytes_in):
        """Sets the bytes_in of this ReportingMailSystemCapacityDataResultSet.


        :param bytes_in: The bytes_in of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._bytes_in = bytes_in

    @property
    def bytes_out(self):
        """Gets the bytes_out of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501


        :return: The bytes_out of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._bytes_out

    @bytes_out.setter
    def bytes_out(self, bytes_out):
        """Sets the bytes_out of this ReportingMailSystemCapacityDataResultSet.


        :param bytes_out: The bytes_out of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._bytes_out = bytes_out

    @property
    def incoming_connections(self):
        """Gets the incoming_connections of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501


        :return: The incoming_connections of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._incoming_connections

    @incoming_connections.setter
    def incoming_connections(self, incoming_connections):
        """Sets the incoming_connections of this ReportingMailSystemCapacityDataResultSet.


        :param incoming_connections: The incoming_connections of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._incoming_connections = incoming_connections

    @property
    def incoming_messages(self):
        """Gets the incoming_messages of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501


        :return: The incoming_messages of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._incoming_messages

    @incoming_messages.setter
    def incoming_messages(self, incoming_messages):
        """Sets the incoming_messages of this ReportingMailSystemCapacityDataResultSet.


        :param incoming_messages: The incoming_messages of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._incoming_messages = incoming_messages

    @property
    def outgoing_connections(self):
        """Gets the outgoing_connections of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501


        :return: The outgoing_connections of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._outgoing_connections

    @outgoing_connections.setter
    def outgoing_connections(self, outgoing_connections):
        """Sets the outgoing_connections of this ReportingMailSystemCapacityDataResultSet.


        :param outgoing_connections: The outgoing_connections of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._outgoing_connections = outgoing_connections

    @property
    def outgoing_messages(self):
        """Gets the outgoing_messages of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501


        :return: The outgoing_messages of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._outgoing_messages

    @outgoing_messages.setter
    def outgoing_messages(self, outgoing_messages):
        """Sets the outgoing_messages of this ReportingMailSystemCapacityDataResultSet.


        :param outgoing_messages: The outgoing_messages of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._outgoing_messages = outgoing_messages

    @property
    def overall_percent_cpu_usage(self):
        """Gets the overall_percent_cpu_usage of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501


        :return: The overall_percent_cpu_usage of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._overall_percent_cpu_usage

    @overall_percent_cpu_usage.setter
    def overall_percent_cpu_usage(self, overall_percent_cpu_usage):
        """Sets the overall_percent_cpu_usage of this ReportingMailSystemCapacityDataResultSet.


        :param overall_percent_cpu_usage: The overall_percent_cpu_usage of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._overall_percent_cpu_usage = overall_percent_cpu_usage

    @property
    def overall_percent_cpu_usage_for_antispam(self):
        """Gets the overall_percent_cpu_usage_for_antispam of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501


        :return: The overall_percent_cpu_usage_for_antispam of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._overall_percent_cpu_usage_for_antispam

    @overall_percent_cpu_usage_for_antispam.setter
    def overall_percent_cpu_usage_for_antispam(self, overall_percent_cpu_usage_for_antispam):
        """Sets the overall_percent_cpu_usage_for_antispam of this ReportingMailSystemCapacityDataResultSet.


        :param overall_percent_cpu_usage_for_antispam: The overall_percent_cpu_usage_for_antispam of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._overall_percent_cpu_usage_for_antispam = overall_percent_cpu_usage_for_antispam

    @property
    def overall_percent_cpu_usage_for_antivirus(self):
        """Gets the overall_percent_cpu_usage_for_antivirus of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501


        :return: The overall_percent_cpu_usage_for_antivirus of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._overall_percent_cpu_usage_for_antivirus

    @overall_percent_cpu_usage_for_antivirus.setter
    def overall_percent_cpu_usage_for_antivirus(self, overall_percent_cpu_usage_for_antivirus):
        """Sets the overall_percent_cpu_usage_for_antivirus of this ReportingMailSystemCapacityDataResultSet.


        :param overall_percent_cpu_usage_for_antivirus: The overall_percent_cpu_usage_for_antivirus of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._overall_percent_cpu_usage_for_antivirus = overall_percent_cpu_usage_for_antivirus

    @property
    def overall_percent_cpu_usage_for_mail_count(self):
        """Gets the overall_percent_cpu_usage_for_mail_count of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501


        :return: The overall_percent_cpu_usage_for_mail_count of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._overall_percent_cpu_usage_for_mail_count

    @overall_percent_cpu_usage_for_mail_count.setter
    def overall_percent_cpu_usage_for_mail_count(self, overall_percent_cpu_usage_for_mail_count):
        """Sets the overall_percent_cpu_usage_for_mail_count of this ReportingMailSystemCapacityDataResultSet.


        :param overall_percent_cpu_usage_for_mail_count: The overall_percent_cpu_usage_for_mail_count of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._overall_percent_cpu_usage_for_mail_count = overall_percent_cpu_usage_for_mail_count

    @property
    def overall_percent_cpu_usage_for_quarantine(self):
        """Gets the overall_percent_cpu_usage_for_quarantine of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501


        :return: The overall_percent_cpu_usage_for_quarantine of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._overall_percent_cpu_usage_for_quarantine

    @overall_percent_cpu_usage_for_quarantine.setter
    def overall_percent_cpu_usage_for_quarantine(self, overall_percent_cpu_usage_for_quarantine):
        """Sets the overall_percent_cpu_usage_for_quarantine of this ReportingMailSystemCapacityDataResultSet.


        :param overall_percent_cpu_usage_for_quarantine: The overall_percent_cpu_usage_for_quarantine of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._overall_percent_cpu_usage_for_quarantine = overall_percent_cpu_usage_for_quarantine

    @property
    def overall_percent_cpu_usage_for_reporting(self):
        """Gets the overall_percent_cpu_usage_for_reporting of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501


        :return: The overall_percent_cpu_usage_for_reporting of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._overall_percent_cpu_usage_for_reporting

    @overall_percent_cpu_usage_for_reporting.setter
    def overall_percent_cpu_usage_for_reporting(self, overall_percent_cpu_usage_for_reporting):
        """Sets the overall_percent_cpu_usage_for_reporting of this ReportingMailSystemCapacityDataResultSet.


        :param overall_percent_cpu_usage_for_reporting: The overall_percent_cpu_usage_for_reporting of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._overall_percent_cpu_usage_for_reporting = overall_percent_cpu_usage_for_reporting

    @property
    def res_con_start_count(self):
        """Gets the res_con_start_count of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501


        :return: The res_con_start_count of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._res_con_start_count

    @res_con_start_count.setter
    def res_con_start_count(self, res_con_start_count):
        """Sets the res_con_start_count of this ReportingMailSystemCapacityDataResultSet.


        :param res_con_start_count: The res_con_start_count of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._res_con_start_count = res_con_start_count

    @property
    def workqueue_average_messages(self):
        """Gets the workqueue_average_messages of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501


        :return: The workqueue_average_messages of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._workqueue_average_messages

    @workqueue_average_messages.setter
    def workqueue_average_messages(self, workqueue_average_messages):
        """Sets the workqueue_average_messages of this ReportingMailSystemCapacityDataResultSet.


        :param workqueue_average_messages: The workqueue_average_messages of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._workqueue_average_messages = workqueue_average_messages

    @property
    def workqueue_average_time_spent(self):
        """Gets the workqueue_average_time_spent of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501


        :return: The workqueue_average_time_spent of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._workqueue_average_time_spent

    @workqueue_average_time_spent.setter
    def workqueue_average_time_spent(self, workqueue_average_time_spent):
        """Sets the workqueue_average_time_spent of this ReportingMailSystemCapacityDataResultSet.


        :param workqueue_average_time_spent: The workqueue_average_time_spent of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._workqueue_average_time_spent = workqueue_average_time_spent

    @property
    def workqueue_maximum_messages(self):
        """Gets the workqueue_maximum_messages of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501


        :return: The workqueue_maximum_messages of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._workqueue_maximum_messages

    @workqueue_maximum_messages.setter
    def workqueue_maximum_messages(self, workqueue_maximum_messages):
        """Sets the workqueue_maximum_messages of this ReportingMailSystemCapacityDataResultSet.


        :param workqueue_maximum_messages: The workqueue_maximum_messages of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._workqueue_maximum_messages = workqueue_maximum_messages

    @property
    def workqueue_messages_max(self):
        """Gets the workqueue_messages_max of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501


        :return: The workqueue_messages_max of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._workqueue_messages_max

    @workqueue_messages_max.setter
    def workqueue_messages_max(self, workqueue_messages_max):
        """Sets the workqueue_messages_max of this ReportingMailSystemCapacityDataResultSet.


        :param workqueue_messages_max: The workqueue_messages_max of this ReportingMailSystemCapacityDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._workqueue_messages_max = workqueue_messages_max

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportingMailSystemCapacityDataResultSet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportingMailSystemCapacityDataResultSet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
