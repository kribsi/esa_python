# coding: utf-8

"""
    Secure Email Gateway API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReportingMailAmpFileAnalysisByFilenameDataResultSet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'completed_timestamp': 'list[dict(str, object)]',
        'console_url': 'list[dict(str, object)]',
        'interim_verdict': 'list[dict(str, object)]',
        'msg_direction': 'list[dict(str, object)]',
        'run_id': 'list[dict(str, object)]',
        'score': 'list[dict(str, object)]',
        'status': 'list[dict(str, object)]',
        'submit_timestamp': 'list[dict(str, object)]',
        'url': 'list[dict(str, object)]'
    }

    attribute_map = {
        'completed_timestamp': 'completed_timestamp',
        'console_url': 'console_url',
        'interim_verdict': 'interim_verdict',
        'msg_direction': 'msg_direction',
        'run_id': 'run_id',
        'score': 'score',
        'status': 'status',
        'submit_timestamp': 'submit_timestamp',
        'url': 'url'
    }

    def __init__(self, completed_timestamp=None, console_url=None, interim_verdict=None, msg_direction=None, run_id=None, score=None, status=None, submit_timestamp=None, url=None):  # noqa: E501
        """ReportingMailAmpFileAnalysisByFilenameDataResultSet - a model defined in Swagger"""  # noqa: E501
        self._completed_timestamp = None
        self._console_url = None
        self._interim_verdict = None
        self._msg_direction = None
        self._run_id = None
        self._score = None
        self._status = None
        self._submit_timestamp = None
        self._url = None
        self.discriminator = None
        if completed_timestamp is not None:
            self.completed_timestamp = completed_timestamp
        if console_url is not None:
            self.console_url = console_url
        if interim_verdict is not None:
            self.interim_verdict = interim_verdict
        if msg_direction is not None:
            self.msg_direction = msg_direction
        if run_id is not None:
            self.run_id = run_id
        if score is not None:
            self.score = score
        if status is not None:
            self.status = status
        if submit_timestamp is not None:
            self.submit_timestamp = submit_timestamp
        if url is not None:
            self.url = url

    @property
    def completed_timestamp(self):
        """Gets the completed_timestamp of this ReportingMailAmpFileAnalysisByFilenameDataResultSet.  # noqa: E501


        :return: The completed_timestamp of this ReportingMailAmpFileAnalysisByFilenameDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._completed_timestamp

    @completed_timestamp.setter
    def completed_timestamp(self, completed_timestamp):
        """Sets the completed_timestamp of this ReportingMailAmpFileAnalysisByFilenameDataResultSet.


        :param completed_timestamp: The completed_timestamp of this ReportingMailAmpFileAnalysisByFilenameDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._completed_timestamp = completed_timestamp

    @property
    def console_url(self):
        """Gets the console_url of this ReportingMailAmpFileAnalysisByFilenameDataResultSet.  # noqa: E501


        :return: The console_url of this ReportingMailAmpFileAnalysisByFilenameDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._console_url

    @console_url.setter
    def console_url(self, console_url):
        """Sets the console_url of this ReportingMailAmpFileAnalysisByFilenameDataResultSet.


        :param console_url: The console_url of this ReportingMailAmpFileAnalysisByFilenameDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._console_url = console_url

    @property
    def interim_verdict(self):
        """Gets the interim_verdict of this ReportingMailAmpFileAnalysisByFilenameDataResultSet.  # noqa: E501


        :return: The interim_verdict of this ReportingMailAmpFileAnalysisByFilenameDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._interim_verdict

    @interim_verdict.setter
    def interim_verdict(self, interim_verdict):
        """Sets the interim_verdict of this ReportingMailAmpFileAnalysisByFilenameDataResultSet.


        :param interim_verdict: The interim_verdict of this ReportingMailAmpFileAnalysisByFilenameDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._interim_verdict = interim_verdict

    @property
    def msg_direction(self):
        """Gets the msg_direction of this ReportingMailAmpFileAnalysisByFilenameDataResultSet.  # noqa: E501


        :return: The msg_direction of this ReportingMailAmpFileAnalysisByFilenameDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._msg_direction

    @msg_direction.setter
    def msg_direction(self, msg_direction):
        """Sets the msg_direction of this ReportingMailAmpFileAnalysisByFilenameDataResultSet.


        :param msg_direction: The msg_direction of this ReportingMailAmpFileAnalysisByFilenameDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._msg_direction = msg_direction

    @property
    def run_id(self):
        """Gets the run_id of this ReportingMailAmpFileAnalysisByFilenameDataResultSet.  # noqa: E501


        :return: The run_id of this ReportingMailAmpFileAnalysisByFilenameDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this ReportingMailAmpFileAnalysisByFilenameDataResultSet.


        :param run_id: The run_id of this ReportingMailAmpFileAnalysisByFilenameDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._run_id = run_id

    @property
    def score(self):
        """Gets the score of this ReportingMailAmpFileAnalysisByFilenameDataResultSet.  # noqa: E501


        :return: The score of this ReportingMailAmpFileAnalysisByFilenameDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this ReportingMailAmpFileAnalysisByFilenameDataResultSet.


        :param score: The score of this ReportingMailAmpFileAnalysisByFilenameDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._score = score

    @property
    def status(self):
        """Gets the status of this ReportingMailAmpFileAnalysisByFilenameDataResultSet.  # noqa: E501


        :return: The status of this ReportingMailAmpFileAnalysisByFilenameDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ReportingMailAmpFileAnalysisByFilenameDataResultSet.


        :param status: The status of this ReportingMailAmpFileAnalysisByFilenameDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._status = status

    @property
    def submit_timestamp(self):
        """Gets the submit_timestamp of this ReportingMailAmpFileAnalysisByFilenameDataResultSet.  # noqa: E501


        :return: The submit_timestamp of this ReportingMailAmpFileAnalysisByFilenameDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._submit_timestamp

    @submit_timestamp.setter
    def submit_timestamp(self, submit_timestamp):
        """Sets the submit_timestamp of this ReportingMailAmpFileAnalysisByFilenameDataResultSet.


        :param submit_timestamp: The submit_timestamp of this ReportingMailAmpFileAnalysisByFilenameDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._submit_timestamp = submit_timestamp

    @property
    def url(self):
        """Gets the url of this ReportingMailAmpFileAnalysisByFilenameDataResultSet.  # noqa: E501


        :return: The url of this ReportingMailAmpFileAnalysisByFilenameDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ReportingMailAmpFileAnalysisByFilenameDataResultSet.


        :param url: The url of this ReportingMailAmpFileAnalysisByFilenameDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportingMailAmpFileAnalysisByFilenameDataResultSet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportingMailAmpFileAnalysisByFilenameDataResultSet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
