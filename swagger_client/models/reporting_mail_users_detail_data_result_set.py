# coding: utf-8

"""
    Secure Email Gateway API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReportingMailUsersDetailDataResultSet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'incoming_bulk_mail': 'list[dict(str, object)]',
        'incoming_detected_amp': 'list[dict(str, object)]',
        'incoming_detected_content_filter': 'list[dict(str, object)]',
        'incoming_detected_ims_spam_increment_over_case': 'list[dict(str, object)]',
        'incoming_detected_spam': 'list[dict(str, object)]',
        'incoming_detected_virus': 'list[dict(str, object)]',
        'incoming_graymail': 'list[dict(str, object)]',
        'incoming_marketing_mail': 'list[dict(str, object)]',
        'incoming_social_mail': 'list[dict(str, object)]',
        'incoming_threat_content_filter': 'list[dict(str, object)]',
        'incoming_total_clean_recipients': 'list[dict(str, object)]',
        'incoming_total_recipients': 'list[dict(str, object)]',
        'outgoing_detected_amp': 'list[dict(str, object)]',
        'outgoing_detected_content_filter': 'list[dict(str, object)]',
        'outgoing_detected_ims_spam_increment_over_case': 'list[dict(str, object)]',
        'outgoing_detected_spam': 'list[dict(str, object)]',
        'outgoing_detected_virus': 'list[dict(str, object)]',
        'outgoing_threat_content_filter': 'list[dict(str, object)]',
        'outgoing_total_clean_recipients': 'list[dict(str, object)]',
        'outgoing_total_recipients': 'list[dict(str, object)]',
        'total_dlp_incidents': 'list[dict(str, object)]'
    }

    attribute_map = {
        'incoming_bulk_mail': 'incoming_bulk_mail',
        'incoming_detected_amp': 'incoming_detected_amp',
        'incoming_detected_content_filter': 'incoming_detected_content_filter',
        'incoming_detected_ims_spam_increment_over_case': 'incoming_detected_ims_spam_increment_over_case',
        'incoming_detected_spam': 'incoming_detected_spam',
        'incoming_detected_virus': 'incoming_detected_virus',
        'incoming_graymail': 'incoming_graymail',
        'incoming_marketing_mail': 'incoming_marketing_mail',
        'incoming_social_mail': 'incoming_social_mail',
        'incoming_threat_content_filter': 'incoming_threat_content_filter',
        'incoming_total_clean_recipients': 'incoming_total_clean_recipients',
        'incoming_total_recipients': 'incoming_total_recipients',
        'outgoing_detected_amp': 'outgoing_detected_amp',
        'outgoing_detected_content_filter': 'outgoing_detected_content_filter',
        'outgoing_detected_ims_spam_increment_over_case': 'outgoing_detected_ims_spam_increment_over_case',
        'outgoing_detected_spam': 'outgoing_detected_spam',
        'outgoing_detected_virus': 'outgoing_detected_virus',
        'outgoing_threat_content_filter': 'outgoing_threat_content_filter',
        'outgoing_total_clean_recipients': 'outgoing_total_clean_recipients',
        'outgoing_total_recipients': 'outgoing_total_recipients',
        'total_dlp_incidents': 'total_dlp_incidents'
    }

    def __init__(self, incoming_bulk_mail=None, incoming_detected_amp=None, incoming_detected_content_filter=None, incoming_detected_ims_spam_increment_over_case=None, incoming_detected_spam=None, incoming_detected_virus=None, incoming_graymail=None, incoming_marketing_mail=None, incoming_social_mail=None, incoming_threat_content_filter=None, incoming_total_clean_recipients=None, incoming_total_recipients=None, outgoing_detected_amp=None, outgoing_detected_content_filter=None, outgoing_detected_ims_spam_increment_over_case=None, outgoing_detected_spam=None, outgoing_detected_virus=None, outgoing_threat_content_filter=None, outgoing_total_clean_recipients=None, outgoing_total_recipients=None, total_dlp_incidents=None):  # noqa: E501
        """ReportingMailUsersDetailDataResultSet - a model defined in Swagger"""  # noqa: E501
        self._incoming_bulk_mail = None
        self._incoming_detected_amp = None
        self._incoming_detected_content_filter = None
        self._incoming_detected_ims_spam_increment_over_case = None
        self._incoming_detected_spam = None
        self._incoming_detected_virus = None
        self._incoming_graymail = None
        self._incoming_marketing_mail = None
        self._incoming_social_mail = None
        self._incoming_threat_content_filter = None
        self._incoming_total_clean_recipients = None
        self._incoming_total_recipients = None
        self._outgoing_detected_amp = None
        self._outgoing_detected_content_filter = None
        self._outgoing_detected_ims_spam_increment_over_case = None
        self._outgoing_detected_spam = None
        self._outgoing_detected_virus = None
        self._outgoing_threat_content_filter = None
        self._outgoing_total_clean_recipients = None
        self._outgoing_total_recipients = None
        self._total_dlp_incidents = None
        self.discriminator = None
        if incoming_bulk_mail is not None:
            self.incoming_bulk_mail = incoming_bulk_mail
        if incoming_detected_amp is not None:
            self.incoming_detected_amp = incoming_detected_amp
        if incoming_detected_content_filter is not None:
            self.incoming_detected_content_filter = incoming_detected_content_filter
        if incoming_detected_ims_spam_increment_over_case is not None:
            self.incoming_detected_ims_spam_increment_over_case = incoming_detected_ims_spam_increment_over_case
        if incoming_detected_spam is not None:
            self.incoming_detected_spam = incoming_detected_spam
        if incoming_detected_virus is not None:
            self.incoming_detected_virus = incoming_detected_virus
        if incoming_graymail is not None:
            self.incoming_graymail = incoming_graymail
        if incoming_marketing_mail is not None:
            self.incoming_marketing_mail = incoming_marketing_mail
        if incoming_social_mail is not None:
            self.incoming_social_mail = incoming_social_mail
        if incoming_threat_content_filter is not None:
            self.incoming_threat_content_filter = incoming_threat_content_filter
        if incoming_total_clean_recipients is not None:
            self.incoming_total_clean_recipients = incoming_total_clean_recipients
        if incoming_total_recipients is not None:
            self.incoming_total_recipients = incoming_total_recipients
        if outgoing_detected_amp is not None:
            self.outgoing_detected_amp = outgoing_detected_amp
        if outgoing_detected_content_filter is not None:
            self.outgoing_detected_content_filter = outgoing_detected_content_filter
        if outgoing_detected_ims_spam_increment_over_case is not None:
            self.outgoing_detected_ims_spam_increment_over_case = outgoing_detected_ims_spam_increment_over_case
        if outgoing_detected_spam is not None:
            self.outgoing_detected_spam = outgoing_detected_spam
        if outgoing_detected_virus is not None:
            self.outgoing_detected_virus = outgoing_detected_virus
        if outgoing_threat_content_filter is not None:
            self.outgoing_threat_content_filter = outgoing_threat_content_filter
        if outgoing_total_clean_recipients is not None:
            self.outgoing_total_clean_recipients = outgoing_total_clean_recipients
        if outgoing_total_recipients is not None:
            self.outgoing_total_recipients = outgoing_total_recipients
        if total_dlp_incidents is not None:
            self.total_dlp_incidents = total_dlp_incidents

    @property
    def incoming_bulk_mail(self):
        """Gets the incoming_bulk_mail of this ReportingMailUsersDetailDataResultSet.  # noqa: E501


        :return: The incoming_bulk_mail of this ReportingMailUsersDetailDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._incoming_bulk_mail

    @incoming_bulk_mail.setter
    def incoming_bulk_mail(self, incoming_bulk_mail):
        """Sets the incoming_bulk_mail of this ReportingMailUsersDetailDataResultSet.


        :param incoming_bulk_mail: The incoming_bulk_mail of this ReportingMailUsersDetailDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._incoming_bulk_mail = incoming_bulk_mail

    @property
    def incoming_detected_amp(self):
        """Gets the incoming_detected_amp of this ReportingMailUsersDetailDataResultSet.  # noqa: E501


        :return: The incoming_detected_amp of this ReportingMailUsersDetailDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._incoming_detected_amp

    @incoming_detected_amp.setter
    def incoming_detected_amp(self, incoming_detected_amp):
        """Sets the incoming_detected_amp of this ReportingMailUsersDetailDataResultSet.


        :param incoming_detected_amp: The incoming_detected_amp of this ReportingMailUsersDetailDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._incoming_detected_amp = incoming_detected_amp

    @property
    def incoming_detected_content_filter(self):
        """Gets the incoming_detected_content_filter of this ReportingMailUsersDetailDataResultSet.  # noqa: E501


        :return: The incoming_detected_content_filter of this ReportingMailUsersDetailDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._incoming_detected_content_filter

    @incoming_detected_content_filter.setter
    def incoming_detected_content_filter(self, incoming_detected_content_filter):
        """Sets the incoming_detected_content_filter of this ReportingMailUsersDetailDataResultSet.


        :param incoming_detected_content_filter: The incoming_detected_content_filter of this ReportingMailUsersDetailDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._incoming_detected_content_filter = incoming_detected_content_filter

    @property
    def incoming_detected_ims_spam_increment_over_case(self):
        """Gets the incoming_detected_ims_spam_increment_over_case of this ReportingMailUsersDetailDataResultSet.  # noqa: E501


        :return: The incoming_detected_ims_spam_increment_over_case of this ReportingMailUsersDetailDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._incoming_detected_ims_spam_increment_over_case

    @incoming_detected_ims_spam_increment_over_case.setter
    def incoming_detected_ims_spam_increment_over_case(self, incoming_detected_ims_spam_increment_over_case):
        """Sets the incoming_detected_ims_spam_increment_over_case of this ReportingMailUsersDetailDataResultSet.


        :param incoming_detected_ims_spam_increment_over_case: The incoming_detected_ims_spam_increment_over_case of this ReportingMailUsersDetailDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._incoming_detected_ims_spam_increment_over_case = incoming_detected_ims_spam_increment_over_case

    @property
    def incoming_detected_spam(self):
        """Gets the incoming_detected_spam of this ReportingMailUsersDetailDataResultSet.  # noqa: E501


        :return: The incoming_detected_spam of this ReportingMailUsersDetailDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._incoming_detected_spam

    @incoming_detected_spam.setter
    def incoming_detected_spam(self, incoming_detected_spam):
        """Sets the incoming_detected_spam of this ReportingMailUsersDetailDataResultSet.


        :param incoming_detected_spam: The incoming_detected_spam of this ReportingMailUsersDetailDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._incoming_detected_spam = incoming_detected_spam

    @property
    def incoming_detected_virus(self):
        """Gets the incoming_detected_virus of this ReportingMailUsersDetailDataResultSet.  # noqa: E501


        :return: The incoming_detected_virus of this ReportingMailUsersDetailDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._incoming_detected_virus

    @incoming_detected_virus.setter
    def incoming_detected_virus(self, incoming_detected_virus):
        """Sets the incoming_detected_virus of this ReportingMailUsersDetailDataResultSet.


        :param incoming_detected_virus: The incoming_detected_virus of this ReportingMailUsersDetailDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._incoming_detected_virus = incoming_detected_virus

    @property
    def incoming_graymail(self):
        """Gets the incoming_graymail of this ReportingMailUsersDetailDataResultSet.  # noqa: E501


        :return: The incoming_graymail of this ReportingMailUsersDetailDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._incoming_graymail

    @incoming_graymail.setter
    def incoming_graymail(self, incoming_graymail):
        """Sets the incoming_graymail of this ReportingMailUsersDetailDataResultSet.


        :param incoming_graymail: The incoming_graymail of this ReportingMailUsersDetailDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._incoming_graymail = incoming_graymail

    @property
    def incoming_marketing_mail(self):
        """Gets the incoming_marketing_mail of this ReportingMailUsersDetailDataResultSet.  # noqa: E501


        :return: The incoming_marketing_mail of this ReportingMailUsersDetailDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._incoming_marketing_mail

    @incoming_marketing_mail.setter
    def incoming_marketing_mail(self, incoming_marketing_mail):
        """Sets the incoming_marketing_mail of this ReportingMailUsersDetailDataResultSet.


        :param incoming_marketing_mail: The incoming_marketing_mail of this ReportingMailUsersDetailDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._incoming_marketing_mail = incoming_marketing_mail

    @property
    def incoming_social_mail(self):
        """Gets the incoming_social_mail of this ReportingMailUsersDetailDataResultSet.  # noqa: E501


        :return: The incoming_social_mail of this ReportingMailUsersDetailDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._incoming_social_mail

    @incoming_social_mail.setter
    def incoming_social_mail(self, incoming_social_mail):
        """Sets the incoming_social_mail of this ReportingMailUsersDetailDataResultSet.


        :param incoming_social_mail: The incoming_social_mail of this ReportingMailUsersDetailDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._incoming_social_mail = incoming_social_mail

    @property
    def incoming_threat_content_filter(self):
        """Gets the incoming_threat_content_filter of this ReportingMailUsersDetailDataResultSet.  # noqa: E501


        :return: The incoming_threat_content_filter of this ReportingMailUsersDetailDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._incoming_threat_content_filter

    @incoming_threat_content_filter.setter
    def incoming_threat_content_filter(self, incoming_threat_content_filter):
        """Sets the incoming_threat_content_filter of this ReportingMailUsersDetailDataResultSet.


        :param incoming_threat_content_filter: The incoming_threat_content_filter of this ReportingMailUsersDetailDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._incoming_threat_content_filter = incoming_threat_content_filter

    @property
    def incoming_total_clean_recipients(self):
        """Gets the incoming_total_clean_recipients of this ReportingMailUsersDetailDataResultSet.  # noqa: E501


        :return: The incoming_total_clean_recipients of this ReportingMailUsersDetailDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._incoming_total_clean_recipients

    @incoming_total_clean_recipients.setter
    def incoming_total_clean_recipients(self, incoming_total_clean_recipients):
        """Sets the incoming_total_clean_recipients of this ReportingMailUsersDetailDataResultSet.


        :param incoming_total_clean_recipients: The incoming_total_clean_recipients of this ReportingMailUsersDetailDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._incoming_total_clean_recipients = incoming_total_clean_recipients

    @property
    def incoming_total_recipients(self):
        """Gets the incoming_total_recipients of this ReportingMailUsersDetailDataResultSet.  # noqa: E501


        :return: The incoming_total_recipients of this ReportingMailUsersDetailDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._incoming_total_recipients

    @incoming_total_recipients.setter
    def incoming_total_recipients(self, incoming_total_recipients):
        """Sets the incoming_total_recipients of this ReportingMailUsersDetailDataResultSet.


        :param incoming_total_recipients: The incoming_total_recipients of this ReportingMailUsersDetailDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._incoming_total_recipients = incoming_total_recipients

    @property
    def outgoing_detected_amp(self):
        """Gets the outgoing_detected_amp of this ReportingMailUsersDetailDataResultSet.  # noqa: E501


        :return: The outgoing_detected_amp of this ReportingMailUsersDetailDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._outgoing_detected_amp

    @outgoing_detected_amp.setter
    def outgoing_detected_amp(self, outgoing_detected_amp):
        """Sets the outgoing_detected_amp of this ReportingMailUsersDetailDataResultSet.


        :param outgoing_detected_amp: The outgoing_detected_amp of this ReportingMailUsersDetailDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._outgoing_detected_amp = outgoing_detected_amp

    @property
    def outgoing_detected_content_filter(self):
        """Gets the outgoing_detected_content_filter of this ReportingMailUsersDetailDataResultSet.  # noqa: E501


        :return: The outgoing_detected_content_filter of this ReportingMailUsersDetailDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._outgoing_detected_content_filter

    @outgoing_detected_content_filter.setter
    def outgoing_detected_content_filter(self, outgoing_detected_content_filter):
        """Sets the outgoing_detected_content_filter of this ReportingMailUsersDetailDataResultSet.


        :param outgoing_detected_content_filter: The outgoing_detected_content_filter of this ReportingMailUsersDetailDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._outgoing_detected_content_filter = outgoing_detected_content_filter

    @property
    def outgoing_detected_ims_spam_increment_over_case(self):
        """Gets the outgoing_detected_ims_spam_increment_over_case of this ReportingMailUsersDetailDataResultSet.  # noqa: E501


        :return: The outgoing_detected_ims_spam_increment_over_case of this ReportingMailUsersDetailDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._outgoing_detected_ims_spam_increment_over_case

    @outgoing_detected_ims_spam_increment_over_case.setter
    def outgoing_detected_ims_spam_increment_over_case(self, outgoing_detected_ims_spam_increment_over_case):
        """Sets the outgoing_detected_ims_spam_increment_over_case of this ReportingMailUsersDetailDataResultSet.


        :param outgoing_detected_ims_spam_increment_over_case: The outgoing_detected_ims_spam_increment_over_case of this ReportingMailUsersDetailDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._outgoing_detected_ims_spam_increment_over_case = outgoing_detected_ims_spam_increment_over_case

    @property
    def outgoing_detected_spam(self):
        """Gets the outgoing_detected_spam of this ReportingMailUsersDetailDataResultSet.  # noqa: E501


        :return: The outgoing_detected_spam of this ReportingMailUsersDetailDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._outgoing_detected_spam

    @outgoing_detected_spam.setter
    def outgoing_detected_spam(self, outgoing_detected_spam):
        """Sets the outgoing_detected_spam of this ReportingMailUsersDetailDataResultSet.


        :param outgoing_detected_spam: The outgoing_detected_spam of this ReportingMailUsersDetailDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._outgoing_detected_spam = outgoing_detected_spam

    @property
    def outgoing_detected_virus(self):
        """Gets the outgoing_detected_virus of this ReportingMailUsersDetailDataResultSet.  # noqa: E501


        :return: The outgoing_detected_virus of this ReportingMailUsersDetailDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._outgoing_detected_virus

    @outgoing_detected_virus.setter
    def outgoing_detected_virus(self, outgoing_detected_virus):
        """Sets the outgoing_detected_virus of this ReportingMailUsersDetailDataResultSet.


        :param outgoing_detected_virus: The outgoing_detected_virus of this ReportingMailUsersDetailDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._outgoing_detected_virus = outgoing_detected_virus

    @property
    def outgoing_threat_content_filter(self):
        """Gets the outgoing_threat_content_filter of this ReportingMailUsersDetailDataResultSet.  # noqa: E501


        :return: The outgoing_threat_content_filter of this ReportingMailUsersDetailDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._outgoing_threat_content_filter

    @outgoing_threat_content_filter.setter
    def outgoing_threat_content_filter(self, outgoing_threat_content_filter):
        """Sets the outgoing_threat_content_filter of this ReportingMailUsersDetailDataResultSet.


        :param outgoing_threat_content_filter: The outgoing_threat_content_filter of this ReportingMailUsersDetailDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._outgoing_threat_content_filter = outgoing_threat_content_filter

    @property
    def outgoing_total_clean_recipients(self):
        """Gets the outgoing_total_clean_recipients of this ReportingMailUsersDetailDataResultSet.  # noqa: E501


        :return: The outgoing_total_clean_recipients of this ReportingMailUsersDetailDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._outgoing_total_clean_recipients

    @outgoing_total_clean_recipients.setter
    def outgoing_total_clean_recipients(self, outgoing_total_clean_recipients):
        """Sets the outgoing_total_clean_recipients of this ReportingMailUsersDetailDataResultSet.


        :param outgoing_total_clean_recipients: The outgoing_total_clean_recipients of this ReportingMailUsersDetailDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._outgoing_total_clean_recipients = outgoing_total_clean_recipients

    @property
    def outgoing_total_recipients(self):
        """Gets the outgoing_total_recipients of this ReportingMailUsersDetailDataResultSet.  # noqa: E501


        :return: The outgoing_total_recipients of this ReportingMailUsersDetailDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._outgoing_total_recipients

    @outgoing_total_recipients.setter
    def outgoing_total_recipients(self, outgoing_total_recipients):
        """Sets the outgoing_total_recipients of this ReportingMailUsersDetailDataResultSet.


        :param outgoing_total_recipients: The outgoing_total_recipients of this ReportingMailUsersDetailDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._outgoing_total_recipients = outgoing_total_recipients

    @property
    def total_dlp_incidents(self):
        """Gets the total_dlp_incidents of this ReportingMailUsersDetailDataResultSet.  # noqa: E501


        :return: The total_dlp_incidents of this ReportingMailUsersDetailDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._total_dlp_incidents

    @total_dlp_incidents.setter
    def total_dlp_incidents(self, total_dlp_incidents):
        """Sets the total_dlp_incidents of this ReportingMailUsersDetailDataResultSet.


        :param total_dlp_incidents: The total_dlp_incidents of this ReportingMailUsersDetailDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._total_dlp_incidents = total_dlp_incidents

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportingMailUsersDetailDataResultSet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportingMailUsersDetailDataResultSet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
