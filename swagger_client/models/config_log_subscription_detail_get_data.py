# coding: utf-8

"""
    Secure Email Gateway API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConfigLogSubscriptionDetailGetData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'modification_date': 'int',
        'download_url': 'str',
        'name': 'str',
        'size': 'int',
        'file_hash': 'str'
    }

    attribute_map = {
        'modification_date': 'modificationDate',
        'download_url': 'downloadUrl',
        'name': 'name',
        'size': 'size',
        'file_hash': 'fileHash'
    }

    def __init__(self, modification_date=None, download_url=None, name=None, size=None, file_hash=None):  # noqa: E501
        """ConfigLogSubscriptionDetailGetData - a model defined in Swagger"""  # noqa: E501
        self._modification_date = None
        self._download_url = None
        self._name = None
        self._size = None
        self._file_hash = None
        self.discriminator = None
        if modification_date is not None:
            self.modification_date = modification_date
        if download_url is not None:
            self.download_url = download_url
        if name is not None:
            self.name = name
        if size is not None:
            self.size = size
        if file_hash is not None:
            self.file_hash = file_hash

    @property
    def modification_date(self):
        """Gets the modification_date of this ConfigLogSubscriptionDetailGetData.  # noqa: E501


        :return: The modification_date of this ConfigLogSubscriptionDetailGetData.  # noqa: E501
        :rtype: int
        """
        return self._modification_date

    @modification_date.setter
    def modification_date(self, modification_date):
        """Sets the modification_date of this ConfigLogSubscriptionDetailGetData.


        :param modification_date: The modification_date of this ConfigLogSubscriptionDetailGetData.  # noqa: E501
        :type: int
        """

        self._modification_date = modification_date

    @property
    def download_url(self):
        """Gets the download_url of this ConfigLogSubscriptionDetailGetData.  # noqa: E501


        :return: The download_url of this ConfigLogSubscriptionDetailGetData.  # noqa: E501
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this ConfigLogSubscriptionDetailGetData.


        :param download_url: The download_url of this ConfigLogSubscriptionDetailGetData.  # noqa: E501
        :type: str
        """

        self._download_url = download_url

    @property
    def name(self):
        """Gets the name of this ConfigLogSubscriptionDetailGetData.  # noqa: E501


        :return: The name of this ConfigLogSubscriptionDetailGetData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigLogSubscriptionDetailGetData.


        :param name: The name of this ConfigLogSubscriptionDetailGetData.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def size(self):
        """Gets the size of this ConfigLogSubscriptionDetailGetData.  # noqa: E501


        :return: The size of this ConfigLogSubscriptionDetailGetData.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ConfigLogSubscriptionDetailGetData.


        :param size: The size of this ConfigLogSubscriptionDetailGetData.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def file_hash(self):
        """Gets the file_hash of this ConfigLogSubscriptionDetailGetData.  # noqa: E501


        :return: The file_hash of this ConfigLogSubscriptionDetailGetData.  # noqa: E501
        :rtype: str
        """
        return self._file_hash

    @file_hash.setter
    def file_hash(self, file_hash):
        """Sets the file_hash of this ConfigLogSubscriptionDetailGetData.


        :param file_hash: The file_hash of this ConfigLogSubscriptionDetailGetData.  # noqa: E501
        :type: str
        """

        self._file_hash = file_hash

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigLogSubscriptionDetailGetData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigLogSubscriptionDetailGetData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
