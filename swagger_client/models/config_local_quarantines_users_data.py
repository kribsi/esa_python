# coding: utf-8

"""
    Secure Email Gateway API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConfigLocalQuarantinesUsersData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'custom_user_roles': 'list[str]',
        'external_authentication_service': 'str',
        'ext_users': 'list[str]',
        'local_users': 'list[str]'
    }

    attribute_map = {
        'custom_user_roles': 'custom_user_roles',
        'external_authentication_service': 'external_authentication_service',
        'ext_users': 'ext_users',
        'local_users': 'local_users'
    }

    def __init__(self, custom_user_roles=None, external_authentication_service=None, ext_users=None, local_users=None):  # noqa: E501
        """ConfigLocalQuarantinesUsersData - a model defined in Swagger"""  # noqa: E501
        self._custom_user_roles = None
        self._external_authentication_service = None
        self._ext_users = None
        self._local_users = None
        self.discriminator = None
        if custom_user_roles is not None:
            self.custom_user_roles = custom_user_roles
        if external_authentication_service is not None:
            self.external_authentication_service = external_authentication_service
        if ext_users is not None:
            self.ext_users = ext_users
        if local_users is not None:
            self.local_users = local_users

    @property
    def custom_user_roles(self):
        """Gets the custom_user_roles of this ConfigLocalQuarantinesUsersData.  # noqa: E501


        :return: The custom_user_roles of this ConfigLocalQuarantinesUsersData.  # noqa: E501
        :rtype: list[str]
        """
        return self._custom_user_roles

    @custom_user_roles.setter
    def custom_user_roles(self, custom_user_roles):
        """Sets the custom_user_roles of this ConfigLocalQuarantinesUsersData.


        :param custom_user_roles: The custom_user_roles of this ConfigLocalQuarantinesUsersData.  # noqa: E501
        :type: list[str]
        """

        self._custom_user_roles = custom_user_roles

    @property
    def external_authentication_service(self):
        """Gets the external_authentication_service of this ConfigLocalQuarantinesUsersData.  # noqa: E501


        :return: The external_authentication_service of this ConfigLocalQuarantinesUsersData.  # noqa: E501
        :rtype: str
        """
        return self._external_authentication_service

    @external_authentication_service.setter
    def external_authentication_service(self, external_authentication_service):
        """Sets the external_authentication_service of this ConfigLocalQuarantinesUsersData.


        :param external_authentication_service: The external_authentication_service of this ConfigLocalQuarantinesUsersData.  # noqa: E501
        :type: str
        """

        self._external_authentication_service = external_authentication_service

    @property
    def ext_users(self):
        """Gets the ext_users of this ConfigLocalQuarantinesUsersData.  # noqa: E501


        :return: The ext_users of this ConfigLocalQuarantinesUsersData.  # noqa: E501
        :rtype: list[str]
        """
        return self._ext_users

    @ext_users.setter
    def ext_users(self, ext_users):
        """Sets the ext_users of this ConfigLocalQuarantinesUsersData.


        :param ext_users: The ext_users of this ConfigLocalQuarantinesUsersData.  # noqa: E501
        :type: list[str]
        """

        self._ext_users = ext_users

    @property
    def local_users(self):
        """Gets the local_users of this ConfigLocalQuarantinesUsersData.  # noqa: E501


        :return: The local_users of this ConfigLocalQuarantinesUsersData.  # noqa: E501
        :rtype: list[str]
        """
        return self._local_users

    @local_users.setter
    def local_users(self, local_users):
        """Sets the local_users of this ConfigLocalQuarantinesUsersData.


        :param local_users: The local_users of this ConfigLocalQuarantinesUsersData.  # noqa: E501
        :type: list[str]
        """

        self._local_users = local_users

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigLocalQuarantinesUsersData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigLocalQuarantinesUsersData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
