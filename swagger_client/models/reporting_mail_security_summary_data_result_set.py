# coding: utf-8

"""
    Secure Email Gateway API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReportingMailSecuritySummaryDataResultSet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'received_conn_plain': 'list[dict(str, object)]',
        'received_conn_tls_fail': 'list[dict(str, object)]',
        'received_conn_tls_opt_fail': 'list[dict(str, object)]',
        'received_conn_tls_opt_success': 'list[dict(str, object)]',
        'received_conn_tls_success': 'list[dict(str, object)]',
        'received_conn_total': 'list[dict(str, object)]',
        'received_encrypted_tls': 'list[dict(str, object)]',
        'received_total': 'list[dict(str, object)]',
        'received_unencrypted': 'list[dict(str, object)]',
        'sent_conn_dane_fail': 'list[dict(str, object)]',
        'sent_conn_dane_success': 'list[dict(str, object)]',
        'sent_conn_plain': 'list[dict(str, object)]',
        'sent_conn_tls_fail': 'list[dict(str, object)]',
        'sent_conn_tls_opt_fail': 'list[dict(str, object)]',
        'sent_conn_tls_opt_success': 'list[dict(str, object)]',
        'sent_conn_tls_success': 'list[dict(str, object)]',
        'sent_conn_total': 'list[dict(str, object)]',
        'sent_encrypted_tls': 'list[dict(str, object)]',
        'sent_total': 'list[dict(str, object)]',
        'sent_unencrypted': 'list[dict(str, object)]'
    }

    attribute_map = {
        'received_conn_plain': 'received_conn_plain',
        'received_conn_tls_fail': 'received_conn_tls_fail',
        'received_conn_tls_opt_fail': 'received_conn_tls_opt_fail',
        'received_conn_tls_opt_success': 'received_conn_tls_opt_success',
        'received_conn_tls_success': 'received_conn_tls_success',
        'received_conn_total': 'received_conn_total',
        'received_encrypted_tls': 'received_encrypted_tls',
        'received_total': 'received_total',
        'received_unencrypted': 'received_unencrypted',
        'sent_conn_dane_fail': 'sent_conn_dane_fail',
        'sent_conn_dane_success': 'sent_conn_dane_success',
        'sent_conn_plain': 'sent_conn_plain',
        'sent_conn_tls_fail': 'sent_conn_tls_fail',
        'sent_conn_tls_opt_fail': 'sent_conn_tls_opt_fail',
        'sent_conn_tls_opt_success': 'sent_conn_tls_opt_success',
        'sent_conn_tls_success': 'sent_conn_tls_success',
        'sent_conn_total': 'sent_conn_total',
        'sent_encrypted_tls': 'sent_encrypted_tls',
        'sent_total': 'sent_total',
        'sent_unencrypted': 'sent_unencrypted'
    }

    def __init__(self, received_conn_plain=None, received_conn_tls_fail=None, received_conn_tls_opt_fail=None, received_conn_tls_opt_success=None, received_conn_tls_success=None, received_conn_total=None, received_encrypted_tls=None, received_total=None, received_unencrypted=None, sent_conn_dane_fail=None, sent_conn_dane_success=None, sent_conn_plain=None, sent_conn_tls_fail=None, sent_conn_tls_opt_fail=None, sent_conn_tls_opt_success=None, sent_conn_tls_success=None, sent_conn_total=None, sent_encrypted_tls=None, sent_total=None, sent_unencrypted=None):  # noqa: E501
        """ReportingMailSecuritySummaryDataResultSet - a model defined in Swagger"""  # noqa: E501
        self._received_conn_plain = None
        self._received_conn_tls_fail = None
        self._received_conn_tls_opt_fail = None
        self._received_conn_tls_opt_success = None
        self._received_conn_tls_success = None
        self._received_conn_total = None
        self._received_encrypted_tls = None
        self._received_total = None
        self._received_unencrypted = None
        self._sent_conn_dane_fail = None
        self._sent_conn_dane_success = None
        self._sent_conn_plain = None
        self._sent_conn_tls_fail = None
        self._sent_conn_tls_opt_fail = None
        self._sent_conn_tls_opt_success = None
        self._sent_conn_tls_success = None
        self._sent_conn_total = None
        self._sent_encrypted_tls = None
        self._sent_total = None
        self._sent_unencrypted = None
        self.discriminator = None
        if received_conn_plain is not None:
            self.received_conn_plain = received_conn_plain
        if received_conn_tls_fail is not None:
            self.received_conn_tls_fail = received_conn_tls_fail
        if received_conn_tls_opt_fail is not None:
            self.received_conn_tls_opt_fail = received_conn_tls_opt_fail
        if received_conn_tls_opt_success is not None:
            self.received_conn_tls_opt_success = received_conn_tls_opt_success
        if received_conn_tls_success is not None:
            self.received_conn_tls_success = received_conn_tls_success
        if received_conn_total is not None:
            self.received_conn_total = received_conn_total
        if received_encrypted_tls is not None:
            self.received_encrypted_tls = received_encrypted_tls
        if received_total is not None:
            self.received_total = received_total
        if received_unencrypted is not None:
            self.received_unencrypted = received_unencrypted
        if sent_conn_dane_fail is not None:
            self.sent_conn_dane_fail = sent_conn_dane_fail
        if sent_conn_dane_success is not None:
            self.sent_conn_dane_success = sent_conn_dane_success
        if sent_conn_plain is not None:
            self.sent_conn_plain = sent_conn_plain
        if sent_conn_tls_fail is not None:
            self.sent_conn_tls_fail = sent_conn_tls_fail
        if sent_conn_tls_opt_fail is not None:
            self.sent_conn_tls_opt_fail = sent_conn_tls_opt_fail
        if sent_conn_tls_opt_success is not None:
            self.sent_conn_tls_opt_success = sent_conn_tls_opt_success
        if sent_conn_tls_success is not None:
            self.sent_conn_tls_success = sent_conn_tls_success
        if sent_conn_total is not None:
            self.sent_conn_total = sent_conn_total
        if sent_encrypted_tls is not None:
            self.sent_encrypted_tls = sent_encrypted_tls
        if sent_total is not None:
            self.sent_total = sent_total
        if sent_unencrypted is not None:
            self.sent_unencrypted = sent_unencrypted

    @property
    def received_conn_plain(self):
        """Gets the received_conn_plain of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501


        :return: The received_conn_plain of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._received_conn_plain

    @received_conn_plain.setter
    def received_conn_plain(self, received_conn_plain):
        """Sets the received_conn_plain of this ReportingMailSecuritySummaryDataResultSet.


        :param received_conn_plain: The received_conn_plain of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._received_conn_plain = received_conn_plain

    @property
    def received_conn_tls_fail(self):
        """Gets the received_conn_tls_fail of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501


        :return: The received_conn_tls_fail of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._received_conn_tls_fail

    @received_conn_tls_fail.setter
    def received_conn_tls_fail(self, received_conn_tls_fail):
        """Sets the received_conn_tls_fail of this ReportingMailSecuritySummaryDataResultSet.


        :param received_conn_tls_fail: The received_conn_tls_fail of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._received_conn_tls_fail = received_conn_tls_fail

    @property
    def received_conn_tls_opt_fail(self):
        """Gets the received_conn_tls_opt_fail of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501


        :return: The received_conn_tls_opt_fail of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._received_conn_tls_opt_fail

    @received_conn_tls_opt_fail.setter
    def received_conn_tls_opt_fail(self, received_conn_tls_opt_fail):
        """Sets the received_conn_tls_opt_fail of this ReportingMailSecuritySummaryDataResultSet.


        :param received_conn_tls_opt_fail: The received_conn_tls_opt_fail of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._received_conn_tls_opt_fail = received_conn_tls_opt_fail

    @property
    def received_conn_tls_opt_success(self):
        """Gets the received_conn_tls_opt_success of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501


        :return: The received_conn_tls_opt_success of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._received_conn_tls_opt_success

    @received_conn_tls_opt_success.setter
    def received_conn_tls_opt_success(self, received_conn_tls_opt_success):
        """Sets the received_conn_tls_opt_success of this ReportingMailSecuritySummaryDataResultSet.


        :param received_conn_tls_opt_success: The received_conn_tls_opt_success of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._received_conn_tls_opt_success = received_conn_tls_opt_success

    @property
    def received_conn_tls_success(self):
        """Gets the received_conn_tls_success of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501


        :return: The received_conn_tls_success of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._received_conn_tls_success

    @received_conn_tls_success.setter
    def received_conn_tls_success(self, received_conn_tls_success):
        """Sets the received_conn_tls_success of this ReportingMailSecuritySummaryDataResultSet.


        :param received_conn_tls_success: The received_conn_tls_success of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._received_conn_tls_success = received_conn_tls_success

    @property
    def received_conn_total(self):
        """Gets the received_conn_total of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501


        :return: The received_conn_total of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._received_conn_total

    @received_conn_total.setter
    def received_conn_total(self, received_conn_total):
        """Sets the received_conn_total of this ReportingMailSecuritySummaryDataResultSet.


        :param received_conn_total: The received_conn_total of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._received_conn_total = received_conn_total

    @property
    def received_encrypted_tls(self):
        """Gets the received_encrypted_tls of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501


        :return: The received_encrypted_tls of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._received_encrypted_tls

    @received_encrypted_tls.setter
    def received_encrypted_tls(self, received_encrypted_tls):
        """Sets the received_encrypted_tls of this ReportingMailSecuritySummaryDataResultSet.


        :param received_encrypted_tls: The received_encrypted_tls of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._received_encrypted_tls = received_encrypted_tls

    @property
    def received_total(self):
        """Gets the received_total of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501


        :return: The received_total of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._received_total

    @received_total.setter
    def received_total(self, received_total):
        """Sets the received_total of this ReportingMailSecuritySummaryDataResultSet.


        :param received_total: The received_total of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._received_total = received_total

    @property
    def received_unencrypted(self):
        """Gets the received_unencrypted of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501


        :return: The received_unencrypted of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._received_unencrypted

    @received_unencrypted.setter
    def received_unencrypted(self, received_unencrypted):
        """Sets the received_unencrypted of this ReportingMailSecuritySummaryDataResultSet.


        :param received_unencrypted: The received_unencrypted of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._received_unencrypted = received_unencrypted

    @property
    def sent_conn_dane_fail(self):
        """Gets the sent_conn_dane_fail of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501


        :return: The sent_conn_dane_fail of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._sent_conn_dane_fail

    @sent_conn_dane_fail.setter
    def sent_conn_dane_fail(self, sent_conn_dane_fail):
        """Sets the sent_conn_dane_fail of this ReportingMailSecuritySummaryDataResultSet.


        :param sent_conn_dane_fail: The sent_conn_dane_fail of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._sent_conn_dane_fail = sent_conn_dane_fail

    @property
    def sent_conn_dane_success(self):
        """Gets the sent_conn_dane_success of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501


        :return: The sent_conn_dane_success of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._sent_conn_dane_success

    @sent_conn_dane_success.setter
    def sent_conn_dane_success(self, sent_conn_dane_success):
        """Sets the sent_conn_dane_success of this ReportingMailSecuritySummaryDataResultSet.


        :param sent_conn_dane_success: The sent_conn_dane_success of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._sent_conn_dane_success = sent_conn_dane_success

    @property
    def sent_conn_plain(self):
        """Gets the sent_conn_plain of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501


        :return: The sent_conn_plain of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._sent_conn_plain

    @sent_conn_plain.setter
    def sent_conn_plain(self, sent_conn_plain):
        """Sets the sent_conn_plain of this ReportingMailSecuritySummaryDataResultSet.


        :param sent_conn_plain: The sent_conn_plain of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._sent_conn_plain = sent_conn_plain

    @property
    def sent_conn_tls_fail(self):
        """Gets the sent_conn_tls_fail of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501


        :return: The sent_conn_tls_fail of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._sent_conn_tls_fail

    @sent_conn_tls_fail.setter
    def sent_conn_tls_fail(self, sent_conn_tls_fail):
        """Sets the sent_conn_tls_fail of this ReportingMailSecuritySummaryDataResultSet.


        :param sent_conn_tls_fail: The sent_conn_tls_fail of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._sent_conn_tls_fail = sent_conn_tls_fail

    @property
    def sent_conn_tls_opt_fail(self):
        """Gets the sent_conn_tls_opt_fail of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501


        :return: The sent_conn_tls_opt_fail of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._sent_conn_tls_opt_fail

    @sent_conn_tls_opt_fail.setter
    def sent_conn_tls_opt_fail(self, sent_conn_tls_opt_fail):
        """Sets the sent_conn_tls_opt_fail of this ReportingMailSecuritySummaryDataResultSet.


        :param sent_conn_tls_opt_fail: The sent_conn_tls_opt_fail of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._sent_conn_tls_opt_fail = sent_conn_tls_opt_fail

    @property
    def sent_conn_tls_opt_success(self):
        """Gets the sent_conn_tls_opt_success of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501


        :return: The sent_conn_tls_opt_success of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._sent_conn_tls_opt_success

    @sent_conn_tls_opt_success.setter
    def sent_conn_tls_opt_success(self, sent_conn_tls_opt_success):
        """Sets the sent_conn_tls_opt_success of this ReportingMailSecuritySummaryDataResultSet.


        :param sent_conn_tls_opt_success: The sent_conn_tls_opt_success of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._sent_conn_tls_opt_success = sent_conn_tls_opt_success

    @property
    def sent_conn_tls_success(self):
        """Gets the sent_conn_tls_success of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501


        :return: The sent_conn_tls_success of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._sent_conn_tls_success

    @sent_conn_tls_success.setter
    def sent_conn_tls_success(self, sent_conn_tls_success):
        """Sets the sent_conn_tls_success of this ReportingMailSecuritySummaryDataResultSet.


        :param sent_conn_tls_success: The sent_conn_tls_success of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._sent_conn_tls_success = sent_conn_tls_success

    @property
    def sent_conn_total(self):
        """Gets the sent_conn_total of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501


        :return: The sent_conn_total of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._sent_conn_total

    @sent_conn_total.setter
    def sent_conn_total(self, sent_conn_total):
        """Sets the sent_conn_total of this ReportingMailSecuritySummaryDataResultSet.


        :param sent_conn_total: The sent_conn_total of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._sent_conn_total = sent_conn_total

    @property
    def sent_encrypted_tls(self):
        """Gets the sent_encrypted_tls of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501


        :return: The sent_encrypted_tls of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._sent_encrypted_tls

    @sent_encrypted_tls.setter
    def sent_encrypted_tls(self, sent_encrypted_tls):
        """Sets the sent_encrypted_tls of this ReportingMailSecuritySummaryDataResultSet.


        :param sent_encrypted_tls: The sent_encrypted_tls of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._sent_encrypted_tls = sent_encrypted_tls

    @property
    def sent_total(self):
        """Gets the sent_total of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501


        :return: The sent_total of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._sent_total

    @sent_total.setter
    def sent_total(self, sent_total):
        """Sets the sent_total of this ReportingMailSecuritySummaryDataResultSet.


        :param sent_total: The sent_total of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._sent_total = sent_total

    @property
    def sent_unencrypted(self):
        """Gets the sent_unencrypted of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501


        :return: The sent_unencrypted of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._sent_unencrypted

    @sent_unencrypted.setter
    def sent_unencrypted(self, sent_unencrypted):
        """Sets the sent_unencrypted of this ReportingMailSecuritySummaryDataResultSet.


        :param sent_unencrypted: The sent_unencrypted of this ReportingMailSecuritySummaryDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._sent_unencrypted = sent_unencrypted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportingMailSecuritySummaryDataResultSet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportingMailSecuritySummaryDataResultSet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
