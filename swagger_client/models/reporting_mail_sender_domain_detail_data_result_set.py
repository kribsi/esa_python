# coding: utf-8

"""
    Secure Email Gateway API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReportingMailSenderDomainDetailDataResultSet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'detected_amp': 'list[dict(str, object)]',
        'detected_spam': 'list[dict(str, object)]',
        'detected_virus': 'list[dict(str, object)]',
        'threat_content_filter': 'list[dict(str, object)]',
        'total_clean_recipients': 'list[dict(str, object)]',
        'total_dlp_incidents': 'list[dict(str, object)]',
        'total_recipients_processed': 'list[dict(str, object)]',
        'total_threat_recipients': 'list[dict(str, object)]'
    }

    attribute_map = {
        'detected_amp': 'detected_amp',
        'detected_spam': 'detected_spam',
        'detected_virus': 'detected_virus',
        'threat_content_filter': 'threat_content_filter',
        'total_clean_recipients': 'total_clean_recipients',
        'total_dlp_incidents': 'total_dlp_incidents',
        'total_recipients_processed': 'total_recipients_processed',
        'total_threat_recipients': 'total_threat_recipients'
    }

    def __init__(self, detected_amp=None, detected_spam=None, detected_virus=None, threat_content_filter=None, total_clean_recipients=None, total_dlp_incidents=None, total_recipients_processed=None, total_threat_recipients=None):  # noqa: E501
        """ReportingMailSenderDomainDetailDataResultSet - a model defined in Swagger"""  # noqa: E501
        self._detected_amp = None
        self._detected_spam = None
        self._detected_virus = None
        self._threat_content_filter = None
        self._total_clean_recipients = None
        self._total_dlp_incidents = None
        self._total_recipients_processed = None
        self._total_threat_recipients = None
        self.discriminator = None
        if detected_amp is not None:
            self.detected_amp = detected_amp
        if detected_spam is not None:
            self.detected_spam = detected_spam
        if detected_virus is not None:
            self.detected_virus = detected_virus
        if threat_content_filter is not None:
            self.threat_content_filter = threat_content_filter
        if total_clean_recipients is not None:
            self.total_clean_recipients = total_clean_recipients
        if total_dlp_incidents is not None:
            self.total_dlp_incidents = total_dlp_incidents
        if total_recipients_processed is not None:
            self.total_recipients_processed = total_recipients_processed
        if total_threat_recipients is not None:
            self.total_threat_recipients = total_threat_recipients

    @property
    def detected_amp(self):
        """Gets the detected_amp of this ReportingMailSenderDomainDetailDataResultSet.  # noqa: E501


        :return: The detected_amp of this ReportingMailSenderDomainDetailDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._detected_amp

    @detected_amp.setter
    def detected_amp(self, detected_amp):
        """Sets the detected_amp of this ReportingMailSenderDomainDetailDataResultSet.


        :param detected_amp: The detected_amp of this ReportingMailSenderDomainDetailDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._detected_amp = detected_amp

    @property
    def detected_spam(self):
        """Gets the detected_spam of this ReportingMailSenderDomainDetailDataResultSet.  # noqa: E501


        :return: The detected_spam of this ReportingMailSenderDomainDetailDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._detected_spam

    @detected_spam.setter
    def detected_spam(self, detected_spam):
        """Sets the detected_spam of this ReportingMailSenderDomainDetailDataResultSet.


        :param detected_spam: The detected_spam of this ReportingMailSenderDomainDetailDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._detected_spam = detected_spam

    @property
    def detected_virus(self):
        """Gets the detected_virus of this ReportingMailSenderDomainDetailDataResultSet.  # noqa: E501


        :return: The detected_virus of this ReportingMailSenderDomainDetailDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._detected_virus

    @detected_virus.setter
    def detected_virus(self, detected_virus):
        """Sets the detected_virus of this ReportingMailSenderDomainDetailDataResultSet.


        :param detected_virus: The detected_virus of this ReportingMailSenderDomainDetailDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._detected_virus = detected_virus

    @property
    def threat_content_filter(self):
        """Gets the threat_content_filter of this ReportingMailSenderDomainDetailDataResultSet.  # noqa: E501


        :return: The threat_content_filter of this ReportingMailSenderDomainDetailDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._threat_content_filter

    @threat_content_filter.setter
    def threat_content_filter(self, threat_content_filter):
        """Sets the threat_content_filter of this ReportingMailSenderDomainDetailDataResultSet.


        :param threat_content_filter: The threat_content_filter of this ReportingMailSenderDomainDetailDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._threat_content_filter = threat_content_filter

    @property
    def total_clean_recipients(self):
        """Gets the total_clean_recipients of this ReportingMailSenderDomainDetailDataResultSet.  # noqa: E501


        :return: The total_clean_recipients of this ReportingMailSenderDomainDetailDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._total_clean_recipients

    @total_clean_recipients.setter
    def total_clean_recipients(self, total_clean_recipients):
        """Sets the total_clean_recipients of this ReportingMailSenderDomainDetailDataResultSet.


        :param total_clean_recipients: The total_clean_recipients of this ReportingMailSenderDomainDetailDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._total_clean_recipients = total_clean_recipients

    @property
    def total_dlp_incidents(self):
        """Gets the total_dlp_incidents of this ReportingMailSenderDomainDetailDataResultSet.  # noqa: E501


        :return: The total_dlp_incidents of this ReportingMailSenderDomainDetailDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._total_dlp_incidents

    @total_dlp_incidents.setter
    def total_dlp_incidents(self, total_dlp_incidents):
        """Sets the total_dlp_incidents of this ReportingMailSenderDomainDetailDataResultSet.


        :param total_dlp_incidents: The total_dlp_incidents of this ReportingMailSenderDomainDetailDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._total_dlp_incidents = total_dlp_incidents

    @property
    def total_recipients_processed(self):
        """Gets the total_recipients_processed of this ReportingMailSenderDomainDetailDataResultSet.  # noqa: E501


        :return: The total_recipients_processed of this ReportingMailSenderDomainDetailDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._total_recipients_processed

    @total_recipients_processed.setter
    def total_recipients_processed(self, total_recipients_processed):
        """Sets the total_recipients_processed of this ReportingMailSenderDomainDetailDataResultSet.


        :param total_recipients_processed: The total_recipients_processed of this ReportingMailSenderDomainDetailDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._total_recipients_processed = total_recipients_processed

    @property
    def total_threat_recipients(self):
        """Gets the total_threat_recipients of this ReportingMailSenderDomainDetailDataResultSet.  # noqa: E501


        :return: The total_threat_recipients of this ReportingMailSenderDomainDetailDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._total_threat_recipients

    @total_threat_recipients.setter
    def total_threat_recipients(self, total_threat_recipients):
        """Sets the total_threat_recipients of this ReportingMailSenderDomainDetailDataResultSet.


        :param total_threat_recipients: The total_threat_recipients of this ReportingMailSenderDomainDetailDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._total_threat_recipients = total_threat_recipients

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportingMailSenderDomainDetailDataResultSet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportingMailSenderDomainDetailDataResultSet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
