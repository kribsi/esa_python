# coding: utf-8

"""
    Secure Email Gateway API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReportingMailThreatfeedsIndicatorSummaryDataResultSet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'domain': 'list[dict(str, object)]',
        'file_hash': 'list[dict(str, object)]',
        'url': 'list[dict(str, object)]'
    }

    attribute_map = {
        'domain': 'domain',
        'file_hash': 'file_hash',
        'url': 'url'
    }

    def __init__(self, domain=None, file_hash=None, url=None):  # noqa: E501
        """ReportingMailThreatfeedsIndicatorSummaryDataResultSet - a model defined in Swagger"""  # noqa: E501
        self._domain = None
        self._file_hash = None
        self._url = None
        self.discriminator = None
        if domain is not None:
            self.domain = domain
        if file_hash is not None:
            self.file_hash = file_hash
        if url is not None:
            self.url = url

    @property
    def domain(self):
        """Gets the domain of this ReportingMailThreatfeedsIndicatorSummaryDataResultSet.  # noqa: E501


        :return: The domain of this ReportingMailThreatfeedsIndicatorSummaryDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this ReportingMailThreatfeedsIndicatorSummaryDataResultSet.


        :param domain: The domain of this ReportingMailThreatfeedsIndicatorSummaryDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._domain = domain

    @property
    def file_hash(self):
        """Gets the file_hash of this ReportingMailThreatfeedsIndicatorSummaryDataResultSet.  # noqa: E501


        :return: The file_hash of this ReportingMailThreatfeedsIndicatorSummaryDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._file_hash

    @file_hash.setter
    def file_hash(self, file_hash):
        """Sets the file_hash of this ReportingMailThreatfeedsIndicatorSummaryDataResultSet.


        :param file_hash: The file_hash of this ReportingMailThreatfeedsIndicatorSummaryDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._file_hash = file_hash

    @property
    def url(self):
        """Gets the url of this ReportingMailThreatfeedsIndicatorSummaryDataResultSet.  # noqa: E501


        :return: The url of this ReportingMailThreatfeedsIndicatorSummaryDataResultSet.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ReportingMailThreatfeedsIndicatorSummaryDataResultSet.


        :param url: The url of this ReportingMailThreatfeedsIndicatorSummaryDataResultSet.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportingMailThreatfeedsIndicatorSummaryDataResultSet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportingMailThreatfeedsIndicatorSummaryDataResultSet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
